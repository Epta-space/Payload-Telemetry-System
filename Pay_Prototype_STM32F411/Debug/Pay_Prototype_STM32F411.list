
Pay_Prototype_STM32F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fab8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  0800fc58  0800fc58  00010c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010798  08010798  000121f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010798  08010798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107a0  080107a0  000121f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107a0  080107a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080107a4  080107a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080107a8  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200001f8  080109a0  000121f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080109a0  00012564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8d8  00000000  00000000  00012228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257f  00000000  00000000  00021b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00024080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d3  00000000  00000000  00024c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017718  00000000  00000000  000254eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001114d  00000000  00000000  0003cc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0e6  00000000  00000000  0004dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  000d9e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000de52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc40 	.word	0x0800fc40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800fc40 	.word	0x0800fc40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <GPS_begin>:
#include "GPS.h"

UART_HandleTypeDef GPSuart;

void GPS_begin(UART_HandleTypeDef uart, GPS *gps)
{
 8000f48:	b084      	sub	sp, #16
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	f107 0c08 	add.w	ip, r7, #8
 8000f52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPSuart = uart;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <GPS_begin+0x2c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2248      	movs	r2, #72	@ 0x48
 8000f60:	4619      	mov	r1, r3
 8000f62:	f00a faa0 	bl	800b4a6 <memcpy>
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6e:	b004      	add	sp, #16
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000214 	.word	0x20000214

08000f78 <imu_begin>:

/************************IMU Functions************************/

/*Configuration Functions */
void imu_begin(SPI_HandleTypeDef spi, GPIO_TypeDef* CS_IMU_, uint16_t CS_IMU_Pin_, IMU* imu)
{
 8000f78:	b084      	sub	sp, #16
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	f107 0c10 	add.w	ip, r7, #16
 8000f84:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	imuspi = spi;
 8000f88:	4bc4      	ldr	r3, [pc, #784]	@ (800129c <imu_begin+0x324>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2258      	movs	r2, #88	@ 0x58
 8000f92:	4619      	mov	r1, r3
 8000f94:	f00a fa87 	bl	800b4a6 <memcpy>
	CS_IMU_GPIO = CS_IMU_;
 8000f98:	4ac1      	ldr	r2, [pc, #772]	@ (80012a0 <imu_begin+0x328>)
 8000f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f9c:	6013      	str	r3, [r2, #0]
	CS_IMU_Pin = CS_IMU_Pin_;
 8000f9e:	4ac1      	ldr	r2, [pc, #772]	@ (80012a4 <imu_begin+0x32c>)
 8000fa0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000fa4:	8013      	strh	r3, [r2, #0]

	uint8_t val=0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	70fb      	strb	r3, [r7, #3]

	HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	@ 0x64
 8000fac:	f006 ff50 	bl	8007e50 <HAL_Delay>

	imu_config(imu);
 8000fb0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000fb2:	f000 fd2f 	bl	8001a14 <imu_config>

	imu_Read_Reg(ICM20948_PWR_MGMT_1, &val, 1);
 8000fb6:	2006      	movs	r0, #6
 8000fb8:	1cfb      	adds	r3, r7, #3
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f005 ffa1 	bl	8006f04 <imu_Read_Reg>
	imu->PWMT1_IC=val;
 8000fc2:	78fa      	ldrb	r2, [r7, #3]
 8000fc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fc6:	f883 2718 	strb.w	r2, [r3, #1816]	@ 0x718

	/* Variaveis usadas */

	imu->Acc_F_Choice_B=0b0;			//Sem uso de filtros digitais do IMU para o acelerômetro
 8000fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 271a 	strb.w	r2, [r3, #1818]	@ 0x71a
	imu->Gyro_F_Choice_B=0b0;			//Sem uso de filtros digitais do IMU para o giroscópio
 8000fd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2719 	strb.w	r2, [r3, #1817]	@ 0x719
										//								|Medidas feitas
	imu->acc_offset_X=0;				//Seta Bias do acelerômetro em X|
 8000fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	631a      	str	r2, [r3, #48]	@ 0x30
	imu->acc_offset_Y=0;				//Seta Bias do acelerômetro em Y|
 8000fe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	641a      	str	r2, [r3, #64]	@ 0x40
	imu->acc_offset_Z=0;				//Sera Bias do acelerômetro em Z|
 8000fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	651a      	str	r2, [r3, #80]	@ 0x50

	imu->gyro_offset_X=0;				//Seta Bias do giroscópio em X	|-0.7150|-0.7607|-0.7429|-0.6969
 8000ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	669a      	str	r2, [r3, #104]	@ 0x68
	imu->gyro_offset_Y=0;				//Seta Bias do giroscópio em Y	|-0.1851|-0.1803|-0.1709|-0.0781
 8000ffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	679a      	str	r2, [r3, #120]	@ 0x78
	imu->gyro_offset_Z=0;				//Sera Bias do giroscópio em Z	|-0.0512|+0.0225|+0.0701|+0.0347
 8001002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	imu->mag_offset_X=0;				//Seta Bias do magnetômetro em X|
 800100c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	imu->mag_offset_Y=0;				//Seta Bias do magnetômetro em Y|
 8001016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	imu->mag_offset_Z=0;				//Sera Bias do magnetômetro em Z|
 8001020:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

//	imu->mag_offset_X=-38.7842;			//Seta Bias do magnetômetro em X|
//	imu->mag_offset_Y=59.1098;			//Seta Bias do magnetômetro em Y|
//	imu->mag_offset_Z=-14.3299;			//Sera Bias do magnetômetro em Z|

	imu->mag_offset_X=-30.7535;				//Seta Bias do magnetômetro em X|
 800102a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800102c:	4a9e      	ldr	r2, [pc, #632]	@ (80012a8 <imu_begin+0x330>)
 800102e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	imu->mag_offset_Y=56.3195;				//Seta Bias do magnetômetro em Y|
 8001032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001034:	4a9d      	ldr	r2, [pc, #628]	@ (80012ac <imu_begin+0x334>)
 8001036:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	imu->mag_offset_Z=-16.0127;				//Sera Bias do magnetômetro em Z|
 800103a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800103c:	4a9c      	ldr	r2, [pc, #624]	@ (80012b0 <imu_begin+0x338>)
 800103e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

	//Seta matriz de calibração do magnetômetro
	imu->mag_callb[0][0]=1;				imu->mag_callb[0][1]=0;				imu->mag_callb[0][2]=0;
 8001042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001044:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001048:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800104c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	imu->mag_callb[1][0]=0;				imu->mag_callb[1][1]=1;				imu->mag_callb[1][2]=0;
 8001060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800106a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800106c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001070:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001074:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	imu->mag_callb[2][0]=0;				imu->mag_callb[2][1]=0;				imu->mag_callb[2][2]=1;
 800107e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8001092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001094:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001098:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	imu->mag_callb[0][0]=0.9161;		imu->mag_callb[0][1]=0;				imu->mag_callb[0][2]=0;
 800109c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800109e:	4a85      	ldr	r2, [pc, #532]	@ (80012b4 <imu_begin+0x33c>)
 80010a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80010ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	imu->mag_callb[1][0]=0;				imu->mag_callb[1][1]=1.3681;		imu->mag_callb[1][2]=0;
 80010b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80010c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010c4:	4a7c      	ldr	r2, [pc, #496]	@ (80012b8 <imu_begin+0x340>)
 80010c6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80010ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	imu->mag_callb[2][0]=0;				imu->mag_callb[2][1]=0;				imu->mag_callb[2][2]=0.7979;
 80010d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 80010de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80010e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ea:	4a74      	ldr	r2, [pc, #464]	@ (80012bc <imu_begin+0x344>)
 80010ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

//	imu->mag_callb[0][0]=0.9101;		imu->mag_callb[0][1]=-0.0497;		imu->mag_callb[0][2]=0.0385;
//	imu->mag_callb[1][0]=-0.0497;		imu->mag_callb[1][1]=1.4475;		imu->mag_callb[1][2]=0.0028;
//	imu->mag_callb[2][0]=0.0385;		imu->mag_callb[2][1]=-0.0028;		imu->mag_callb[2][2]=0.7621;

	imu->Phi	=	0;
 80010f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	imu->Theta	=	0;
 80010fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	imu->Gama	=	0;
 8001104:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

	imu->Gyro_Phi=0;					//Reseta Atitude
 800110e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	imu->Gyro_Theta=0;					//Reseta Atitude
 8001118:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	imu->Gyro_Gama=0;					//Reseta Atitude
 8001122:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

	imu->Mag_Phi=0;						//Reseta Atitude
 800112c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	imu->Mag_Theta=0;					//Reseta Atitude
 8001136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	imu->Mag_Gama=0;						//Reseta Atitude
 8001140:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

	imu->Acc_Phi_0=0;		imu->Gyro_Phi_0=0;		imu->Mag_Phi_0=0;
 800114a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 8001154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 800115e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
	imu->Acc_Theta_0=0;		imu->Gyro_Theta_0=0;	imu->Mag_Theta_0=0;
 8001168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 8001172:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 800117c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	imu->Acc_Gama_0=0;		imu->Gyro_Gama_0=0;		imu->Mag_Gama_0=0;
 8001186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8001190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 800119a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

	imu->Vel_X_NED=0;
 80011a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	imu->Vel_Y_NED=0;
 80011ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
	imu->Vel_Z_NED=0;
 80011b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4

	imu->Pos_X_NED=0;
 80011c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
	imu->Pos_Y_NED=0;
 80011cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	imu->Pos_Z_NED=0;
 80011d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	imu->acc_lim=0.1;					//Limiar para computar atitude do magnetômetro em [g] absoluto
 80011e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011e2:	4a37      	ldr	r2, [pc, #220]	@ (80012c0 <imu_begin+0x348>)
 80011e4:	659a      	str	r2, [r3, #88]	@ 0x58

	imu->mag_lim=1;					//Limiar para computar atitude do magnetômetro em [g] absoluto
 80011e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011ec:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

	imu->temp_sens = 32767/(85+40);		//Seta sensibilidade do sensor de temperatura????
 80011f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011f2:	4a34      	ldr	r2, [pc, #208]	@ (80012c4 <imu_begin+0x34c>)
 80011f4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	imu->mag_sens = 32767/4912;			//Seta sensibilidade do magnetômetro
 80011f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011fa:	4a33      	ldr	r2, [pc, #204]	@ (80012c8 <imu_begin+0x350>)
 80011fc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	//Constantes de filtros
	imu->T_smpl=5;					    //Periodo de amostragem de 5 ms
 8001200:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001202:	f503 63df 	add.w	r3, r3, #1784	@ 0x6f8
 8001206:	4a31      	ldr	r2, [pc, #196]	@ (80012cc <imu_begin+0x354>)
 8001208:	601a      	str	r2, [r3, #0]
	imu->curr_Time=0;					//Reseta o tempo lido no presente
 800120a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800120c:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
	imu->prev_Time=0;					//Reseta o tempo lido no passado
 8001216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001218:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	601a      	str	r2, [r3, #0]

	//Constantes do filtro passa baixa do acelerômetro
	imu->Acc_DLPF_A[0]=0.02008;				imu->Acc_DLPF_B[0]=1;
 8001222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001224:	4a2a      	ldr	r2, [pc, #168]	@ (80012d0 <imu_begin+0x358>)
 8001226:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800122a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800122c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001230:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	imu->Acc_DLPF_A[1]=0.04017;				imu->Acc_DLPF_B[1]=-1.561;
 8001234:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001236:	4a27      	ldr	r2, [pc, #156]	@ (80012d4 <imu_begin+0x35c>)
 8001238:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800123c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800123e:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <imu_begin+0x360>)
 8001240:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	imu->Acc_DLPF_A[2]=0.02008;				imu->Acc_DLPF_B[2]=0.6414;
 8001244:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001246:	4a22      	ldr	r2, [pc, #136]	@ (80012d0 <imu_begin+0x358>)
 8001248:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 800124c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <imu_begin+0x364>)
 8001250:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	//Constantes do filtro passa baixa do giroscópio
	imu->Gyro_DLPF_A[0]=0.01643;			imu->Gyro_DLPF_B[0]=1;
 8001254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001256:	4a22      	ldr	r2, [pc, #136]	@ (80012e0 <imu_begin+0x368>)
 8001258:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 800125c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800125e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001262:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	imu->Gyro_DLPF_A[1]=0.02957;			imu->Gyro_DLPF_B[1]=-1.617;
 8001266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001268:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <imu_begin+0x36c>)
 800126a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
 800126e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001270:	4a1d      	ldr	r2, [pc, #116]	@ (80012e8 <imu_begin+0x370>)
 8001272:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	imu->Gyro_DLPF_A[2]=0.01643;			imu->Gyro_DLPF_B[2]=0.6794;
 8001276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001278:	4a19      	ldr	r2, [pc, #100]	@ (80012e0 <imu_begin+0x368>)
 800127a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
 800127e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001280:	4a1a      	ldr	r2, [pc, #104]	@ (80012ec <imu_begin+0x374>)
 8001282:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

	//Cosntantes para filtro passa alta do giroscópio
	imu->Gyro_DHPF_A[0]=0.755;				imu->Gyro_DHPF_B[0]=1;
 8001286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <imu_begin+0x378>)
 800128a:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
 800128e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001290:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001294:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
 8001298:	e02c      	b.n	80012f4 <imu_begin+0x37c>
 800129a:	bf00      	nop
 800129c:	2000025c 	.word	0x2000025c
 80012a0:	200002b4 	.word	0x200002b4
 80012a4:	200002b8 	.word	0x200002b8
 80012a8:	c1f6072b 	.word	0xc1f6072b
 80012ac:	4261472b 	.word	0x4261472b
 80012b0:	c1801a02 	.word	0xc1801a02
 80012b4:	3f6a8588 	.word	0x3f6a8588
 80012b8:	3faf1de7 	.word	0x3faf1de7
 80012bc:	3f4c432d 	.word	0x3f4c432d
 80012c0:	3dcccccd 	.word	0x3dcccccd
 80012c4:	43830000 	.word	0x43830000
 80012c8:	40c00000 	.word	0x40c00000
 80012cc:	40a00000 	.word	0x40a00000
 80012d0:	3ca47ed0 	.word	0x3ca47ed0
 80012d4:	3d24894c 	.word	0x3d24894c
 80012d8:	bfc7ced9 	.word	0xbfc7ced9
 80012dc:	3f2432ca 	.word	0x3f2432ca
 80012e0:	3c869835 	.word	0x3c869835
 80012e4:	3cf23cc9 	.word	0x3cf23cc9
 80012e8:	bfcef9db 	.word	0xbfcef9db
 80012ec:	3f2ded29 	.word	0x3f2ded29
 80012f0:	3f4147ae 	.word	0x3f4147ae
	imu->Gyro_DHPF_A[1]=-1.51;				imu->Gyro_DHPF_B[1]=-1.656;
 80012f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012f6:	4acb      	ldr	r2, [pc, #812]	@ (8001624 <imu_begin+0x6ac>)
 80012f8:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
 80012fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012fe:	4aca      	ldr	r2, [pc, #808]	@ (8001628 <imu_begin+0x6b0>)
 8001300:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
	imu->Gyro_DHPF_A[2]=0.755;				imu->Gyro_DHPF_B[2]=0.7328;
 8001304:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001306:	4ac9      	ldr	r2, [pc, #804]	@ (800162c <imu_begin+0x6b4>)
 8001308:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
 800130c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800130e:	4ac8      	ldr	r2, [pc, #800]	@ (8001630 <imu_begin+0x6b8>)
 8001310:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254

	//Constantes para filtro passa baixa do magnetômetro
	imu->Mag_DLPF_A[0]=0.2483;			imu->Mag_DLPF_B[0]=1;
 8001314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001316:	4ac7      	ldr	r2, [pc, #796]	@ (8001634 <imu_begin+0x6bc>)
 8001318:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 800131c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800131e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001322:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
	imu->Mag_DLPF_A[1]=0.4967;			imu->Mag_DLPF_B[1]=-0.1842;
 8001326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001328:	4ac3      	ldr	r2, [pc, #780]	@ (8001638 <imu_begin+0x6c0>)
 800132a:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 800132e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001330:	4ac2      	ldr	r2, [pc, #776]	@ (800163c <imu_begin+0x6c4>)
 8001332:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
	imu->Mag_DLPF_A[2]=0.2483;			imu->Mag_DLPF_B[2]=0.1776;
 8001336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001338:	4abe      	ldr	r2, [pc, #760]	@ (8001634 <imu_begin+0x6bc>)
 800133a:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
 800133e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001340:	4abf      	ldr	r2, [pc, #764]	@ (8001640 <imu_begin+0x6c8>)
 8001342:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

	//Filtro Complementar
	imu->CF_alpha=0.7;					//Constante para o filtro complementar
 8001346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001348:	4abe      	ldr	r2, [pc, #760]	@ (8001644 <imu_begin+0x6cc>)
 800134a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	// Dinamica do Sistema
	imu->Ad[0][0]=1;				imu->Ad[0][1]=imu->T_smpl/1000;
 800134e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001350:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001354:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
 8001358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800135a:	f503 63df 	add.w	r3, r3, #1784	@ 0x6f8
 800135e:	ed93 7a00 	vldr	s14, [r3]
 8001362:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8001648 <imu_begin+0x6d0>
 8001366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800136c:	edc3 7aa1 	vstr	s15, [r3, #644]	@ 0x284
	imu->Ad[1][0]=0;				imu->Ad[1][1]=1;
 8001370:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
 800137a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800137c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001380:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

	imu->Bd[0]=imu->T_smpl/1000;	imu->Bd[1]=0;
 8001384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001386:	f503 63df 	add.w	r3, r3, #1784	@ 0x6f8
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	eddf 6aae 	vldr	s13, [pc, #696]	@ 8001648 <imu_begin+0x6d0>
 8001392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001398:	edc3 7aa4 	vstr	s15, [r3, #656]	@ 0x290
 800139c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

	imu->Cd[0]=1;					imu->Cd[1]=0;
 80013a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 80013b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c

	imu->Ke[0]=0.59;				imu->Ke[1]=17.4;
 80013ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013bc:	4aa3      	ldr	r2, [pc, #652]	@ (800164c <imu_begin+0x6d4>)
 80013be:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
 80013c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013c4:	4aa2      	ldr	r2, [pc, #648]	@ (8001650 <imu_begin+0x6d8>)
 80013c6:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac

	imu->Gd[0]=1;					imu->Gd[1]=1;
 80013ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013d0:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
 80013d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

	//Observador de Estados
	imu->x_Phi_SO_c[0]=0;			imu->x_Phi_SO_c_past[0]=0;			imu->x_Phi_SO_p[0]=0;
 80013de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
 80013e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 80013f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
	imu->x_Phi_SO_c[1]=0;			imu->x_Phi_SO_c_past[1]=0;			imu->x_Phi_SO_p[1]=0;
 80013fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
 8001406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 8001410:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

	imu->x_Theta_SO_c[0]=0;			imu->x_Theta_SO_c_past[0]=0;		imu->x_Theta_SO_p[0]=0;
 800141a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
 8001424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
 800142e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	imu->x_Theta_SO_c[1]=0;			imu->x_Theta_SO_c_past[1]=0;		imu->x_Theta_SO_p[1]=0;
 8001438:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 8001442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
 800144c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4

	imu->x_Gama_SO_c[0]=0;			imu->x_Gama_SO_c_past[0]=0;			imu->x_Gama_SO_p[0]=0;
 8001456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
 8001460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
 800146a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	imu->x_Gama_SO_c[1]=0;			imu->x_Gama_SO_c_past[1]=0;			imu->x_Gama_SO_p[1]=0;
 8001474:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
 800147e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
 8001488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	//Filtro de Kalman
	imu->R_w_Phi = 0.01;
 8001492:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001494:	4a6f      	ldr	r2, [pc, #444]	@ (8001654 <imu_begin+0x6dc>)
 8001496:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
	imu->R_v_Phi = 0.05;
 800149a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800149c:	4a6e      	ldr	r2, [pc, #440]	@ (8001658 <imu_begin+0x6e0>)
 800149e:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330

	imu->R_w_Theta = 0.01;
 80014a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014a4:	4a6b      	ldr	r2, [pc, #428]	@ (8001654 <imu_begin+0x6dc>)
 80014a6:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
	imu->R_v_Theta = 0.05;
 80014aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001658 <imu_begin+0x6e0>)
 80014ae:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360

	imu->R_w_Gama = 0.01;
 80014b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014b4:	4a67      	ldr	r2, [pc, #412]	@ (8001654 <imu_begin+0x6dc>)
 80014b6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
	imu->R_v_Gama = 0.05;
 80014ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014bc:	4a66      	ldr	r2, [pc, #408]	@ (8001658 <imu_begin+0x6e0>)
 80014be:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

	imu->K_KF_Phi[0] = 0; imu->K_KF_Phi[1] = 0;
 80014c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
 80014cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	imu->P_minus_Phi[0][0] = 1; imu->P_minus_Phi[0][1] = 0; imu->P_minus_Phi[1][0] = 0; imu->P_minus_Phi[1][1] = 1;
 80014d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80014dc:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
 80014e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
 80014ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
 80014f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80014fa:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
	imu->P_plus_Phi[0][0] = 1; imu->P_plus_Phi[0][1] = 0; imu->P_plus_Phi[1][0] = 0; imu->P_plus_Phi[1][1] = 1;
 80014fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001500:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001504:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
 8001508:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
 8001512:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
 800151c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800151e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001522:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328

	imu->K_KF_Theta[0] = 0; imu->K_KF_Theta[1] = 0;
 8001526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f8c3 2334 	str.w	r2, [r3, #820]	@ 0x334
 8001530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
	imu->P_minus_Theta[0][0] = 1; imu->P_minus_Theta[0][1] = 0; imu->P_minus_Theta[1][0] = 0; imu->P_minus_Theta[1][1] = 1;
 800153a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800153c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001540:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
 8001544:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
 800154e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
 8001558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800155a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800155e:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
	imu->P_plus_Theta[0][0] = 1; imu->P_plus_Theta[0][1] = 0; imu->P_plus_Theta[1][0] = 0; imu->P_plus_Theta[1][1] = 1;
 8001562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001564:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001568:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 800156c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
 8001576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
 8001580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001582:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001586:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358

	imu->K_KF_Gama[0] = 0; imu->K_KF_Gama[1] = 0;
 800158a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
 8001594:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
	imu->P_minus_Gama[0][0] = 1; imu->P_minus_Gama[0][1] = 0; imu->P_minus_Gama[1][0] = 0; imu->P_minus_Gama[1][1] = 1;
 800159e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015a4:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c
 80015a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
 80015b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f8c3 2374 	str.w	r2, [r3, #884]	@ 0x374
 80015bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015c2:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
	imu->P_plus_Gama[0][0] = 1; imu->P_plus_Gama[0][1] = 0; imu->P_plus_Gama[1][0] = 0; imu->P_plus_Gama[1][1] = 1;
 80015c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015cc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
 80015d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 80015da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
 80015e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015ea:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388

	imu->Phi_KF = 0;
 80015ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
	imu->x_Phi_KF_c[0] = 0; imu->x_Phi_KF_c[1] = 0;
 80015f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f8c3 2398 	str.w	r2, [r3, #920]	@ 0x398
 8001602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c
	imu->x_Phi_KF_c_past[0] = 0; imu->x_Phi_KF_c_past[1] = 0;
 800160c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
 8001616:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4
	imu->x_Phi_KF_p[0] = 0; imu->x_Phi_KF_p[1] = 0;
 8001620:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001622:	e01d      	b.n	8001660 <imu_begin+0x6e8>
 8001624:	bfc147ae 	.word	0xbfc147ae
 8001628:	bfd3f7cf 	.word	0xbfd3f7cf
 800162c:	3f4147ae 	.word	0x3f4147ae
 8001630:	3f3b98c8 	.word	0x3f3b98c8
 8001634:	3e7e425b 	.word	0x3e7e425b
 8001638:	3efe4f76 	.word	0x3efe4f76
 800163c:	be3c9eed 	.word	0xbe3c9eed
 8001640:	3e35dcc6 	.word	0x3e35dcc6
 8001644:	3f333333 	.word	0x3f333333
 8001648:	447a0000 	.word	0x447a0000
 800164c:	3f170a3d 	.word	0x3f170a3d
 8001650:	418b3333 	.word	0x418b3333
 8001654:	3c23d70a 	.word	0x3c23d70a
 8001658:	3d4ccccd 	.word	0x3d4ccccd
 800165c:	00000000 	.word	0x00000000
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f8c3 23a8 	str.w	r2, [r3, #936]	@ 0x3a8
 8001668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f8c3 23ac 	str.w	r2, [r3, #940]	@ 0x3ac

	imu->Theta_KF = 0;
 8001672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
	imu->x_Theta_KF_c[0] = 0; imu->x_Theta_KF_c[1] = 0;
 800167c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
 8001686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
	imu->x_Theta_KF_c_past[0] = 0; imu->x_Theta_KF_c_past[1] = 0;
 8001690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
 800169a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
	imu->x_Theta_KF_p[0] = 0; imu->x_Theta_KF_p[1] = 0;
 80016a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
 80016ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

	imu->Gama_KF = 0;
 80016b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
	imu->x_Gama_KF_c[0] = 0; imu->x_Gama_KF_c[1] = 0;
 80016c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0
 80016cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
	imu->x_Gama_KF_c_past[0] = 0; imu->x_Gama_KF_c_past[1] = 0;
 80016d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8
 80016e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc
	imu->x_Gama_KF_p[0] = 0; imu->x_Gama_KF_p[1] = 0;
 80016ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
 80016f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f8c3 23e4 	str.w	r2, [r3, #996]	@ 0x3e4

	imu->q_MW = (Quaternion *)malloc(sizeof(Quaternion));
 80016fe:	2010      	movs	r0, #16
 8001700:	f008 ff88 	bl	800a614 <malloc>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800170a:	f8c3 26b8 	str.w	r2, [r3, #1720]	@ 0x6b8
	if (imu->q_MW != NULL) {
 800170e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001710:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00d      	beq.n	8001734 <imu_begin+0x7bc>
	    quaternion_init(imu->q_MW, 1.0f, 0.0f, 0.0f, 0.0f);
 8001718:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800171a:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 800171e:	ed5f 1a31 	vldr	s3, [pc, #-196]	@ 800165c <imu_begin+0x6e4>
 8001722:	ed1f 1a32 	vldr	s2, [pc, #-200]	@ 800165c <imu_begin+0x6e4>
 8001726:	ed5f 0a33 	vldr	s1, [pc, #-204]	@ 800165c <imu_begin+0x6e4>
 800172a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800172e:	4618      	mov	r0, r3
 8001730:	f005 ffc4 	bl	80076bc <quaternion_init>
	}

	imu->q_KF = (Quaternion *)malloc(sizeof(Quaternion));
 8001734:	2010      	movs	r0, #16
 8001736:	f008 ff6d 	bl	800a614 <malloc>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001740:	f8c3 26bc 	str.w	r2, [r3, #1724]	@ 0x6bc
	if (imu->q_KF != NULL) {
 8001744:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001746:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00d      	beq.n	800176a <imu_begin+0x7f2>
	    quaternion_init(imu->q_KF, 1.0f, 0.0f, 0.0f, 0.0f);
 800174e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001750:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8001754:	ed5f 1a3f 	vldr	s3, [pc, #-252]	@ 800165c <imu_begin+0x6e4>
 8001758:	ed1f 1a40 	vldr	s2, [pc, #-256]	@ 800165c <imu_begin+0x6e4>
 800175c:	ed5f 0a41 	vldr	s1, [pc, #-260]	@ 800165c <imu_begin+0x6e4>
 8001760:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001764:	4618      	mov	r0, r3
 8001766:	f005 ffa9 	bl	80076bc <quaternion_init>
	}

	imu->Q_VARIANCE = 0.5f;
 800176a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800176c:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 8001770:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001774:	601a      	str	r2, [r3, #0]
	imu->R_VARIANCE = 0.1f;
 8001776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001778:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 800177c:	4aa4      	ldr	r2, [pc, #656]	@ (8001a10 <imu_begin+0xa98>)
 800177e:	601a      	str	r2, [r3, #0]

	//Zera Housekeeping

	int i;
	for(i=0;i<5;i++)
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	e138      	b.n	80019f8 <imu_begin+0xa80>
	{
		imu->Acc_X_p[i]=0;	imu->Acc_X_f_p[i]=0;	imu-> Acc_Phi_p[i]=0;
 8001786:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	33fa      	adds	r3, #250	@ 0xfa
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	33fe      	adds	r3, #254	@ 0xfe
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3304      	adds	r3, #4
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
		imu->Acc_Y_p[i]=0;	imu->Acc_Y_f_p[i]=0;	imu->Acc_Theta_p[i]=0;
 80017ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3304      	adds	r3, #4
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3304      	adds	r3, #4
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
		imu->Acc_Z_p[i]=0;	imu->Acc_Z_f_p[i]=0;	imu->Acc_Gama_p[i]=0;
 80017f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

		imu->Gyro_X_p[i]=0;	imu->Gyro_X_f_p[i]=0;	imu->Gyro_Phi_p[i]=0;
 800182c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	3304      	adds	r3, #4
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3304      	adds	r3, #4
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
		imu->Gyro_Y_p[i]=0;	imu->Gyro_Y_f_p[i]=0;	imu->Gyro_Theta_p[i]=0;
 8001866:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3304      	adds	r3, #4
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 73a5 	add.w	r3, r3, #330	@ 0x14a
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
		imu->Gyro_Z_p[i]=0;	imu->Gyro_Z_f_p[i]=0;	imu->Gyro_Gama_p[i]=0;
 800189e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f503 73b1 	add.w	r3, r3, #354	@ 0x162
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3304      	adds	r3, #4
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

		imu->Gyro_dPhi_p[i]=0;			imu->Gyro_dPhi_f_p[i]=0;
 80018d8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f503 739d 	add.w	r3, r3, #314	@ 0x13a
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	3304      	adds	r3, #4
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
		imu->Gyro_dTheta_p[i]=0;		imu->Gyro_dTheta_f_p[i]=0;
 80018fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f503 73a7 	add.w	r3, r3, #334	@ 0x14e
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
		imu->Gyro_dGama_p[i]=0;			imu->Gyro_dGama_f_p[i]=0;
 8001924:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

		imu->Mag_X_p[i]=0;	imu->Mag_X_f_p[i]=0;
 800194a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f503 73b9 	add.w	r3, r3, #370	@ 0x172
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f503 73bb 	add.w	r3, r3, #374	@ 0x176
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3304      	adds	r3, #4
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
		imu->Mag_Y_p[i]=0;	imu->Mag_Y_f_p[i]=0;
 8001970:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3304      	adds	r3, #4
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
		imu->Mag_Z_p[i]=0;	imu->Mag_Z_f_p[i]=0;
 8001996:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f503 73c3 	add.w	r3, r3, #390	@ 0x186
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 73c5 	add.w	r3, r3, #394	@ 0x18a
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

		imu->Phi_p[i]=0;
 80019bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
		imu->Theta_p[i]=0;
 80019ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f503 73cd 	add.w	r3, r3, #410	@ 0x19a
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
		imu->Gama_p[i]=0;
 80019e0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
	for(i=0;i<5;i++)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3301      	adds	r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	f77f aec3 	ble.w	8001786 <imu_begin+0x80e>
	}
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a0c:	b004      	add	sp, #16
 8001a0e:	4770      	bx	lr
 8001a10:	3dcccccd 	.word	0x3dcccccd

08001a14 <imu_config>:

void imu_config(IMU *imu)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	uint8_t val=0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]

	//Checar Who I am
	val=0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
	imu_Read_Reg(ICM20948_WHO_AM_I, &val, 1);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f107 030f 	add.w	r3, r7, #15
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f005 fa69 	bl	8006f04 <imu_Read_Reg>
	HAL_Delay(100);
 8001a32:	2064      	movs	r0, #100	@ 0x64
 8001a34:	f006 fa0c 	bl	8007e50 <HAL_Delay>

	if (val!=0xEA)
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2bea      	cmp	r3, #234	@ 0xea
 8001a3c:	d005      	beq.n	8001a4a <imu_config+0x36>
	{
		imu->status=(int)val;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	b25a      	sxtb	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f883 2717 	strb.w	r2, [r3, #1815]	@ 0x717
 8001a48:	e0b7      	b.n	8001bba <imu_config+0x1a6>
		return;
	}

	//Wake up, resetar tudo
	val=0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
	val|=(1<<7);
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	73fb      	strb	r3, [r7, #15]
	val|=(1<<6);
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	73fb      	strb	r3, [r7, #15]
	val|=1;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_PWR_MGMT_1, val);
 8001a6c:	2206      	movs	r2, #6
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f005 fa18 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(100);
 8001a78:	2064      	movs	r0, #100	@ 0x64
 8001a7a:	f006 f9e9 	bl	8007e50 <HAL_Delay>

	//Configura o clock interno
	val=1; //Clock interno
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_PWR_MGMT_1, val); //Reg Power Management 1
 8001a82:	2206      	movs	r2, #6
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f005 fa0d 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(100);
 8001a8e:	2064      	movs	r0, #100	@ 0x64
 8001a90:	f006 f9de 	bl	8007e50 <HAL_Delay>

	//Troca banco de registradores 0>>2
	val=0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
	val|=(2<<4);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	f043 0320 	orr.w	r3, r3, #32
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_REG_BANK_SEL, val);
 8001aa2:	227f      	movs	r2, #127	@ 0x7f
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f005 f9fd 	bl	8006ea8 <imu_Write_Reg>

		//Libera ODR
		val=1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
		imu_Write_Reg(ICM20948_ODR_ALIGN_EN, val);
 8001ab2:	2209      	movs	r2, #9
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4610      	mov	r0, r2
 8001aba:	f005 f9f5 	bl	8006ea8 <imu_Write_Reg>
		HAL_Delay(100);
 8001abe:	2064      	movs	r0, #100	@ 0x64
 8001ac0:	f006 f9c6 	bl	8007e50 <HAL_Delay>

		//Configura sample rate do giroscópio
		val=0; //Max sample rate
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
		imu_Write_Reg(ICM20948_GYRO_SMPLRT_DIV, val);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f005 f9ea 	bl	8006ea8 <imu_Write_Reg>
//		val|=(1<<1);
//		val|=(1<<2); //Full scale
//		imu_Write_Reg(ICM20948_GYRO_CONFIG_1, val);

		//Configura sample rate do acelerômetro
		val=0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
		imu_Write_Reg(ICM20948_ACCEL_SMPLRT_DIV_1,val);
 8001ad8:	2210      	movs	r2, #16
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f005 f9e2 	bl	8006ea8 <imu_Write_Reg>
		imu_Write_Reg(ICM20948_ACCEL_SMPLRT_DIV_2,val);
 8001ae4:	2211      	movs	r2, #17
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4610      	mov	r0, r2
 8001aec:	f005 f9dc 	bl	8006ea8 <imu_Write_Reg>
//		val|=(1<<1);
//		val|=(1<<2); //Full scale
//		imu_Write_Reg(ICM20948_ACCEL_CONFIG, val); //Reg Accelerometer Configuration

	//Troca banco de registradores 2>>0
	val=0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_REG_BANK_SEL, val);
 8001af4:	227f      	movs	r2, #127	@ 0x7f
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f005 f9d4 	bl	8006ea8 <imu_Write_Reg>

	//Seta comunicação em SPI only
	imu_Read_Reg(ICM20948_USER_CTRL, &val, 1);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f107 030f 	add.w	r3, r7, #15
 8001b06:	2201      	movs	r2, #1
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f005 f9fb 	bl	8006f04 <imu_Read_Reg>
	val|=0x10;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	f043 0310 	orr.w	r3, r3, #16
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_USER_CTRL,val);
 8001b18:	2203      	movs	r2, #3
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f005 f9c2 	bl	8006ea8 <imu_Write_Reg>

	//Configura FIFO
	val=0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
	val|=1;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_FIFO_EN_1, val);
 8001b32:	2266      	movs	r2, #102	@ 0x66
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f005 f9b5 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(100);
 8001b3e:	2064      	movs	r0, #100	@ 0x64
 8001b40:	f006 f986 	bl	8007e50 <HAL_Delay>

	val=0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
	val|=(1<<4);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	73fb      	strb	r3, [r7, #15]
	val|=(1<<3);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	73fb      	strb	r3, [r7, #15]
	val|=(1<<2);
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	73fb      	strb	r3, [r7, #15]
	val|=(1<<1);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	73fb      	strb	r3, [r7, #15]
	val|=1;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_FIFO_EN_2, val);
 8001b7a:	2267      	movs	r2, #103	@ 0x67
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f005 f991 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(100);
 8001b86:	2064      	movs	r0, #100	@ 0x64
 8001b88:	f006 f962 	bl	8007e50 <HAL_Delay>

	/* Configura os Ranges */
	imu_config_range(ACC_RANGE_16G,		//Configura range de +-16 g para o acelerômetro
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	2106      	movs	r1, #6
 8001b90:	2006      	movs	r0, #6
 8001b92:	f000 f8d9 	bl	8001d48 <imu_config_range>
					 GYRO_RANGE_2000DPS,//e de +-20000 deg/s par ao giroscópio
					 	 imu);

	/* Inicia comunicação com magnetômetro */
	mag_begin(imu);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f005 f9ea 	bl	8006f70 <mag_begin>
	mag_Read_Reg(AK09916_HXL-1,8+1,imu);
 8001b9c:	2311      	movs	r3, #17
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	2109      	movs	r1, #9
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 fab6 	bl	8007118 <mag_Read_Reg>
//	//Liga os sensores
//	val=0;
//	imu_Write_Reg(ICM20948_PWR_MGMT_2, val);
//	HAL_Delay(100);

	val=7;
 8001bac:	2307      	movs	r3, #7
 8001bae:	73fb      	strb	r3, [r7, #15]
	imu->status=val; //IMU OK
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f883 2717 	strb.w	r2, [r3, #1815]	@ 0x717
}
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <imu_check_status>:

void imu_check_status(IMU* imu)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	uint8_t val=0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
	imu_Read_Reg(ICM20948_WHO_AM_I, &val, 1);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f107 030f 	add.w	r3, r7, #15
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f005 f995 	bl	8006f04 <imu_Read_Reg>

	if (val!=0xEA)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2bea      	cmp	r3, #234	@ 0xea
 8001bde:	d004      	beq.n	8001bea <imu_check_status+0x2a>
	{
		imu->status=-1;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	22ff      	movs	r2, #255	@ 0xff
 8001be4:	f883 2717 	strb.w	r2, [r3, #1815]	@ 0x717
		return;
 8001be8:	e024      	b.n	8001c34 <imu_check_status+0x74>
	}

	val=0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
	imu_Read_Reg(ICM20948_PWR_MGMT_2, &val, 1);
 8001bee:	2007      	movs	r0, #7
 8001bf0:	f107 030f 	add.w	r3, r7, #15
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f005 f984 	bl	8006f04 <imu_Read_Reg>

	if (val!=0)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <imu_check_status+0x4c>
	{
		imu->status=-2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	22fe      	movs	r2, #254	@ 0xfe
 8001c06:	f883 2717 	strb.w	r2, [r3, #1815]	@ 0x717
		return;
 8001c0a:	e013      	b.n	8001c34 <imu_check_status+0x74>
	}

	val=0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
	imu_Read_Reg(ICM20948_PWR_MGMT_1, &val, 1);
 8001c10:	2006      	movs	r0, #6
 8001c12:	f107 030f 	add.w	r3, r7, #15
 8001c16:	2201      	movs	r2, #1
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f005 f973 	bl	8006f04 <imu_Read_Reg>

	if (val!=imu->PWMT1_IC)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 2718 	ldrb.w	r2, [r3, #1816]	@ 0x718
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d004      	beq.n	8001c34 <imu_check_status+0x74>
	{
		imu->status=-3;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	22fd      	movs	r2, #253	@ 0xfd
 8001c2e:	f883 2717 	strb.w	r2, [r3, #1815]	@ 0x717
		return;
 8001c32:	bf00      	nop
	}
}
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <imu_reconect_handler>:

void imu_reconect_handler(uint8_t trials, IMU*imu)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
	int i=0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]

	imu->curr_Time=HAL_GetTick();
 8001c4c:	f006 f8f4 	bl	8007e38 <HAL_GetTick>
 8001c50:	ee07 0a90 	vmov	s15, r0
 8001c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
	if(imu->curr_Time-imu->prev_Time > imu->T_smpl/2)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f503 63df 	add.w	r3, r3, #1784	@ 0x6f8
 8001c80:	edd3 6a00 	vldr	s13, [r3]
 8001c84:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	dc17      	bgt.n	8001cc6 <imu_reconect_handler+0x8a>
			i++;
			printf("Tentativa de reconexão n° %d falhou\r\n",i);
		}
	imu_config(imu);
	}
}
 8001c96:	e01d      	b.n	8001cd4 <imu_reconect_handler+0x98>
			HAL_SPI_Abort(&imuspi);
 8001c98:	4810      	ldr	r0, [pc, #64]	@ (8001cdc <imu_reconect_handler+0xa0>)
 8001c9a:	f007 fcf7 	bl	800968c <HAL_SPI_Abort>
			HAL_Delay(10);
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f006 f8d6 	bl	8007e50 <HAL_Delay>
			HAL_SPI_Init(&imuspi);
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <imu_reconect_handler+0xa0>)
 8001ca6:	f007 f85d 	bl	8008d64 <HAL_SPI_Init>
			imu->status=7;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	f883 2717 	strb.w	r2, [r3, #1815]	@ 0x717
			imu_check_status(imu);
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f7ff ff84 	bl	8001bc0 <imu_check_status>
			i++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
			printf("Tentativa de reconexão n° %d falhou\r\n",i);
 8001cbe:	68f9      	ldr	r1, [r7, #12]
 8001cc0:	4807      	ldr	r0, [pc, #28]	@ (8001ce0 <imu_reconect_handler+0xa4>)
 8001cc2:	f009 fa77 	bl	800b1b4 <iprintf>
		while(trials>i)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbe4      	blt.n	8001c98 <imu_reconect_handler+0x5c>
	imu_config(imu);
 8001cce:	6838      	ldr	r0, [r7, #0]
 8001cd0:	f7ff fea0 	bl	8001a14 <imu_config>
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000025c 	.word	0x2000025c
 8001ce0:	0800fc58 	.word	0x0800fc58

08001ce4 <imu_bank>:

void imu_bank(uint8_t bank, IMU* imu)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
	if(bank==0||bank==1||bank==2||bank==3)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <imu_bank+0x24>
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d005      	beq.n	8001d08 <imu_bank+0x24>
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d002      	beq.n	8001d08 <imu_bank+0x24>
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d11a      	bne.n	8001d3e <imu_bank+0x5a>
	{
		if((bank<<4)!=imu->bank)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	f892 2716 	ldrb.w	r2, [r2, #1814]	@ 0x716
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <imu_bank+0x5a>
		{
			imu->bank=bank;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	f883 2716 	strb.w	r2, [r3, #1814]	@ 0x716
			imu->bank<<=4;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f893 3716 	ldrb.w	r3, [r3, #1814]	@ 0x716
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f883 2716 	strb.w	r2, [r3, #1814]	@ 0x716
			imu_Write_Reg(ICM20948_REG_BANK_SEL,imu->bank);
 8001d2e:	227f      	movs	r2, #127	@ 0x7f
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f893 3716 	ldrb.w	r3, [r3, #1814]	@ 0x716
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f005 f8b5 	bl	8006ea8 <imu_Write_Reg>
		}
	}
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <imu_config_range>:

void imu_config_range(accRange acc_rg, gyroRange gyro_rg, IMU* imu)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	603a      	str	r2, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	460b      	mov	r3, r1
 8001d56:	71bb      	strb	r3, [r7, #6]
	imu_bank(2,imu);
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7ff ffc2 	bl	8001ce4 <imu_bank>

	uint8_t ACCEL_CONFIG_=ICM20948_ACCEL_CONFIG
 8001d60:	2314      	movs	r3, #20
 8001d62:	73fb      	strb	r3, [r7, #15]
	,GYRO_CONFIG_=ICM20948_GYRO_CONFIG_1
 8001d64:	2301      	movs	r3, #1
 8001d66:	73bb      	strb	r3, [r7, #14]
	,G_FCHOICE=imu->Gyro_F_Choice_B
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f993 3719 	ldrsb.w	r3, [r3, #1817]	@ 0x719
 8001d6e:	737b      	strb	r3, [r7, #13]
	,A_FCHOICE=imu->Acc_F_Choice_B;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f993 371a 	ldrsb.w	r3, [r3, #1818]	@ 0x71a
 8001d76:	733b      	strb	r3, [r7, #12]

	if(acc_rg==ACC_RANGE_2G){
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d110      	bne.n	8001da0 <imu_config_range+0x58>
		imu_Write_Reg(ACCEL_CONFIG_,acc_rg|A_FCHOICE);
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	7b3b      	ldrb	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f005 f88c 	bl	8006ea8 <imu_Write_Reg>
		imu->acc_range=acc_rg;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	f883 271d 	strb.w	r2, [r3, #1821]	@ 0x71d
		imu->acc_sens = 32767/2;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4a51      	ldr	r2, [pc, #324]	@ (8001ee0 <imu_config_range+0x198>)
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d9e:	e03e      	b.n	8001e1e <imu_config_range+0xd6>
	}else if(acc_rg==ACC_RANGE_4G){
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d110      	bne.n	8001dc8 <imu_config_range+0x80>
		imu_Write_Reg(ACCEL_CONFIG_,acc_rg|A_FCHOICE);
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	7b3b      	ldrb	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 f878 	bl	8006ea8 <imu_Write_Reg>
		imu->acc_range=acc_rg;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	f883 271d 	strb.w	r2, [r3, #1821]	@ 0x71d
		imu->acc_sens = 32767/4;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4a48      	ldr	r2, [pc, #288]	@ (8001ee4 <imu_config_range+0x19c>)
 8001dc4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dc6:	e02a      	b.n	8001e1e <imu_config_range+0xd6>
	}else if(acc_rg==ACC_RANGE_8G){
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d110      	bne.n	8001df0 <imu_config_range+0xa8>
		imu_Write_Reg(ACCEL_CONFIG_,acc_rg|A_FCHOICE);
 8001dce:	79fa      	ldrb	r2, [r7, #7]
 8001dd0:	7b3b      	ldrb	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f005 f864 	bl	8006ea8 <imu_Write_Reg>
		imu->acc_range=acc_rg;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	f883 271d 	strb.w	r2, [r3, #1821]	@ 0x71d
		imu->acc_sens = 32767/8;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee8 <imu_config_range+0x1a0>)
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dee:	e016      	b.n	8001e1e <imu_config_range+0xd6>
	}else if(acc_rg==ACC_RANGE_16G){
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d110      	bne.n	8001e18 <imu_config_range+0xd0>
		imu_Write_Reg(ACCEL_CONFIG_,acc_rg|A_FCHOICE);
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 f850 	bl	8006ea8 <imu_Write_Reg>
		imu->acc_range=acc_rg;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	f883 271d 	strb.w	r2, [r3, #1821]	@ 0x71d
		imu->acc_sens = 32767/16;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4a36      	ldr	r2, [pc, #216]	@ (8001eec <imu_config_range+0x1a4>)
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e16:	e002      	b.n	8001e1e <imu_config_range+0xd6>
	}else{
		printf("Escala de acelerômetro não encontrada");
 8001e18:	4835      	ldr	r0, [pc, #212]	@ (8001ef0 <imu_config_range+0x1a8>)
 8001e1a:	f009 f9cb 	bl	800b1b4 <iprintf>
	}

	if(gyro_rg==GYRO_RANGE_250DPS){
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d111      	bne.n	8001e48 <imu_config_range+0x100>
		imu_Write_Reg(GYRO_CONFIG_,gyro_rg|G_FCHOICE);
 8001e24:	79ba      	ldrb	r2, [r7, #6]
 8001e26:	7b7b      	ldrb	r3, [r7, #13]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 f839 	bl	8006ea8 <imu_Write_Reg>
		imu->gyro_range=gyro_rg;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	79ba      	ldrb	r2, [r7, #6]
 8001e3a:	f883 271e 	strb.w	r2, [r3, #1822]	@ 0x71e
		imu->gyro_sens = 32767/250;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef4 <imu_config_range+0x1ac>)
 8001e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001e46:	e043      	b.n	8001ed0 <imu_config_range+0x188>
	}else if(gyro_rg==GYRO_RANGE_500DPS){
 8001e48:	79bb      	ldrb	r3, [r7, #6]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d111      	bne.n	8001e72 <imu_config_range+0x12a>
		imu_Write_Reg(GYRO_CONFIG_,gyro_rg|G_FCHOICE);
 8001e4e:	79ba      	ldrb	r2, [r7, #6]
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	7bbb      	ldrb	r3, [r7, #14]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 f824 	bl	8006ea8 <imu_Write_Reg>
		imu->gyro_range=gyro_rg;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	79ba      	ldrb	r2, [r7, #6]
 8001e64:	f883 271e 	strb.w	r2, [r3, #1822]	@ 0x71e
		imu->gyro_sens = 32767/500;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <imu_config_range+0x1b0>)
 8001e6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001e70:	e02e      	b.n	8001ed0 <imu_config_range+0x188>
	}else if(gyro_rg==GYRO_RANGE_1000DPS){
 8001e72:	79bb      	ldrb	r3, [r7, #6]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d112      	bne.n	8001e9e <imu_config_range+0x156>
		imu_Write_Reg(GYRO_CONFIG_,gyro_rg|G_FCHOICE);
 8001e78:	79ba      	ldrb	r2, [r7, #6]
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f005 f80f 	bl	8006ea8 <imu_Write_Reg>
		imu->gyro_range=gyro_rg;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	79ba      	ldrb	r2, [r7, #6]
 8001e8e:	f883 271e 	strb.w	r2, [r3, #1822]	@ 0x71e
		imu->gyro_sens = 32767/1000;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8001e98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001e9c:	e018      	b.n	8001ed0 <imu_config_range+0x188>
	}else if(gyro_rg==GYRO_RANGE_2000DPS){
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d112      	bne.n	8001eca <imu_config_range+0x182>
		imu_Write_Reg(GYRO_CONFIG_,gyro_rg|G_FCHOICE);
 8001ea4:	79ba      	ldrb	r2, [r7, #6]
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 fff9 	bl	8006ea8 <imu_Write_Reg>
		imu->gyro_range=gyro_rg;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	79ba      	ldrb	r2, [r7, #6]
 8001eba:	f883 271e 	strb.w	r2, [r3, #1822]	@ 0x71e
		imu->gyro_sens = 32767/2000;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8001ec4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001ec8:	e002      	b.n	8001ed0 <imu_config_range+0x188>
	}else {
		printf("Escala de giroscópio não encontrada");
 8001eca:	480c      	ldr	r0, [pc, #48]	@ (8001efc <imu_config_range+0x1b4>)
 8001ecc:	f009 f972 	bl	800b1b4 <iprintf>
	}

	imu_bank(0,imu);
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff ff06 	bl	8001ce4 <imu_bank>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	467ffc00 	.word	0x467ffc00
 8001ee4:	45fff800 	.word	0x45fff800
 8001ee8:	457ff000 	.word	0x457ff000
 8001eec:	44ffe000 	.word	0x44ffe000
 8001ef0:	0800fc80 	.word	0x0800fc80
 8001ef4:	43030000 	.word	0x43030000
 8001ef8:	42820000 	.word	0x42820000
 8001efc:	0800fca8 	.word	0x0800fca8

08001f00 <imu_get_data>:
	}
}

/* Acquisition Functions */
void imu_get_data(IMU *imu)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	/********************************************************************/
	/* 					Obtenção de dados brutos						*/
	/********************************************************************/

	//Tempo atual
	imu->curr_Time=(float)HAL_GetTick();
 8001f08:	f005 ff96 	bl	8007e38 <HAL_GetTick>
 8001f0c:	ee07 0a90 	vmov	s15, r0
 8001f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8001f1a:	edc3 7a00 	vstr	s15, [r3]

	//Leitura dos registradores
	imu_Read_Reg(ICM20948_ACCEL_OUT, imu->imu_data, sizeof(imu->imu_data));
 8001f1e:	202d      	movs	r0, #45	@ 0x2d
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8001f26:	2216      	movs	r2, #22
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f004 ffeb 	bl	8006f04 <imu_Read_Reg>

	//Dados brutos de aceleração
	imu->raw_Acc_X=((int16_t)imu->imu_data[0]<<8) + imu->imu_data[1];
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3700 	ldrb.w	r3, [r3, #1792]	@ 0x700
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	f892 2701 	ldrb.w	r2, [r2, #1793]	@ 0x701
 8001f3e:	4413      	add	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	801a      	strh	r2, [r3, #0]
	imu->raw_Acc_Y=((int16_t)imu->imu_data[2]<<8) + imu->imu_data[3];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3702 	ldrb.w	r3, [r3, #1794]	@ 0x702
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	f892 2703 	ldrb.w	r2, [r2, #1795]	@ 0x703
 8001f58:	4413      	add	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	809a      	strh	r2, [r3, #4]
	imu->raw_Acc_Z=((int16_t)imu->imu_data[4]<<8) + imu->imu_data[5];
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3704 	ldrb.w	r3, [r3, #1796]	@ 0x704
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	f892 2705 	ldrb.w	r2, [r2, #1797]	@ 0x705
 8001f72:	4413      	add	r3, r2
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	811a      	strh	r2, [r3, #8]

	//Dados brutos de vel. angular
	imu->raw_Gyro_X=((int16_t)imu->imu_data[6]<<8) + imu->imu_data[7];
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3706 	ldrb.w	r3, [r3, #1798]	@ 0x706
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	f892 2707 	ldrb.w	r2, [r2, #1799]	@ 0x707
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	819a      	strh	r2, [r3, #12]
	imu->raw_Gyro_Y=((int16_t)imu->imu_data[8]<<8) + imu->imu_data[9];
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3708 	ldrb.w	r3, [r3, #1800]	@ 0x708
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	f892 2709 	ldrb.w	r2, [r2, #1801]	@ 0x709
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	821a      	strh	r2, [r3, #16]
	imu->raw_Gyro_Z=((int16_t)imu->imu_data[10]<<8) + imu->imu_data[11];
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 370a 	ldrb.w	r3, [r3, #1802]	@ 0x70a
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	f892 270b 	ldrb.w	r2, [r2, #1803]	@ 0x70b
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	829a      	strh	r2, [r3, #20]

	//Dados brutos de campo magnético
	imu->raw_Mag_X=((int16_t)imu->imu_data[15+1]<<8) + imu->imu_data[14+1];		//X -> X
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3710 	ldrb.w	r3, [r3, #1808]	@ 0x710
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	f892 270f 	ldrb.w	r2, [r2, #1807]	@ 0x70f
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	831a      	strh	r2, [r3, #24]
	imu->raw_Mag_Y=-(((int16_t)imu->imu_data[17+1]<<8) + imu->imu_data[16+1]);	//Y -> -Y
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3712 	ldrb.w	r3, [r3, #1810]	@ 0x712
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	f892 2711 	ldrb.w	r2, [r2, #1809]	@ 0x711
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	425b      	negs	r3, r3
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	835a      	strh	r2, [r3, #26]
	imu->raw_Mag_Z=-(((int16_t)imu->imu_data[19+1]<<8) + imu->imu_data[18+1]);	//Z -> -Z
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3714 	ldrb.w	r3, [r3, #1812]	@ 0x714
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b29b      	uxth	r3, r3
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	f892 2713 	ldrb.w	r2, [r2, #1811]	@ 0x713
 8002012:	4413      	add	r3, r2
 8002014:	b29b      	uxth	r3, r3
 8002016:	425b      	negs	r3, r3
 8002018:	b29b      	uxth	r3, r3
 800201a:	b21a      	sxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	839a      	strh	r2, [r3, #28]

	//Dados brutos de temperatura
	imu->raw_Temp=((int16_t)imu->imu_data[12]<<8) + imu->imu_data[13];
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 370c 	ldrb.w	r3, [r3, #1804]	@ 0x70c
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	f892 270d 	ldrb.w	r2, [r2, #1805]	@ 0x70d
 8002030:	4413      	add	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	b21a      	sxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	83da      	strh	r2, [r3, #30]
	/********************************************************************/
	/* 					Obtenção de dados convertidos					*/
	/********************************************************************/

	// Aceleração em [g]
	imu->Acc_X=(imu->raw_Acc_X/imu->acc_sens)-imu->acc_offset_X;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800204e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu->Acc_Y=(imu->raw_Acc_Y/imu->acc_sens)-imu->acc_offset_Y;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	imu->Acc_Z=(imu->raw_Acc_Z/imu->acc_sens)-imu->acc_offset_Z;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800209e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80020a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	// Vel angular em [deg/s]
	imu->Gyro_X=(imu->raw_Gyro_X/imu->gyro_sens)-imu->gyro_offset_X;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80020c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80020d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	imu->Gyro_Y=(imu->raw_Gyro_Y/imu->gyro_sens)-imu->gyro_offset_Y;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80020ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 80020f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	imu->Gyro_Z=(imu->raw_Gyro_Z/imu->gyro_sens)-imu->gyro_offset_Z;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8002116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8002120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c

	// Campo magnético em [uT]
	imu->Mag_X_c=(imu->raw_Mag_X/imu->mag_sens)-imu->mag_offset_X;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800213e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8002148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
	imu->Mag_Y_c=(imu->raw_Mag_Y/imu->mag_sens)-imu->mag_offset_Y;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002158:	ee07 3a90 	vmov	s15, r3
 800215c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8002166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
	imu->Mag_Z_c=(imu->raw_Mag_Z/imu->mag_sens)-imu->mag_offset_Z;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 800218e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

	// Correção do campo magnético
	imu->Mag_X = imu->Mag_X_c*imu->mag_callb[0][0] + imu->Mag_Y_c*imu->mag_callb[0][1] + imu->Mag_Z_c*imu->mag_callb[0][2];
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 80021ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 80021be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	edd3 6a33 	vldr	s13, [r3, #204]	@ 0xcc
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 80021d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
	imu->Mag_Y = imu->Mag_X_c*imu->mag_callb[1][0] + imu->Mag_Y_c*imu->mag_callb[1][1] + imu->Mag_Z_c*imu->mag_callb[1][2];
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 80021ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80021fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 6a33 	vldr	s13, [r3, #204]	@ 0xcc
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
	imu->Mag_Z = imu->Mag_X_c*imu->mag_callb[2][0] + imu->Mag_Y_c*imu->mag_callb[2][1] + imu->Mag_Z_c*imu->mag_callb[2][2];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 800222a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	edd3 7a3f 	vldr	s15, [r3, #252]	@ 0xfc
 800223a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	edd3 6a33 	vldr	s13, [r3, #204]	@ 0xcc
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

	// Temp em [C] (não está certo)
	imu->Temp=imu->raw_Temp/imu->temp_sens-40;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	ed93 7a43 	vldr	s14, [r3, #268]	@ 0x10c
 8002270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002274:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80022f8 <imu_get_data+0x3f8>
 8002278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
//	imu->Mag_X=-imu->Mag_Z;
//	imu->Mag_Y=-imu->Mag_Y;
//	imu->Mag_Z=imu->aux;

	//Abaixo só é realizado caso esteja de acordo com o período de amostragem
	if(imu->curr_Time-imu->prev_Time < imu->T_smpl)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002288:	ed93 7a00 	vldr	s14, [r3]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 63df 	add.w	r3, r3, #1784	@ 0x6f8
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	f100 82ee 	bmi.w	800288c <imu_get_data+0x98c>
	{
		return;
	}

	imu_filter_data(imu);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f003 ff75 	bl	80061a0 <imu_filter_data>

	imu_get_euler_angles(imu);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f001 ffe6 	bl	8004288 <imu_get_euler_angles>

	imu_get_quaternion_KF(imu);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 ff71 	bl	80031a4 <imu_get_quaternion_KF>

	imu_get_quaternion_madgwick(imu);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f001 fa08 	bl	80036d8 <imu_get_quaternion_madgwick>

//	imu->Phi	=	imu->Phi_CF;
//	imu->Theta	=	imu->Theta_CF;
//	imu->Gama	=	imu->Gama_CF;

	imu->Phi	=	imu->Phi_SO;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	imu->Theta	=	imu->Theta_SO;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 22cc 	ldr.w	r2, [r3, #716]	@ 0x2cc
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	imu->Gama	=	imu->Gama_SO;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

//	quaternionToEuler(imu->q_MW, &imu->Phi, &imu->Theta, &imu->Gama);
//
//	quaternionToEuler(imu->q_KF, &imu->Phi, &imu->Theta, &imu->Gama);

	imu_get_NED_info(imu);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fad3 	bl	8002898 <imu_get_NED_info>

	/********************************************************************/
	/* 					Troca de período de amostragem					*/
	/********************************************************************/
	int i;
	for(i=4;i!=0;i--)
 80022f2:	2304      	movs	r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e1ad      	b.n	8002654 <imu_get_data+0x754>
 80022f8:	42200000 	.word	0x42200000
	{
		imu->Acc_X_p[i]=imu->Acc_X_p[i-1];		imu->Acc_X_f_p[i]=imu->Acc_X_f_p[i-1];		imu-> Acc_Phi_p[i]=imu-> Acc_Phi_p[i-1];
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3b01      	subs	r3, #1
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	33fa      	adds	r3, #250	@ 0xfa
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	33fa      	adds	r3, #250	@ 0xfa
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3b01      	subs	r3, #1
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	33fe      	adds	r3, #254	@ 0xfe
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	33fe      	adds	r3, #254	@ 0xfe
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3304      	adds	r3, #4
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3b01      	subs	r3, #1
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	601a      	str	r2, [r3, #0]
		imu->Acc_Y_p[i]=imu->Acc_Y_p[i-1];		imu->Acc_Y_f_p[i]=imu->Acc_Y_f_p[i-1];		imu->Acc_Theta_p[i]=imu->Acc_Theta_p[i-1];
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3b01      	subs	r3, #1
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3304      	adds	r3, #4
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3b01      	subs	r3, #1
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3b01      	subs	r3, #1
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3304      	adds	r3, #4
 80023b2:	601a      	str	r2, [r3, #0]
		imu->Acc_Z_p[i]=imu->Acc_Z_p[i-1];		imu->Acc_Z_f_p[i]=imu->Acc_Z_f_p[i-1];		imu->Acc_Gama_p[i]=imu->Acc_Gama_p[i-1];
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3304      	adds	r3, #4
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	601a      	str	r2, [r3, #0]

		imu->Gyro_X_p[i]=imu->Gyro_X_p[i-1];	imu->Gyro_X_f_p[i]=imu->Gyro_X_f_p[i-1];	imu->Gyro_Phi_p[i]=imu->Gyro_Phi_p[i-1];
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3b01      	subs	r3, #1
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3304      	adds	r3, #4
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3b01      	subs	r3, #1
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3b01      	subs	r3, #1
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	3304      	adds	r3, #4
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3304      	adds	r3, #4
 8002472:	601a      	str	r2, [r3, #0]
		imu->Gyro_Y_p[i]=imu->Gyro_Y_p[i-1];	imu->Gyro_Y_f_p[i]=imu->Gyro_Y_f_p[i-1];	imu->Gyro_Theta_p[i]=imu->Gyro_Theta_p[i-1];
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3b01      	subs	r3, #1
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3b01      	subs	r3, #1
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3304      	adds	r3, #4
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	f503 73a5 	add.w	r3, r3, #330	@ 0x14a
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f503 73a5 	add.w	r3, r3, #330	@ 0x14a
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	601a      	str	r2, [r3, #0]
		imu->Gyro_Z_p[i]=imu->Gyro_Z_p[i-1];	imu->Gyro_Z_f_p[i]=imu->Gyro_Z_f_p[i-1];	imu->Gyro_Gama_p[i]=imu->Gyro_Gama_p[i-1];
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3304      	adds	r3, #4
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3b01      	subs	r3, #1
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	f503 73b1 	add.w	r3, r3, #354	@ 0x162
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3304      	adds	r3, #4
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f503 73b1 	add.w	r3, r3, #354	@ 0x162
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3304      	adds	r3, #4
 8002532:	601a      	str	r2, [r3, #0]

		imu->Gyro_dPhi_p[i]=imu->Gyro_dPhi_p[i-1];			imu->Gyro_dPhi_f_p[i]=imu->Gyro_dPhi_f_p[i-1];
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3b01      	subs	r3, #1
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3b01      	subs	r3, #1
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	f503 739d 	add.w	r3, r3, #314	@ 0x13a
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f503 739d 	add.w	r3, r3, #314	@ 0x13a
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3304      	adds	r3, #4
 8002572:	601a      	str	r2, [r3, #0]
		imu->Gyro_dTheta_p[i]=imu->Gyro_dTheta_p[i-1];		imu->Gyro_dTheta_f_p[i]=imu->Gyro_dTheta_f_p[i-1];
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3b01      	subs	r3, #1
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	f503 73a7 	add.w	r3, r3, #334	@ 0x14e
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f503 73a7 	add.w	r3, r3, #334	@ 0x14e
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3304      	adds	r3, #4
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b01      	subs	r3, #1
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	601a      	str	r2, [r3, #0]
		imu->Gyro_dGama_p[i]=imu->Gyro_dGama_p[i-1];		imu->Gyro_dGama_f_p[i]=imu->Gyro_dGama_f_p[i-1];
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3304      	adds	r3, #4
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3304      	adds	r3, #4
 80025f2:	601a      	str	r2, [r3, #0]

		imu->Phi_p[i]=imu->Phi_p[i-1];
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	601a      	str	r2, [r3, #0]
		imu->Theta_p[i]=imu->Theta_p[i-1];
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3b01      	subs	r3, #1
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	f503 73cd 	add.w	r3, r3, #410	@ 0x19a
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f503 73cd 	add.w	r3, r3, #410	@ 0x19a
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	601a      	str	r2, [r3, #0]
		imu->Gama_p[i]=imu->Gama_p[i-1];
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3b01      	subs	r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	601a      	str	r2, [r3, #0]
	for(i=4;i!=0;i--)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b01      	subs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f47f ae50 	bne.w	80022fc <imu_get_data+0x3fc>
	}

	i=0;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
	imu->Acc_X_p[i]=imu->Acc_X;		imu->Acc_X_f_p[i]=imu->Acc_X_f;		imu-> Acc_Phi_p[i]=imu-> Acc_Phi;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	33fa      	adds	r3, #250	@ 0xfa
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	33fe      	adds	r3, #254	@ 0xfe
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3304      	adds	r3, #4
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	601a      	str	r2, [r3, #0]
	imu->Acc_Y_p[i]=imu->Acc_Y;		imu->Acc_Y_f_p[i]=imu->Acc_Y_f;		imu->Acc_Theta_p[i]=imu->Acc_Theta;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3304      	adds	r3, #4
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3304      	adds	r3, #4
 80026d0:	601a      	str	r2, [r3, #0]
	imu->Acc_Z_p[i]=imu->Acc_Z;		imu->Acc_Z_f_p[i]=imu->Acc_Z_f;		imu->Acc_Gama_p[i]=imu->Acc_Gama;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3304      	adds	r3, #4
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	601a      	str	r2, [r3, #0]

	imu->Gyro_X_p[i]=imu->Gyro_X;	imu->Gyro_X_f_p[i]=imu->Gyro_X_f;	imu->Gyro_Phi_p[i]=imu->Gyro_Phi;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3304      	adds	r3, #4
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3304      	adds	r3, #4
 8002746:	601a      	str	r2, [r3, #0]
	imu->Gyro_Y_p[i]=imu->Gyro_Y;	imu->Gyro_Y_f_p[i]=imu->Gyro_Y_f;	imu->Gyro_Theta_p[i]=imu->Gyro_Theta;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3304      	adds	r3, #4
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f503 73a5 	add.w	r3, r3, #330	@ 0x14a
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	601a      	str	r2, [r3, #0]
	imu->Gyro_Z_p[i]=imu->Gyro_Z;	imu->Gyro_Z_f_p[i]=imu->Gyro_Z_f;	imu->Gyro_Gama_p[i]=imu->Gyro_Gama;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3304      	adds	r3, #4
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f503 73b1 	add.w	r3, r3, #354	@ 0x162
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3304      	adds	r3, #4
 80027be:	601a      	str	r2, [r3, #0]

	imu->Gyro_dPhi_p[i]=imu->Gyro_dPhi;			imu->Gyro_dPhi_f_p[i]=imu->Gyro_dPhi_f;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f503 739d 	add.w	r3, r3, #314	@ 0x13a
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3304      	adds	r3, #4
 80027e8:	601a      	str	r2, [r3, #0]
	imu->Gyro_dTheta_p[i]=imu->Gyro_dTheta;		imu->Gyro_dTheta_f_p[i]=imu->Gyro_dTheta_f;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 73a7 	add.w	r3, r3, #334	@ 0x14e
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3304      	adds	r3, #4
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	601a      	str	r2, [r3, #0]
	imu->Gyro_dGama_p[i]=imu->Gyro_dGama;		imu->Gyro_dGama_f_p[i]=imu->Gyro_dGama_f;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3304      	adds	r3, #4
 800283c:	601a      	str	r2, [r3, #0]

	imu->Phi_p[i]=imu->Phi;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	601a      	str	r2, [r3, #0]
	imu->Theta_p[i]=imu->Theta;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f503 73cd 	add.w	r3, r3, #410	@ 0x19a
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	601a      	str	r2, [r3, #0]
	imu->Gama_p[i]=imu->Gama;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	601a      	str	r2, [r3, #0]

	imu->prev_Time=imu->curr_Time;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e000      	b.n	800288e <imu_get_data+0x98e>
		return;
 800288c:	bf00      	nop
}
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	0000      	movs	r0, r0
	...

08002898 <imu_get_NED_info>:

void imu_get_NED_info(IMU *imu)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	/********************************************************************/
	/* 					Cálculo de posição, vel e acc					*/
	/********************************************************************/

    imu->cosPhi = cos(imu->Phi);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe56 	bl	8000558 <__aeabi_f2d>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	ec43 2b10 	vmov	d0, r2, r3
 80028b4:	f00a fc1c 	bl	800d0f0 <cos>
 80028b8:	ec53 2b10 	vmov	r2, r3, d0
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f97a 	bl	8000bb8 <__aeabi_d2f>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    imu->sinPhi = sin(imu->Phi);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fe40 	bl	8000558 <__aeabi_f2d>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	ec43 2b10 	vmov	d0, r2, r3
 80028e0:	f00a fc62 	bl	800d1a8 <sin>
 80028e4:	ec53 2b10 	vmov	r2, r3, d0
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f964 	bl	8000bb8 <__aeabi_d2f>
 80028f0:	4602      	mov	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    imu->cosTheta = cos(imu->Theta);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fe2a 	bl	8000558 <__aeabi_f2d>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	ec43 2b10 	vmov	d0, r2, r3
 800290c:	f00a fbf0 	bl	800d0f0 <cos>
 8002910:	ec53 2b10 	vmov	r2, r3, d0
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f94e 	bl	8000bb8 <__aeabi_d2f>
 800291c:	4602      	mov	r2, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    imu->sinTheta = sin(imu->Theta);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fe14 	bl	8000558 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	ec43 2b10 	vmov	d0, r2, r3
 8002938:	f00a fc36 	bl	800d1a8 <sin>
 800293c:	ec53 2b10 	vmov	r2, r3, d0
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7fe f938 	bl	8000bb8 <__aeabi_d2f>
 8002948:	4602      	mov	r2, r0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    imu->cosGamma = cos(imu->Gama);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fdfe 	bl	8000558 <__aeabi_f2d>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	ec43 2b10 	vmov	d0, r2, r3
 8002964:	f00a fbc4 	bl	800d0f0 <cos>
 8002968:	ec53 2b10 	vmov	r2, r3, d0
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f922 	bl	8000bb8 <__aeabi_d2f>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    imu->sinGamma = sin(imu->Gama);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fde8 	bl	8000558 <__aeabi_f2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	ec43 2b10 	vmov	d0, r2, r3
 8002990:	f00a fc0a 	bl	800d1a8 <sin>
 8002994:	ec53 2b10 	vmov	r2, r3, d0
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f90c 	bl	8000bb8 <__aeabi_d2f>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

    // Rot_NED GPT
    imu->Rot_NED[0][0] = imu->cosGamma * imu->cosTheta;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	ed93 7a63 	vldr	s14, [r3, #396]	@ 0x18c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 80029b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	edc3 7a77 	vstr	s15, [r3, #476]	@ 0x1dc
    imu->Rot_NED[0][1] = -(imu->cosGamma * imu->sinTheta * imu->sinPhi - imu->sinGamma * imu->cosPhi);	//Não é negativo pelas ref. bibl. mas funciona apenas assim
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	ed93 7a63 	vldr	s14, [r3, #396]	@ 0x18c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 80029d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	edd3 6a64 	vldr	s13, [r3, #400]	@ 0x190
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 80029e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ec:	eef1 7a67 	vneg.f32	s15, s15
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	edc3 7a78 	vstr	s15, [r3, #480]	@ 0x1e0
    imu->Rot_NED[0][2] = -(imu->cosGamma * imu->sinTheta * imu->cosPhi + imu->sinGamma * imu->sinPhi);	//Não é negativo pelas ref. bibl. mas funciona apenas assim
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	ed93 7a63 	vldr	s14, [r3, #396]	@ 0x18c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 8002a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	edd3 6a64 	vldr	s13, [r3, #400]	@ 0x190
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8002a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	eef1 7a67 	vneg.f32	s15, s15
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	edc3 7a79 	vstr	s15, [r3, #484]	@ 0x1e4

    imu->Rot_NED[1][0] = imu->sinGamma * imu->cosTheta;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	ed93 7a64 	vldr	s14, [r3, #400]	@ 0x190
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edc3 7a7a 	vstr	s15, [r3, #488]	@ 0x1e8
    imu->Rot_NED[1][1] = -(imu->sinGamma * imu->sinTheta * imu->sinPhi + imu->cosGamma * imu->cosPhi);	//Não é negativo pelas ref. bibl. mas funciona apenas assim
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	ed93 7a64 	vldr	s14, [r3, #400]	@ 0x190
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8002a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	edd3 6a63 	vldr	s13, [r3, #396]	@ 0x18c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 8002a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	eef1 7a67 	vneg.f32	s15, s15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	edc3 7a7b 	vstr	s15, [r3, #492]	@ 0x1ec
    imu->Rot_NED[1][2] = -(imu->sinGamma * imu->sinTheta * imu->cosPhi - imu->cosGamma * imu->sinPhi);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	ed93 7a64 	vldr	s14, [r3, #400]	@ 0x190
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 8002a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	edd3 6a63 	vldr	s13, [r3, #396]	@ 0x18c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8002aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	eef1 7a67 	vneg.f32	s15, s15
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	edc3 7a7c 	vstr	s15, [r3, #496]	@ 0x1f0

    imu->Rot_NED[2][0] = imu->sinTheta;																	//Não é positivo pelas ref. bibl. mas funciona apenas assi
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
    imu->Rot_NED[2][1] = imu->cosTheta * imu->sinPhi;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	ed93 7a61 	vldr	s14, [r3, #388]	@ 0x184
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8
    imu->Rot_NED[2][2] = imu->cosTheta * imu->cosPhi;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	ed93 7a61 	vldr	s14, [r3, #388]	@ 0x184
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
//
//	imu->Rot_NED[2][0] = imu->cosGamma * imu->sinTheta * imu->cosPhi + imu->sinGamma * imu->sinPhi;
//	imu->Rot_NED[2][1] = imu->sinGamma * imu->sinTheta * imu->cosPhi - imu->cosGamma * imu->sinPhi;
//	imu->Rot_NED[2][2] = imu->cosTheta * imu->cosPhi;

    imu->Acc_X_NED = (imu->Rot_NED[0][0] * imu->Acc_X_f +
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	ed93 7a77 	vldr	s14, [r3, #476]	@ 0x1dc
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002af8:	ee27 7a27 	vmul.f32	s14, s14, s15
					imu->Rot_NED[0][1] * imu->Acc_Y_f +
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	edd3 6a78 	vldr	s13, [r3, #480]	@ 0x1e0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
    imu->Acc_X_NED = (imu->Rot_NED[0][0] * imu->Acc_X_f +
 8002b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
					imu->Rot_NED[0][2] * imu->Acc_Z_f )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	edd3 6a79 	vldr	s13, [r3, #484]	@ 0x1e4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
					imu->Rot_NED[0][1] * imu->Acc_Y_f +
 8002b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b24:	ee17 0a90 	vmov	r0, s15
 8002b28:	f7fd fd16 	bl	8000558 <__aeabi_f2d>
						*9.81 - imu->Acc_X_NED_0;
 8002b2c:	f20f 6368 	addw	r3, pc, #1640	@ 0x668
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fd68 	bl	8000608 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	461d      	mov	r5, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fd06 	bl	8000558 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fba0 	bl	8000298 <__aeabi_dsub>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fe f82a 	bl	8000bb8 <__aeabi_d2f>
 8002b64:	4602      	mov	r2, r0
    imu->Acc_X_NED = (imu->Rot_NED[0][0] * imu->Acc_X_f +
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

	imu->Acc_Y_NED = (imu->Rot_NED[1][0] * imu->Acc_X_f +
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	ed93 7a7a 	vldr	s14, [r3, #488]	@ 0x1e8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b78:	ee27 7a27 	vmul.f32	s14, s14, s15
					imu->Rot_NED[1][1] * imu->Acc_Y_f +
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	edd3 6a7b 	vldr	s13, [r3, #492]	@ 0x1ec
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
	imu->Acc_Y_NED = (imu->Rot_NED[1][0] * imu->Acc_X_f +
 8002b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
					imu->Rot_NED[1][2] * imu->Acc_Z_f )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 6a7c 	vldr	s13, [r3, #496]	@ 0x1f0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
					imu->Rot_NED[1][1] * imu->Acc_Y_f +
 8002ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba4:	ee17 0a90 	vmov	r0, s15
 8002ba8:	f7fd fcd6 	bl	8000558 <__aeabi_f2d>
						*9.81 - imu->Acc_Y_NED_0;
 8002bac:	f20f 53e8 	addw	r3, pc, #1512	@ 0x5e8
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fd28 	bl	8000608 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fcc6 	bl	8000558 <__aeabi_f2d>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	f7fd fb60 	bl	8000298 <__aeabi_dsub>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fd ffea 	bl	8000bb8 <__aeabi_d2f>
 8002be4:	4602      	mov	r2, r0
	imu->Acc_Y_NED = (imu->Rot_NED[1][0] * imu->Acc_X_f +
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac

	imu->Acc_Z_NED = (imu->Rot_NED[2][0] * imu->Acc_X_f +
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	ed93 7a7d 	vldr	s14, [r3, #500]	@ 0x1f4
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
					imu->Rot_NED[2][1] * imu->Acc_Y_f +
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	edd3 6a7e 	vldr	s13, [r3, #504]	@ 0x1f8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
	imu->Acc_Z_NED = (imu->Rot_NED[2][0] * imu->Acc_X_f +
 8002c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
					imu->Rot_NED[2][2] * imu->Acc_Z_f )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	edd3 6a7f 	vldr	s13, [r3, #508]	@ 0x1fc
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
					imu->Rot_NED[2][1] * imu->Acc_Y_f +
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	ee17 0a90 	vmov	r0, s15
 8002c28:	f7fd fc96 	bl	8000558 <__aeabi_f2d>
						*9.81 - imu->Acc_Z_NED_0;
 8002c2c:	f20f 5368 	addw	r3, pc, #1384	@ 0x568
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fce8 	bl	8000608 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc86 	bl	8000558 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4620      	mov	r0, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fd fb20 	bl	8000298 <__aeabi_dsub>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd ffaa 	bl	8000bb8 <__aeabi_d2f>
 8002c64:	4602      	mov	r2, r0
	imu->Acc_Z_NED = (imu->Rot_NED[2][0] * imu->Acc_X_f +
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8

	if(imu->Acc_X_NED < (imu->acc_lim*9.81) && imu->Acc_X_NED > (-imu->acc_lim*9.81))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc70 	bl	8000558 <__aeabi_f2d>
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460d      	mov	r5, r1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc69 	bl	8000558 <__aeabi_f2d>
 8002c86:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f7fd fcbb 	bl	8000608 <__aeabi_dmul>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4620      	mov	r0, r4
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f7fd ff27 	bl	8000aec <__aeabi_dcmplt>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d025      	beq.n	8002cf0 <imu_get_NED_info+0x458>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc54 	bl	8000558 <__aeabi_f2d>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002cba:	eef1 7a67 	vneg.f32	s15, s15
 8002cbe:	ee17 3a90 	vmov	r3, s15
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc48 	bl	8000558 <__aeabi_f2d>
 8002cc8:	f20f 43cc 	addw	r3, pc, #1228	@ 0x4cc
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f7fd fc9a 	bl	8000608 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4620      	mov	r0, r4
 8002cda:	4629      	mov	r1, r5
 8002cdc:	f7fd ff24 	bl	8000b28 <__aeabi_dcmpgt>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <imu_get_NED_info+0x458>
	{
		imu->Acc_X_NED=0.0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	}
	if(imu->Acc_Y_NED < (imu->acc_lim*9.81) && imu->Acc_Y_NED > (-imu->acc_lim*9.81))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc2e 	bl	8000558 <__aeabi_f2d>
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	460d      	mov	r5, r1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc27 	bl	8000558 <__aeabi_f2d>
 8002d0a:	f20f 438c 	addw	r3, pc, #1164	@ 0x48c
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f7fd fc79 	bl	8000608 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fee5 	bl	8000aec <__aeabi_dcmplt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d025      	beq.n	8002d74 <imu_get_NED_info+0x4dc>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc12 	bl	8000558 <__aeabi_f2d>
 8002d34:	4604      	mov	r4, r0
 8002d36:	460d      	mov	r5, r1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002d3e:	eef1 7a67 	vneg.f32	s15, s15
 8002d42:	ee17 3a90 	vmov	r3, s15
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc06 	bl	8000558 <__aeabi_f2d>
 8002d4c:	f20f 4348 	addw	r3, pc, #1096	@ 0x448
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd fc58 	bl	8000608 <__aeabi_dmul>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7fd fee2 	bl	8000b28 <__aeabi_dcmpgt>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <imu_get_NED_info+0x4dc>
	{
		imu->Acc_Y_NED=0.0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}
	if(imu->Acc_Z_NED < (imu->acc_lim*9.81) && imu->Acc_Z_NED > (-imu->acc_lim*9.81))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fbec 	bl	8000558 <__aeabi_f2d>
 8002d80:	4604      	mov	r4, r0
 8002d82:	460d      	mov	r5, r1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fbe5 	bl	8000558 <__aeabi_f2d>
 8002d8e:	f20f 4308 	addw	r3, pc, #1032	@ 0x408
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fc37 	bl	8000608 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4629      	mov	r1, r5
 8002da2:	f7fd fea3 	bl	8000aec <__aeabi_dcmplt>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d024      	beq.n	8002df6 <imu_get_NED_info+0x55e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fbd0 	bl	8000558 <__aeabi_f2d>
 8002db8:	4604      	mov	r4, r0
 8002dba:	460d      	mov	r5, r1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002dc2:	eef1 7a67 	vneg.f32	s15, s15
 8002dc6:	ee17 3a90 	vmov	r3, s15
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fbc4 	bl	8000558 <__aeabi_f2d>
 8002dd0:	a3f1      	add	r3, pc, #964	@ (adr r3, 8003198 <imu_get_NED_info+0x900>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fc17 	bl	8000608 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd fea1 	bl	8000b28 <__aeabi_dcmpgt>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <imu_get_NED_info+0x55e>
	{
		imu->Acc_Z_NED=0.0;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
	}

	imu->Mag_X_NED = imu->Rot_NED[0][0] * imu->Mag_X_f +
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ed93 7a77 	vldr	s14, [r3, #476]	@ 0x1dc
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8002e02:	ee27 7a27 	vmul.f32	s14, s14, s15
					imu->Rot_NED[0][1] * imu->Mag_Y_f +
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	edd3 6a78 	vldr	s13, [r3, #480]	@ 0x1e0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8002e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
	imu->Mag_X_NED = imu->Rot_NED[0][0] * imu->Mag_X_f +
 8002e16:	ee37 7a27 	vadd.f32	s14, s14, s15
					imu->Rot_NED[0][2] * imu->Mag_Z_f;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	edd3 6a79 	vldr	s13, [r3, #484]	@ 0x1e4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
					imu->Rot_NED[0][1] * imu->Mag_Y_f +
 8002e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
	imu->Mag_X_NED = imu->Rot_NED[0][0] * imu->Mag_X_f +
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8

	imu->Mag_Y_NED = imu->Rot_NED[1][0] * imu->Mag_X_f +
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	ed93 7a7a 	vldr	s14, [r3, #488]	@ 0x1e8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8002e40:	ee27 7a27 	vmul.f32	s14, s14, s15
					imu->Rot_NED[1][1] * imu->Mag_Y_f +
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	edd3 6a7b 	vldr	s13, [r3, #492]	@ 0x1ec
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8002e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
	imu->Mag_Y_NED = imu->Rot_NED[1][0] * imu->Mag_X_f +
 8002e54:	ee37 7a27 	vadd.f32	s14, s14, s15
					imu->Rot_NED[1][2] * imu->Mag_Z_f;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	edd3 6a7c 	vldr	s13, [r3, #496]	@ 0x1f0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
					imu->Rot_NED[1][1] * imu->Mag_Y_f +
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
	imu->Mag_Y_NED = imu->Rot_NED[1][0] * imu->Mag_X_f +
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	edc3 7a6d 	vstr	s15, [r3, #436]	@ 0x1b4

	imu->Mag_Z_NED = imu->Rot_NED[2][0] * imu->Mag_X_f +
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	ed93 7a7d 	vldr	s14, [r3, #500]	@ 0x1f4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8002e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
					imu->Rot_NED[2][1] * imu->Mag_Y_f +
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	edd3 6a7e 	vldr	s13, [r3, #504]	@ 0x1f8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8002e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	imu->Mag_Z_NED = imu->Rot_NED[2][0] * imu->Mag_X_f +
 8002e92:	ee37 7a27 	vadd.f32	s14, s14, s15
					imu->Rot_NED[2][2] * imu->Mag_Z_f;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 6a7f 	vldr	s13, [r3, #508]	@ 0x1fc
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
					imu->Rot_NED[2][1] * imu->Mag_Y_f +
 8002ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
	imu->Mag_Z_NED = imu->Rot_NED[2][0] * imu->Mag_X_f +
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	edc3 7a70 	vstr	s15, [r3, #448]	@ 0x1c0

	imu->Vel_X_NED = imu->Vel_X_NED + imu->Acc_X_NED*(imu->curr_Time-imu->prev_Time)/1000;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	ed93 7a71 	vldr	s14, [r3, #452]	@ 0x1c4
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	edd3 6a68 	vldr	s13, [r3, #416]	@ 0x1a0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002ec2:	ed93 6a00 	vldr	s12, [r3]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ed4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ed8:	ed9f 6ab1 	vldr	s12, [pc, #708]	@ 80031a0 <imu_get_NED_info+0x908>
 8002edc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	edc3 7a71 	vstr	s15, [r3, #452]	@ 0x1c4
	imu->Vel_Y_NED = imu->Vel_Y_NED + imu->Acc_Y_NED*(imu->curr_Time-imu->prev_Time)/1000;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	ed93 7a73 	vldr	s14, [r3, #460]	@ 0x1cc
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	edd3 6a6b 	vldr	s13, [r3, #428]	@ 0x1ac
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002efc:	ed93 6a00 	vldr	s12, [r3]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f12:	ed9f 6aa3 	vldr	s12, [pc, #652]	@ 80031a0 <imu_get_NED_info+0x908>
 8002f16:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	edc3 7a73 	vstr	s15, [r3, #460]	@ 0x1cc
	imu->Vel_Z_NED = imu->Vel_Z_NED + imu->Acc_Z_NED*(imu->curr_Time-imu->prev_Time)/1000;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	ed93 7a75 	vldr	s14, [r3, #468]	@ 0x1d4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	edd3 6a6e 	vldr	s13, [r3, #440]	@ 0x1b8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002f36:	ed93 6a00 	vldr	s12, [r3]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f4c:	ed9f 6a94 	vldr	s12, [pc, #592]	@ 80031a0 <imu_get_NED_info+0x908>
 8002f50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	edc3 7a75 	vstr	s15, [r3, #468]	@ 0x1d4

	imu->Pos_X_NED+=imu->Vel_X_NED*(imu->curr_Time-imu->prev_Time)/1000;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	ed93 7a72 	vldr	s14, [r3, #456]	@ 0x1c8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	edd3 6a71 	vldr	s13, [r3, #452]	@ 0x1c4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002f70:	ed93 6a00 	vldr	s12, [r3]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f86:	ed9f 6a86 	vldr	s12, [pc, #536]	@ 80031a0 <imu_get_NED_info+0x908>
 8002f8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	edc3 7a72 	vstr	s15, [r3, #456]	@ 0x1c8
	imu->Pos_Y_NED+=imu->Vel_Y_NED*(imu->curr_Time-imu->prev_Time)/1000;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	ed93 7a74 	vldr	s14, [r3, #464]	@ 0x1d0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	edd3 6a73 	vldr	s13, [r3, #460]	@ 0x1cc
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002faa:	ed93 6a00 	vldr	s12, [r3]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fc0:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80031a0 <imu_get_NED_info+0x908>
 8002fc4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	edc3 7a74 	vstr	s15, [r3, #464]	@ 0x1d0
	imu->Pos_Z_NED+=imu->Vel_Z_NED*(imu->curr_Time-imu->prev_Time)/1000;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	ed93 7a76 	vldr	s14, [r3, #472]	@ 0x1d8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	edd3 6a75 	vldr	s13, [r3, #468]	@ 0x1d4
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8002fe4:	ed93 6a00 	vldr	s12, [r3]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ff6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ffa:	ed9f 6a69 	vldr	s12, [pc, #420]	@ 80031a0 <imu_get_NED_info+0x908>
 8002ffe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edc3 7a76 	vstr	s15, [r3, #472]	@ 0x1d8

	if(imu->Vel_X_NED < (imu->acc_lim*9.81) && imu->Vel_X_NED > (-imu->acc_lim*9.81))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd faa0 	bl	8000558 <__aeabi_f2d>
 8003018:	4604      	mov	r4, r0
 800301a:	460d      	mov	r5, r1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fa99 	bl	8000558 <__aeabi_f2d>
 8003026:	a35c      	add	r3, pc, #368	@ (adr r3, 8003198 <imu_get_NED_info+0x900>)
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f7fd faec 	bl	8000608 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd fd58 	bl	8000aec <__aeabi_dcmplt>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d024      	beq.n	800308c <imu_get_NED_info+0x7f4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa85 	bl	8000558 <__aeabi_f2d>
 800304e:	4604      	mov	r4, r0
 8003050:	460d      	mov	r5, r1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003058:	eef1 7a67 	vneg.f32	s15, s15
 800305c:	ee17 3a90 	vmov	r3, s15
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fa79 	bl	8000558 <__aeabi_f2d>
 8003066:	a34c      	add	r3, pc, #304	@ (adr r3, 8003198 <imu_get_NED_info+0x900>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f7fd facc 	bl	8000608 <__aeabi_dmul>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4620      	mov	r0, r4
 8003076:	4629      	mov	r1, r5
 8003078:	f7fd fd56 	bl	8000b28 <__aeabi_dcmpgt>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <imu_get_NED_info+0x7f4>
	{
		imu->Vel_X_NED=0.0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	}
	if(imu->Vel_Y_NED < (imu->acc_lim*9.81) && imu->Vel_Y_NED > (-imu->acc_lim*9.81))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa60 	bl	8000558 <__aeabi_f2d>
 8003098:	4604      	mov	r4, r0
 800309a:	460d      	mov	r5, r1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fa59 	bl	8000558 <__aeabi_f2d>
 80030a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8003198 <imu_get_NED_info+0x900>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd faac 	bl	8000608 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4620      	mov	r0, r4
 80030b6:	4629      	mov	r1, r5
 80030b8:	f7fd fd18 	bl	8000aec <__aeabi_dcmplt>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <imu_get_NED_info+0x874>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa45 	bl	8000558 <__aeabi_f2d>
 80030ce:	4604      	mov	r4, r0
 80030d0:	460d      	mov	r5, r1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80030d8:	eef1 7a67 	vneg.f32	s15, s15
 80030dc:	ee17 3a90 	vmov	r3, s15
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fa39 	bl	8000558 <__aeabi_f2d>
 80030e6:	a32c      	add	r3, pc, #176	@ (adr r3, 8003198 <imu_get_NED_info+0x900>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f7fd fa8c 	bl	8000608 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4620      	mov	r0, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	f7fd fd16 	bl	8000b28 <__aeabi_dcmpgt>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <imu_get_NED_info+0x874>
	{
		imu->Vel_Y_NED=0.0;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
	}
	if(imu->Vel_Z_NED < (imu->acc_lim*9.81) && imu->Vel_Z_NED > (-imu->acc_lim*9.81))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fa20 	bl	8000558 <__aeabi_f2d>
 8003118:	4604      	mov	r4, r0
 800311a:	460d      	mov	r5, r1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd fa19 	bl	8000558 <__aeabi_f2d>
 8003126:	a31c      	add	r3, pc, #112	@ (adr r3, 8003198 <imu_get_NED_info+0x900>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd fa6c 	bl	8000608 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd fcd8 	bl	8000aec <__aeabi_dcmplt>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d100      	bne.n	8003144 <imu_get_NED_info+0x8ac>
	{
		imu->Vel_Z_NED=0.0;
	}

}
 8003142:	e025      	b.n	8003190 <imu_get_NED_info+0x8f8>
	if(imu->Vel_Z_NED < (imu->acc_lim*9.81) && imu->Vel_Z_NED > (-imu->acc_lim*9.81))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fa04 	bl	8000558 <__aeabi_f2d>
 8003150:	4604      	mov	r4, r0
 8003152:	460d      	mov	r5, r1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800315a:	eef1 7a67 	vneg.f32	s15, s15
 800315e:	ee17 3a90 	vmov	r3, s15
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f9f8 	bl	8000558 <__aeabi_f2d>
 8003168:	a30b      	add	r3, pc, #44	@ (adr r3, 8003198 <imu_get_NED_info+0x900>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd fa4b 	bl	8000608 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4620      	mov	r0, r4
 8003178:	4629      	mov	r1, r5
 800317a:	f7fd fcd5 	bl	8000b28 <__aeabi_dcmpgt>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d100      	bne.n	8003186 <imu_get_NED_info+0x8ee>
}
 8003184:	e004      	b.n	8003190 <imu_get_NED_info+0x8f8>
		imu->Vel_Z_NED=0.0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bdb0      	pop	{r4, r5, r7, pc}
 8003198:	51eb851f 	.word	0x51eb851f
 800319c:	40239eb8 	.word	0x40239eb8
 80031a0:	447a0000 	.word	0x447a0000

080031a4 <imu_get_quaternion_KF>:

void imu_get_quaternion_KF(IMU *imu)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b099      	sub	sp, #100	@ 0x64
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    float ax=imu->Acc_X_f, ay=imu->Acc_Y_f, az=imu->Acc_Z_f;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    float gx=imu->Gyro_X_f, gy=imu->Gyro_Y_f, gz=imu->Gyro_Z_f;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d0:	657b      	str	r3, [r7, #84]	@ 0x54
    float mx=imu->Mag_X_f, my=imu->Mag_Y_f, mz=imu->Mag_Z_f;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80031e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float dt=(imu->curr_Time-imu->prev_Time)/1000;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 80031f0:	ed93 7a00 	vldr	s14, [r3]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003202:	eddf 6ae9 	vldr	s13, [pc, #932]	@ 80035a8 <imu_get_quaternion_KF+0x404>
 8003206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800320a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    // Normaliza valores
    normalizeVector(&ax, &ay, &az);
 800320e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003212:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003216:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800321a:	4618      	mov	r0, r3
 800321c:	f004 fa70 	bl	8007700 <normalizeVector>
    normalizeVector(&mx, &my, &mz);
 8003220:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003224:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8003228:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800322c:	4618      	mov	r0, r3
 800322e:	f004 fa67 	bl	8007700 <normalizeVector>

    // Converte taxas do giroscópio para radianos por segundo
    gx *= 0.5f * dt;
 8003232:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003236:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800323a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    gy *= 0.5f * dt;
 800324a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800324e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003256:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    gz *= 0.5f * dt;
 8003262:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003266:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800326a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800326e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003276:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* Etapa de Predição */

    // Atualiza quaternion com integração do giroscópio
    Quaternion qDot = {
        -imu->q_KF->x * gx - imu->q_KF->y * gy - imu->q_KF->z * gz,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003280:	edd3 7a01 	vldr	s15, [r3, #4]
 8003284:	eeb1 7a67 	vneg.f32	s14, s15
 8003288:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800328c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003296:	edd3 6a02 	vldr	s13, [r3, #8]
 800329a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800329e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80032ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80032b0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80032b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b8:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion qDot = {
 80032bc:	edc7 7a07 	vstr	s15, [r7, #28]
		imu->q_KF->w * gx + imu->q_KF->y * gz - imu->q_KF->z * gy,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80032c6:	ed93 7a00 	vldr	s14, [r3]
 80032ca:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80032ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80032d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80032dc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80032e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80032ee:	edd3 6a03 	vldr	s13, [r3, #12]
 80032f2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80032f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032fa:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion qDot = {
 80032fe:	edc7 7a08 	vstr	s15, [r7, #32]
		imu->q_KF->w * gy - imu->q_KF->x * gz + imu->q_KF->z * gx,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003308:	ed93 7a00 	vldr	s14, [r3]
 800330c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800331a:	edd3 6a01 	vldr	s13, [r3, #4]
 800331e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003330:	edd3 6a03 	vldr	s13, [r3, #12]
 8003334:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800333c:	ee77 7a27 	vadd.f32	s15, s14, s15
    Quaternion qDot = {
 8003340:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		imu->q_KF->w * gz + imu->q_KF->x * gy - imu->q_KF->y * gx
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800334a:	ed93 7a00 	vldr	s14, [r3]
 800334e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800335c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003360:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003368:	ee37 7a27 	vadd.f32	s14, s14, s15
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003372:	edd3 6a02 	vldr	s13, [r3, #8]
 8003376:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800337a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337e:	ee77 7a67 	vsub.f32	s15, s14, s15
    Quaternion qDot = {
 8003382:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    };

    // Atualiza o quaternion
    imu->q_KF->w += qDot.w;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800338c:	ed93 7a00 	vldr	s14, [r3]
 8003390:	edd7 7a07 	vldr	s15, [r7, #28]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800339a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339e:	edc3 7a00 	vstr	s15, [r3]
    imu->q_KF->x += qDot.x;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80033a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80033ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80033b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ba:	edc3 7a01 	vstr	s15, [r3, #4]
    imu->q_KF->y += qDot.y;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80033c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80033c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80033d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d6:	edc3 7a02 	vstr	s15, [r3, #8]
    imu->q_KF->z += qDot.z;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80033e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80033e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80033ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normaliza quaternion
    normalizeQuaternion(imu->q_KF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 f9dd 	bl	80077bc <normalizeQuaternion>

    // Atualiza a incerteza da previsão (P)
    imu->P += imu->Q_VARIANCE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f203 63cc 	addw	r3, r3, #1740	@ 0x6cc
 8003408:	ed93 7a00 	vldr	s14, [r3]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f203 63cc 	addw	r3, r3, #1740	@ 0x6cc
 8003420:	edc3 7a00 	vstr	s15, [r3]

    /* Etapa de Correção */

    // Estima a orientação do acelerômetro
    Quaternion qAcc = {
        sqrt(0.5f * (1.0f + ax)),
 8003424:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800342c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003430:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003438:	ee17 0a90 	vmov	r0, s15
 800343c:	f7fd f88c 	bl	8000558 <__aeabi_f2d>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	ec43 2b10 	vmov	d0, r2, r3
 8003448:	f009 fe26 	bl	800d098 <sqrt>
 800344c:	ec53 2b10 	vmov	r2, r3, d0
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	f7fd fbb0 	bl	8000bb8 <__aeabi_d2f>
 8003458:	4603      	mov	r3, r0
    Quaternion qAcc = {
 800345a:	60fb      	str	r3, [r7, #12]
        sqrt(0.5f * (1.0f - ax)),
 800345c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003460:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003468:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800346c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003470:	ee17 0a90 	vmov	r0, s15
 8003474:	f7fd f870 	bl	8000558 <__aeabi_f2d>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	ec43 2b10 	vmov	d0, r2, r3
 8003480:	f009 fe0a 	bl	800d098 <sqrt>
 8003484:	ec53 2b10 	vmov	r2, r3, d0
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f7fd fb94 	bl	8000bb8 <__aeabi_d2f>
 8003490:	4603      	mov	r3, r0
    Quaternion qAcc = {
 8003492:	613b      	str	r3, [r7, #16]
        sqrt(0.5f * (1.0f + ay)),
 8003494:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800349c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a8:	ee17 0a90 	vmov	r0, s15
 80034ac:	f7fd f854 	bl	8000558 <__aeabi_f2d>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	ec43 2b10 	vmov	d0, r2, r3
 80034b8:	f009 fdee 	bl	800d098 <sqrt>
 80034bc:	ec53 2b10 	vmov	r2, r3, d0
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fd fb78 	bl	8000bb8 <__aeabi_d2f>
 80034c8:	4603      	mov	r3, r0
    Quaternion qAcc = {
 80034ca:	617b      	str	r3, [r7, #20]
        sqrt(0.5f * (1.0f - ay))
 80034cc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80034d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e0:	ee17 0a90 	vmov	r0, s15
 80034e4:	f7fd f838 	bl	8000558 <__aeabi_f2d>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	ec43 2b10 	vmov	d0, r2, r3
 80034f0:	f009 fdd2 	bl	800d098 <sqrt>
 80034f4:	ec53 2b10 	vmov	r2, r3, d0
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	f7fd fb5c 	bl	8000bb8 <__aeabi_d2f>
 8003500:	4603      	mov	r3, r0
    Quaternion qAcc = {
 8003502:	61bb      	str	r3, [r7, #24]
    };
    normalizeQuaternion(&qAcc);
 8003504:	f107 030c 	add.w	r3, r7, #12
 8003508:	4618      	mov	r0, r3
 800350a:	f004 f957 	bl	80077bc <normalizeQuaternion>

    // Cálculo do erro entre estado previsto e medido
    float errX = imu->q_KF->x - qAcc.x;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003514:	ed93 7a01 	vldr	s14, [r3, #4]
 8003518:	edd7 7a04 	vldr	s15, [r7, #16]
 800351c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003520:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float errY = imu->q_KF->y - qAcc.y;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800352a:	ed93 7a02 	vldr	s14, [r3, #8]
 800352e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003536:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float errZ = imu->q_KF->z - qAcc.z;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003540:	ed93 7a03 	vldr	s14, [r3, #12]
 8003544:	edd7 7a06 	vldr	s15, [r7, #24]
 8003548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    // Covariância da medição
    imu->S = imu->P + imu->R_VARIANCE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f203 63cc 	addw	r3, r3, #1740	@ 0x6cc
 8003556:	ed93 7a00 	vldr	s14, [r3]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f203 63d4 	addw	r3, r3, #1748	@ 0x6d4
 800356e:	edc3 7a00 	vstr	s15, [r3]

    // Ganho de Kalman
    imu->K = imu->P / imu->S;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f203 63cc 	addw	r3, r3, #1740	@ 0x6cc
 8003578:	edd3 6a00 	vldr	s13, [r3]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f203 63d4 	addw	r3, r3, #1748	@ 0x6d4
 8003582:	ed93 7a00 	vldr	s14, [r3]
 8003586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 8003590:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza quaternion corrigindo erro
    imu->q_KF->x -= imu->K * errX;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800359a:	ed93 7a01 	vldr	s14, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 80035a4:	e002      	b.n	80035ac <imu_get_quaternion_KF+0x408>
 80035a6:	bf00      	nop
 80035a8:	447a0000 	.word	0x447a0000
 80035ac:	edd3 6a00 	vldr	s13, [r3]
 80035b0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80035b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80035be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c2:	edc3 7a01 	vstr	s15, [r3, #4]
    imu->q_KF->y -= imu->K * errY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80035cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 80035d6:	edd3 6a00 	vldr	s13, [r3]
 80035da:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80035de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80035e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ec:	edc3 7a02 	vstr	s15, [r3, #8]
    imu->q_KF->z -= imu->K * errZ;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 80035f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 8003600:	edd3 6a00 	vldr	s13, [r3]
 8003604:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003616:	edc3 7a03 	vstr	s15, [r3, #12]
    imu->q_KF->w = sqrt(1.0f - imu->q_KF->x * imu->q_KF->x - imu->q_KF->y * imu->q_KF->y - imu->q_KF->z * imu->q_KF->z); // Recalcula w
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003620:	ed93 7a01 	vldr	s14, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800362a:	edd3 7a01 	vldr	s15, [r3, #4]
 800362e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003640:	edd3 6a02 	vldr	s13, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800364a:	edd3 7a02 	vldr	s15, [r3, #8]
 800364e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800365c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 8003666:	edd3 7a03 	vldr	s15, [r3, #12]
 800366a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800366e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003672:	ee17 0a90 	vmov	r0, s15
 8003676:	f7fc ff6f 	bl	8000558 <__aeabi_f2d>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	ec43 2b10 	vmov	d0, r2, r3
 8003682:	f009 fd09 	bl	800d098 <sqrt>
 8003686:	ec51 0b10 	vmov	r0, r1, d0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 46bc 	ldr.w	r4, [r3, #1724]	@ 0x6bc
 8003690:	f7fd fa92 	bl	8000bb8 <__aeabi_d2f>
 8003694:	4603      	mov	r3, r0
 8003696:	6023      	str	r3, [r4, #0]

    // Normaliza quaternion
    normalizeQuaternion(imu->q_KF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	@ 0x6bc
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 f88c 	bl	80077bc <normalizeQuaternion>

    // Atualiza a covariância
    imu->P *= (1.0f - imu->K);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f203 63cc 	addw	r3, r3, #1740	@ 0x6cc
 80036aa:	ed93 7a00 	vldr	s14, [r3]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f503 63da 	add.w	r3, r3, #1744	@ 0x6d0
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f203 63cc 	addw	r3, r3, #1740	@ 0x6cc
 80036ca:	edc3 7a00 	vstr	s15, [r3]

}
 80036ce:	bf00      	nop
 80036d0:	3764      	adds	r7, #100	@ 0x64
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop

080036d8 <imu_get_quaternion_madgwick>:

void imu_get_quaternion_madgwick(IMU *imu)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0ac      	sub	sp, #176	@ 0xb0
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

	/********************************************************************/
	/* 					Cálculo de quaternion por Madgwick				*/
	/********************************************************************/
    float ax=imu->Acc_X_f, ay=imu->Acc_Y_f, az=imu->Acc_Z_f;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f0:	617b      	str	r3, [r7, #20]
    float gx=imu->Gyro_X_f, gy=imu->Gyro_Y_f, gz=imu->Gyro_Z_f;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003708:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float mx=imu->Mag_X_f, my=imu->Mag_Y_f, mz=imu->Mag_Z_f;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003722:	60bb      	str	r3, [r7, #8]
    float dt=(imu->curr_Time-imu->prev_Time)/1000;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 800372a:	ed93 7a00 	vldr	s14, [r3]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	ee37 7a67 	vsub.f32	s14, s14, s15
 800373c:	eddf 6af9 	vldr	s13, [pc, #996]	@ 8003b24 <imu_get_quaternion_madgwick+0x44c>
 8003740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003744:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0

    float q0 = imu->q_MW->w, q1 = imu->q_MW->x, q2 = imu->q_MW->y, q3 = imu->q_MW->z;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float q1q1, q1q2, q1q3;
    float q2q2, q2q3;
    float q3q3;

    // Converte taxas do giroscópio para radianos por segundo
    gx *= 0.5f * dt;
 8003778:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800377c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003784:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
    gy *= 0.5f * dt;
 8003790:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003794:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379c:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    gz *= 0.5f * dt;
 80037a8:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80037ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037b4:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80037b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037bc:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4

    float BETA = 0.9;
 80037c0:	4bd9      	ldr	r3, [pc, #868]	@ (8003b28 <imu_get_quaternion_madgwick+0x450>)
 80037c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    // Normaliza os vetores do acelerômetro e magnetômetro
    normalizeVector(&ax, &ay, &az);
 80037c6:	f107 0214 	add.w	r2, r7, #20
 80037ca:	f107 0118 	add.w	r1, r7, #24
 80037ce:	f107 031c 	add.w	r3, r7, #28
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 ff94 	bl	8007700 <normalizeVector>
    normalizeVector(&mx, &my, &mz);
 80037d8:	f107 0208 	add.w	r2, r7, #8
 80037dc:	f107 010c 	add.w	r1, r7, #12
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 ff8b 	bl	8007700 <normalizeVector>

    // Pré-cálculos para evitar operações repetidas
    _2q0 = 2.0f * q0;
 80037ea:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80037ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037f2:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    _2q1 = 2.0f * q1;
 80037f6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80037fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037fe:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    _2q2 = 2.0f * q2;
 8003802:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003806:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800380a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    _2q3 = 2.0f * q3;
 800380e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003812:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003816:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    q0q0 = q0 * q0;
 800381a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800381e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003822:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    q0q1 = q0 * q1;
 8003826:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 800382a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800382e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003832:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    q0q2 = q0 * q2;
 8003836:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 800383a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    q0q3 = q0 * q3;
 8003846:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 800384a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    q1q1 = q1 * q1;
 8003856:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800385a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800385e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    q1q2 = q1 * q2;
 8003862:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003866:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    q1q3 = q1 * q3;
 8003872:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003876:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    q2q2 = q2 * q2;
 8003882:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003886:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800388a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    q2q3 = q2 * q3;
 800388e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003892:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    q3q3 = q3 * q3;
 800389e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80038a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038a6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Computa o vetor de referência do campo magnético (no referencial do sensor)
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 80038aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038b2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80038b6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80038ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038be:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80038c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80038ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80038d2:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 80038d6:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80038da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80038de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80038ee:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 80038f2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80038f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80038fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003902:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 8003906:	edd7 7a04 	vldr	s15, [r7, #16]
 800390a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800390e:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8003912:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800391e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003922:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003926:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800392a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800392e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003932:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003936:	ee76 7a67 	vsub.f32	s15, s12, s15
 800393a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003942:	edd7 7a02 	vldr	s15, [r7, #8]
 8003946:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800394a:	ed97 6a16 	vldr	s12, [r7, #88]	@ 0x58
 800394e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003952:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800395a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    _2bx = sqrtf(hx * hx + hy * hy);
 8003962:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003966:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800396a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800396e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003976:	eeb0 0a67 	vmov.f32	s0, s15
 800397a:	f009 fc9d 	bl	800d2b8 <sqrtf>
 800397e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    // Aqui _2bz incorpora o componente vertical do campo magnético
    _2bz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 8003982:	edd7 7a04 	vldr	s15, [r7, #16]
 8003986:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800398a:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800398e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003992:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399a:	edd7 7a03 	vldr	s15, [r7, #12]
 800399e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039a2:	ed97 6a16 	vldr	s12, [r7, #88]	@ 0x58
 80039a6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80039aa:	ee76 7a27 	vadd.f32	s15, s12, s15
 80039ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039be:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80039c2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80039c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80039ca:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80039ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 80039d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039da:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    // Agora computa o passo corretivo (gradiente) para a fusão dos sensores
    // Note que os termos envolvendo _2bz são usados para levar em conta a correção do yaw
    s0 = -_2q2 * (2.0f * q1q3 - _2q0 * q2 - ax)
 80039de:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80039e2:	eeb1 7a67 	vneg.f32	s14, s15
 80039e6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80039ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039ee:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 80039f2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80039f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80039fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a06:	ee27 7a27 	vmul.f32	s14, s14, s15
         + _2q1 * (2.0f * q0q1 + _2q2 * q3 - ay)
 8003a0a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003a0e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003a12:	ed97 6a20 	vldr	s12, [r7, #128]	@ 0x80
 8003a16:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003a1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a22:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a26:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a2a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a32:	ee37 7a27 	vadd.f32	s14, s14, s15
         - _2bz * q2 * (_2bx * (0.5f - q3q3 - q0q0) + _2bz * (q1q3 - q0q2) - mx)
 8003a36:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8003a3a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a42:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003a46:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003a4a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003a4e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003a52:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003a56:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003a5a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a5e:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8003a62:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003a66:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003a6a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003a6e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a72:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003a76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a7a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a82:	ee37 7a67 	vsub.f32	s14, s14, s15
         + (-_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q0q1) + _2bz * (q0q3 + q1q2) - my)
 8003a86:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003a8a:	eef1 6a67 	vneg.f32	s13, s15
 8003a8e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003a92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a96:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8003a9a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003a9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003aa2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003aa6:	ed97 6a16 	vldr	s12, [r7, #88]	@ 0x58
 8003aaa:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003aae:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003ab2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003ab6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003aba:	edd7 5a1b 	vldr	s11, [r7, #108]	@ 0x6c
 8003abe:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003ac2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003ac6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003aca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ace:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ade:	ee37 7a27 	vadd.f32	s14, s14, s15
         + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003ae2:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003ae6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003aea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aee:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8003af2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003af6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003afa:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003afe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b02:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8003b06:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003b0a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003b0e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003b12:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003b16:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003b1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003b1e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003b22:	e003      	b.n	8003b2c <imu_get_quaternion_madgwick+0x454>
 8003b24:	447a0000 	.word	0x447a0000
 8003b28:	3f666666 	.word	0x3f666666
 8003b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
    s0 = -_2q2 * (2.0f * q1q3 - _2q0 * q2 - ax)
 8003b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    s1 = _2q3 * (2.0f * q1q3 - _2q0 * q2 - ax)
 8003b40:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003b44:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b48:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8003b4c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b58:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b60:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003b64:	ee27 7a27 	vmul.f32	s14, s14, s15
         + _2q0 * (2.0f * q0q1 + _2q2 * q3 - ay)
 8003b68:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003b6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b70:	ed97 6a20 	vldr	s12, [r7, #128]	@ 0x80
 8003b74:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003b78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b7c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b80:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b88:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b90:	ee37 7a27 	vadd.f32	s14, s14, s15
         - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8003b94:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003b98:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003b9c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ba0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003ba4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ba8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003bac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003bb0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003bb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bb8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003bbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bc0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
         + _2bz * q3 * (_2bx * (0.5f - q3q3 - q0q0) + _2bz * (q1q3 - q0q2) - mx)
 8003bcc:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8003bd0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003bd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bd8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003bdc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003be0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003be4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003be8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003bec:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003bf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bf4:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8003bf8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003bfc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003c00:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003c04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c18:	ee37 7a27 	vadd.f32	s14, s14, s15
         + (_2bx * q2 + _2bz * q0) * (_2bx * (q2q3 - q0q1) + _2bz * (q0q3 + q1q2) - my)
 8003c1c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003c20:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003c24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c28:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8003c2c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003c30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c38:	ed97 6a16 	vldr	s12, [r7, #88]	@ 0x58
 8003c3c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003c40:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003c44:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003c48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c4c:	edd7 5a1b 	vldr	s11, [r7, #108]	@ 0x6c
 8003c50:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c54:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003c58:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003c5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c70:	ee37 7a27 	vadd.f32	s14, s14, s15
         + (_2bx * q3 - 4.0f * _2bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003c74:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003c78:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c80:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003c84:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8003c88:	ee27 6a86 	vmul.f32	s12, s15, s12
 8003c8c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003c90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c98:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8003c9c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003ca0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ca4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003ca8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003cac:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8003cb0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003cb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003cb8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003cbc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003cc0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003cc4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003cc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ccc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    s1 = _2q3 * (2.0f * q1q3 - _2q0 * q2 - ax)
 8003cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    s2 = -_2q0 * (2.0f * q1q3 - _2q0 * q2 - ax)
 8003ce0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003ce4:	eeb1 7a67 	vneg.f32	s14, s15
 8003ce8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003cec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003cf0:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8003cf4:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003cf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003cfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d00:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d08:	ee27 7a27 	vmul.f32	s14, s14, s15
         + _2q3 * (2.0f * q0q1 + _2q2 * q3 - ay)
 8003d0c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003d10:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003d14:	ed97 6a20 	vldr	s12, [r7, #128]	@ 0x80
 8003d18:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003d1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d24:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d28:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d2c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d34:	ee37 7a27 	vadd.f32	s14, s14, s15
         - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8003d38:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003d3c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003d40:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d44:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003d48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d4c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003d50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003d54:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003d58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003d60:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d64:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d6c:	ee37 7a67 	vsub.f32	s14, s14, s15
         + (-4.0f * _2bx * q2 - _2bz * q0) * (_2bx * (0.5f - q3q3 - q0q0) + _2bz * (q1q3 - q0q2) - mx)
 8003d70:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003d74:	eef9 6a00 	vmov.f32	s13, #144	@ 0xc0800000 -4.0
 8003d78:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d7c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003d80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d84:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8003d88:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003d8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d94:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003d98:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003d9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003da0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003da4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003da8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003dac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003db0:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8003db4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003db8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003dbc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003dc0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003dc4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dcc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
         + (_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q0q1) + _2bz * (q0q3 + q1q2) - my)
 8003dd8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003ddc:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003de0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003de4:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8003de8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003dec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003df0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003df4:	ed97 6a16 	vldr	s12, [r7, #88]	@ 0x58
 8003df8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003dfc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003e00:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003e04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e08:	edd7 5a1b 	vldr	s11, [r7, #108]	@ 0x6c
 8003e0c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003e10:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003e14:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003e18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003e1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e24:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
         + (_2bx * q0 - 4.0f * _2bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003e30:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003e34:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003e38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e3c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003e40:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8003e44:	ee27 6a86 	vmul.f32	s12, s15, s12
 8003e48:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003e4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e54:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8003e58:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003e5c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003e60:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003e64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e68:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8003e6c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003e70:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003e74:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003e78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003e7c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003e80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003e84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
    s2 = -_2q0 * (2.0f * q1q3 - _2q0 * q2 - ax)
 8003e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e98:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    s3 = _2q1 * (2.0f * q1q3 - _2q0 * q2 - ax)
 8003e9c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003ea0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ea4:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8003ea8:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003eb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003eb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ebc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
         + _2q2 * (2.0f * q0q1 + _2q2 * q3 - ay)
 8003ec4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003ec8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ecc:	ed97 6a20 	vldr	s12, [r7, #128]	@ 0x80
 8003ed0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003ed4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ed8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003edc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ee0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ee4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eec:	ee37 7a27 	vadd.f32	s14, s14, s15
         + (-4.0f * _2bx * q3 + _2bz * q1) * (_2bx * (0.5f - q3q3 - q0q0) + _2bz * (q1q3 - q0q2) - mx)
 8003ef0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003ef4:	eef9 6a00 	vmov.f32	s13, #144	@ 0xc0800000 -4.0
 8003ef8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003efc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003f00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f04:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8003f08:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003f0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f14:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003f18:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003f1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f20:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003f24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f28:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003f2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f30:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8003f34:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003f38:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003f3c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003f40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f48:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f54:	ee37 7a27 	vadd.f32	s14, s14, s15
         + (-_2bx * q0 + _2bz * q2) * (_2bx * (q2q3 - q0q1) + _2bz * (q0q3 + q1q2) - my)
 8003f58:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003f5c:	eef1 6a67 	vneg.f32	s13, s15
 8003f60:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003f64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f68:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8003f6c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003f70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f78:	ed97 6a16 	vldr	s12, [r7, #88]	@ 0x58
 8003f7c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003f80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f84:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003f88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f8c:	edd7 5a1b 	vldr	s11, [r7, #108]	@ 0x6c
 8003f90:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003f94:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003f98:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003f9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003fa0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
         + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003fb4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003fb8:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fc0:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8003fc4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003fc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003fcc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003fd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003fd4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8003fd8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003fdc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003fe0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003fe4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003fe8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003fec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ff0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ff8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    s3 = _2q1 * (2.0f * q1q3 - _2q0 * q2 - ax)
 8004000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004004:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Normaliza o vetor gradiente
    float recipNorm = 1/sqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004008:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800400c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004010:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004014:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800401c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004020:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004028:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800402c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004034:	ee17 0a90 	vmov	r0, s15
 8004038:	f7fc fa8e 	bl	8000558 <__aeabi_f2d>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	ec43 2b10 	vmov	d0, r2, r3
 8004044:	f009 f828 	bl	800d098 <sqrt>
 8004048:	ec53 2b10 	vmov	r2, r3, d0
 800404c:	f04f 0000 	mov.w	r0, #0
 8004050:	498b      	ldr	r1, [pc, #556]	@ (8004280 <imu_get_quaternion_madgwick+0xba8>)
 8004052:	f7fc fc03 	bl	800085c <__aeabi_ddiv>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f7fc fdab 	bl	8000bb8 <__aeabi_d2f>
 8004062:	4603      	mov	r3, r0
 8004064:	633b      	str	r3, [r7, #48]	@ 0x30
    if(recipNorm<=0){return;}
 8004066:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800406a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800406e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004072:	f240 8101 	bls.w	8004278 <imu_get_quaternion_madgwick+0xba0>
    s0 *= recipNorm;
 8004076:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800407a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    s1 *= recipNorm;
 8004086:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800408a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    s2 *= recipNorm;
 8004096:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800409a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    s3 *= recipNorm;
 80040a6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80040aa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Calcula a taxa de variação do quaternion
    qDot0 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz) - BETA * s0;
 80040b6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80040ba:	eeb1 7a67 	vneg.f32	s14, s15
 80040be:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80040c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040c6:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80040ca:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80040ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040d6:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80040da:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80040de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80040ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040ee:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 80040f2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80040f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    qDot1 = 0.5f * (q0 * gx + q2 * gz - q3 * gy) - BETA * s1;
 8004102:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8004106:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800410a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800410e:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8004112:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800411e:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8004122:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800412a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800412e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004132:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004136:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 800413a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800413e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004146:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    qDot2 = 0.5f * (q0 * gy - q1 * gz + q3 * gx) - BETA * s2;
 800414a:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 800414e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004156:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 800415a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800415e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004162:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004166:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 800416a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800416e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004176:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800417a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800417e:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8004182:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800418a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    qDot3 = 0.5f * (q0 * gz + q1 * gy - q2 * gx) - BETA * s3;
 8004192:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8004196:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800419a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800419e:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80041a2:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80041a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041ae:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80041b2:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80041b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041c6:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 80041ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80041ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d6:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integra para obter o novo quaternion
    q0 += qDot0 * dt;
 80041da:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80041de:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80041ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ee:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q1 += qDot1 * dt;
 80041f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80041f6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004206:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    q2 += qDot2 * dt;
 800420a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800420e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800421a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    q3 += qDot3 * dt;
 8004222:	ed97 7a08 	vldr	s14, [r7, #32]
 8004226:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8004232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004236:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90

    // Normaliza quaternions
    imu->q_MW->w = q0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 8004240:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8004244:	601a      	str	r2, [r3, #0]
    imu->q_MW->x = q1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 800424c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004250:	605a      	str	r2, [r3, #4]
    imu->q_MW->y = q2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 8004258:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800425c:	609a      	str	r2, [r3, #8]
    imu->q_MW->z = q3;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 8004264:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004268:	60da      	str	r2, [r3, #12]
    normalizeQuaternion(imu->q_MW);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	@ 0x6b8
 8004270:	4618      	mov	r0, r3
 8004272:	f003 faa3 	bl	80077bc <normalizeQuaternion>
 8004276:	e000      	b.n	800427a <imu_get_quaternion_madgwick+0xba2>
    if(recipNorm<=0){return;}
 8004278:	bf00      	nop

}
 800427a:	37b0      	adds	r7, #176	@ 0xb0
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	3ff00000 	.word	0x3ff00000
 8004284:	00000000 	.word	0x00000000

08004288 <imu_get_euler_angles>:


void imu_get_euler_angles(IMU *imu)
{	/********************************************************************/
 8004288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800428c:	ed2d 8b02 	vpush	{d8}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
	/* 							Calculo de Atitude 						*/
	/********************************************************************/

	imu->Acc_Abs=sqrt(pow(imu->Acc_X_f,2)+pow(imu->Acc_Y_f,2)+pow(imu->Acc_Z_f,2));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc f95c 	bl	8000558 <__aeabi_f2d>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	ed9f 1b86 	vldr	d1, [pc, #536]	@ 80044c0 <imu_get_euler_angles+0x238>
 80042a8:	ec43 2b10 	vmov	d0, r2, r3
 80042ac:	f008 fe84 	bl	800cfb8 <pow>
 80042b0:	ec59 8b10 	vmov	r8, r9, d0
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc f94d 	bl	8000558 <__aeabi_f2d>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	ed9f 1b7f 	vldr	d1, [pc, #508]	@ 80044c0 <imu_get_euler_angles+0x238>
 80042c6:	ec43 2b10 	vmov	d0, r2, r3
 80042ca:	f008 fe75 	bl	800cfb8 <pow>
 80042ce:	ec53 2b10 	vmov	r2, r3, d0
 80042d2:	4640      	mov	r0, r8
 80042d4:	4649      	mov	r1, r9
 80042d6:	f7fb ffe1 	bl	800029c <__adddf3>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4690      	mov	r8, r2
 80042e0:	4699      	mov	r9, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc f936 	bl	8000558 <__aeabi_f2d>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	ed9f 1b73 	vldr	d1, [pc, #460]	@ 80044c0 <imu_get_euler_angles+0x238>
 80042f4:	ec43 2b10 	vmov	d0, r2, r3
 80042f8:	f008 fe5e 	bl	800cfb8 <pow>
 80042fc:	ec53 2b10 	vmov	r2, r3, d0
 8004300:	4640      	mov	r0, r8
 8004302:	4649      	mov	r1, r9
 8004304:	f7fb ffca 	bl	800029c <__adddf3>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	ec43 2b17 	vmov	d7, r2, r3
 8004310:	eeb0 0a47 	vmov.f32	s0, s14
 8004314:	eef0 0a67 	vmov.f32	s1, s15
 8004318:	f008 febe 	bl	800d098 <sqrt>
 800431c:	ec53 2b10 	vmov	r2, r3, d0
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	f7fc fc48 	bl	8000bb8 <__aeabi_d2f>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
	imu->Mag_Abs=sqrt(pow(imu->Mag_X,2)+pow(imu->Mag_Y,2)+pow(imu->Mag_Z,2));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc f90f 	bl	8000558 <__aeabi_f2d>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 80044c0 <imu_get_euler_angles+0x238>
 8004342:	ec43 2b10 	vmov	d0, r2, r3
 8004346:	f008 fe37 	bl	800cfb8 <pow>
 800434a:	ec59 8b10 	vmov	r8, r9, d0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc f8ff 	bl	8000558 <__aeabi_f2d>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 80044c0 <imu_get_euler_angles+0x238>
 8004362:	ec43 2b10 	vmov	d0, r2, r3
 8004366:	f008 fe27 	bl	800cfb8 <pow>
 800436a:	ec53 2b10 	vmov	r2, r3, d0
 800436e:	4640      	mov	r0, r8
 8004370:	4649      	mov	r1, r9
 8004372:	f7fb ff93 	bl	800029c <__adddf3>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4690      	mov	r8, r2
 800437c:	4699      	mov	r9, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004384:	4618      	mov	r0, r3
 8004386:	f7fc f8e7 	bl	8000558 <__aeabi_f2d>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 80044c0 <imu_get_euler_angles+0x238>
 8004392:	ec43 2b10 	vmov	d0, r2, r3
 8004396:	f008 fe0f 	bl	800cfb8 <pow>
 800439a:	ec53 2b10 	vmov	r2, r3, d0
 800439e:	4640      	mov	r0, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	f7fb ff7b 	bl	800029c <__adddf3>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	ec43 2b17 	vmov	d7, r2, r3
 80043ae:	eeb0 0a47 	vmov.f32	s0, s14
 80043b2:	eef0 0a67 	vmov.f32	s1, s15
 80043b6:	f008 fe6f 	bl	800d098 <sqrt>
 80043ba:	ec53 2b10 	vmov	r2, r3, d0
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7fc fbf9 	bl	8000bb8 <__aeabi_d2f>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	//Atitude a partir do acelerômetro
	if(imu->Acc_Abs<1+imu->acc_lim || imu->Acc_Abs>1-imu->acc_lim)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80043da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ea:	d40f      	bmi.n	800440c <imu_get_euler_angles+0x184>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80043f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004408:	f340 80c8 	ble.w	800459c <imu_get_euler_angles+0x314>
	{
		if(imu->Acc_Z_f>imu->acc_lim*2 || imu->Acc_Z_f<-imu->acc_lim*2)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004418:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800441c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	dc0e      	bgt.n	8004444 <imu_get_euler_angles+0x1bc>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004432:	eef1 7a67 	vneg.f32	s15, s15
 8004436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800443a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	d541      	bpl.n	80044c8 <imu_get_euler_angles+0x240>
		{
			imu->Acc_Phi=atan2(imu->Acc_Y_f,imu->Acc_Z_f);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	4618      	mov	r0, r3
 800444a:	f7fc f885 	bl	8000558 <__aeabi_f2d>
 800444e:	4680      	mov	r8, r0
 8004450:	4689      	mov	r9, r1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc f87e 	bl	8000558 <__aeabi_f2d>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	ec43 2b11 	vmov	d1, r2, r3
 8004464:	ec49 8b10 	vmov	d0, r8, r9
 8004468:	f008 fda4 	bl	800cfb4 <atan2>
 800446c:	ec53 2b10 	vmov	r2, r3, d0
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f7fc fba0 	bl	8000bb8 <__aeabi_d2f>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			imu->Acc_Theta=asin(imu->Acc_X_f/imu->Acc_Abs);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	edd3 7a08 	vldr	s15, [r3, #32]
 800448c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004490:	ee16 0a90 	vmov	r0, s13
 8004494:	f7fc f860 	bl	8000558 <__aeabi_f2d>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	ec43 2b10 	vmov	d0, r2, r3
 80044a0:	f008 fd54 	bl	800cf4c <asin>
 80044a4:	ec53 2b10 	vmov	r2, r3, d0
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	f7fc fb84 	bl	8000bb8 <__aeabi_d2f>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
 80044b8:	e06b      	b.n	8004592 <imu_get_euler_angles+0x30a>
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w
 80044c0:	00000000 	.word	0x00000000
 80044c4:	40000000 	.word	0x40000000
		}
		else
		{
			imu->Acc_Phi=atan2(imu->Acc_Y_f,sqrt(pow(imu->Acc_Z_f,2)+pow(imu->Acc_X_f,2)));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc f843 	bl	8000558 <__aeabi_f2d>
 80044d2:	4680      	mov	r8, r0
 80044d4:	4689      	mov	r9, r1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc f83c 	bl	8000558 <__aeabi_f2d>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	ed1f 1b0a 	vldr	d1, [pc, #-40]	@ 80044c0 <imu_get_euler_angles+0x238>
 80044e8:	ec43 2b10 	vmov	d0, r2, r3
 80044ec:	f008 fd64 	bl	800cfb8 <pow>
 80044f0:	ec5b ab10 	vmov	sl, fp, d0
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fc f82d 	bl	8000558 <__aeabi_f2d>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	ed1f 1b11 	vldr	d1, [pc, #-68]	@ 80044c0 <imu_get_euler_angles+0x238>
 8004506:	ec43 2b10 	vmov	d0, r2, r3
 800450a:	f008 fd55 	bl	800cfb8 <pow>
 800450e:	ec53 2b10 	vmov	r2, r3, d0
 8004512:	4650      	mov	r0, sl
 8004514:	4659      	mov	r1, fp
 8004516:	f7fb fec1 	bl	800029c <__adddf3>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	ec43 2b17 	vmov	d7, r2, r3
 8004522:	eeb0 0a47 	vmov.f32	s0, s14
 8004526:	eef0 0a67 	vmov.f32	s1, s15
 800452a:	f008 fdb5 	bl	800d098 <sqrt>
 800452e:	eeb0 7a40 	vmov.f32	s14, s0
 8004532:	eef0 7a60 	vmov.f32	s15, s1
 8004536:	eeb0 1a47 	vmov.f32	s2, s14
 800453a:	eef0 1a67 	vmov.f32	s3, s15
 800453e:	ec49 8b10 	vmov	d0, r8, r9
 8004542:	f008 fd37 	bl	800cfb4 <atan2>
 8004546:	ec53 2b10 	vmov	r2, r3, d0
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	f7fc fb33 	bl	8000bb8 <__aeabi_d2f>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			imu->Acc_Theta=asin(imu->Acc_X_f/imu->Acc_Abs);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	edd3 7a08 	vldr	s15, [r3, #32]
 8004566:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800456a:	ee16 0a90 	vmov	r0, s13
 800456e:	f7fb fff3 	bl	8000558 <__aeabi_f2d>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	ec43 2b10 	vmov	d0, r2, r3
 800457a:	f008 fce7 	bl	800cf4c <asin>
 800457e:	ec53 2b10 	vmov	r2, r3, d0
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f7fc fb17 	bl	8000bb8 <__aeabi_d2f>
 800458a:	4602      	mov	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
		}
		imu->Acc_Gama=0;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	}

	//Atitude a partir do magnetômetro

	imu->Mag_X_N=imu->Mag_X_f/imu->Mag_Abs;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	edd3 6a28 	vldr	s13, [r3, #160]	@ 0xa0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 80045a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
	imu->Mag_Y_N=imu->Mag_Y_f/imu->Mag_Abs;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	edd3 6a2e 	vldr	s13, [r3, #184]	@ 0xb8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 80045be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
	imu->Mag_Z_N=imu->Mag_Z_f/imu->Mag_Abs;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	edd3 6a34 	vldr	s13, [r3, #208]	@ 0xd0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 80045d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4

	imu->Mag_Phi=0;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	imu->Mag_Theta=0;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	imu->Mag_Gama=-atan2(imu->Mag_Z_N*sin(imu->Phi)-imu->Mag_Y_N*cos(imu->Phi),
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ffad 	bl	8000558 <__aeabi_f2d>
 80045fe:	4680      	mov	r8, r0
 8004600:	4689      	mov	r9, r1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ffa5 	bl	8000558 <__aeabi_f2d>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	ec43 2b10 	vmov	d0, r2, r3
 8004616:	f008 fdc7 	bl	800d1a8 <sin>
 800461a:	ec53 2b10 	vmov	r2, r3, d0
 800461e:	4640      	mov	r0, r8
 8004620:	4649      	mov	r1, r9
 8004622:	f7fb fff1 	bl	8000608 <__aeabi_dmul>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4692      	mov	sl, r2
 800462c:	469b      	mov	fp, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb ff8f 	bl	8000558 <__aeabi_f2d>
 800463a:	4680      	mov	r8, r0
 800463c:	4689      	mov	r9, r1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb ff87 	bl	8000558 <__aeabi_f2d>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	ec43 2b10 	vmov	d0, r2, r3
 8004652:	f008 fd4d 	bl	800d0f0 <cos>
 8004656:	ec53 2b10 	vmov	r2, r3, d0
 800465a:	4640      	mov	r0, r8
 800465c:	4649      	mov	r1, r9
 800465e:	f7fb ffd3 	bl	8000608 <__aeabi_dmul>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4650      	mov	r0, sl
 8004668:	4659      	mov	r1, fp
 800466a:	f7fb fe15 	bl	8000298 <__aeabi_dsub>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	ec43 2b18 	vmov	d8, r2, r3
					imu->Mag_X_N*cos(imu->Theta)+(imu->Mag_Y_N
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb ff6b 	bl	8000558 <__aeabi_f2d>
 8004682:	4680      	mov	r8, r0
 8004684:	4689      	mov	r9, r1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb ff63 	bl	8000558 <__aeabi_f2d>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	ec43 2b10 	vmov	d0, r2, r3
 800469a:	f008 fd29 	bl	800d0f0 <cos>
 800469e:	ec53 2b10 	vmov	r2, r3, d0
 80046a2:	4640      	mov	r0, r8
 80046a4:	4649      	mov	r1, r9
 80046a6:	f7fb ffaf 	bl	8000608 <__aeabi_dmul>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4692      	mov	sl, r2
 80046b0:	469b      	mov	fp, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff4d 	bl	8000558 <__aeabi_f2d>
 80046be:	4680      	mov	r8, r0
 80046c0:	4689      	mov	r9, r1
					*sin(imu->Phi)+imu->Mag_Z_N*cos(imu->Phi))*sin(imu->Theta)-imu->Mag_Gama_0);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fb ff45 	bl	8000558 <__aeabi_f2d>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	ec43 2b10 	vmov	d0, r2, r3
 80046d6:	f008 fd67 	bl	800d1a8 <sin>
 80046da:	ec53 2b10 	vmov	r2, r3, d0
 80046de:	4640      	mov	r0, r8
 80046e0:	4649      	mov	r1, r9
 80046e2:	f7fb ff91 	bl	8000608 <__aeabi_dmul>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	e9c7 2300 	strd	r2, r3, [r7]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fb ff2f 	bl	8000558 <__aeabi_f2d>
 80046fa:	4680      	mov	r8, r0
 80046fc:	4689      	mov	r9, r1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb ff27 	bl	8000558 <__aeabi_f2d>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	ec43 2b10 	vmov	d0, r2, r3
 8004712:	f008 fced 	bl	800d0f0 <cos>
 8004716:	ec53 2b10 	vmov	r2, r3, d0
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	f7fb ff73 	bl	8000608 <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800472a:	f7fb fdb7 	bl	800029c <__adddf3>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4690      	mov	r8, r2
 8004734:	4699      	mov	r9, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800473c:	4618      	mov	r0, r3
 800473e:	f7fb ff0b 	bl	8000558 <__aeabi_f2d>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	ec43 2b10 	vmov	d0, r2, r3
 800474a:	f008 fd2d 	bl	800d1a8 <sin>
 800474e:	ec53 2b10 	vmov	r2, r3, d0
 8004752:	4640      	mov	r0, r8
 8004754:	4649      	mov	r1, r9
 8004756:	f7fb ff57 	bl	8000608 <__aeabi_dmul>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
					imu->Mag_X_N*cos(imu->Theta)+(imu->Mag_Y_N
 800475e:	4650      	mov	r0, sl
 8004760:	4659      	mov	r1, fp
 8004762:	f7fb fd9b 	bl	800029c <__adddf3>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4690      	mov	r8, r2
 800476c:	4699      	mov	r9, r3
					*sin(imu->Phi)+imu->Mag_Z_N*cos(imu->Phi))*sin(imu->Theta)-imu->Mag_Gama_0);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb feef 	bl	8000558 <__aeabi_f2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
	imu->Mag_Gama=-atan2(imu->Mag_Z_N*sin(imu->Phi)-imu->Mag_Y_N*cos(imu->Phi),
 800477e:	4640      	mov	r0, r8
 8004780:	4649      	mov	r1, r9
 8004782:	f7fb fd89 	bl	8000298 <__aeabi_dsub>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	ec43 2b17 	vmov	d7, r2, r3
 800478e:	eeb0 1a47 	vmov.f32	s2, s14
 8004792:	eef0 1a67 	vmov.f32	s3, s15
 8004796:	eeb0 0a48 	vmov.f32	s0, s16
 800479a:	eef0 0a68 	vmov.f32	s1, s17
 800479e:	f008 fc09 	bl	800cfb4 <atan2>
 80047a2:	ec53 2b10 	vmov	r2, r3, d0
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7fc fa05 	bl	8000bb8 <__aeabi_d2f>
 80047ae:	4603      	mov	r3, r0
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef1 7a67 	vneg.f32	s15, s15
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

	//Atitude a partir do giroscópio
	imu->Gyro_X_NED	=	imu->Gyro_X_f	+	sin(imu->Phi)*tan(imu->Theta)*imu->Gyro_Y_f	+	cos(imu->Phi)*tan(imu->Theta)*imu->Gyro_Z_f;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fec8 	bl	8000558 <__aeabi_f2d>
 80047c8:	4680      	mov	r8, r0
 80047ca:	4689      	mov	r9, r1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fb fec0 	bl	8000558 <__aeabi_f2d>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	ec43 2b10 	vmov	d0, r2, r3
 80047e0:	f008 fce2 	bl	800d1a8 <sin>
 80047e4:	ec5b ab10 	vmov	sl, fp, d0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fb feb2 	bl	8000558 <__aeabi_f2d>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	ec43 2b10 	vmov	d0, r2, r3
 80047fc:	f008 fd28 	bl	800d250 <tan>
 8004800:	ec53 2b10 	vmov	r2, r3, d0
 8004804:	4650      	mov	r0, sl
 8004806:	4659      	mov	r1, fp
 8004808:	f7fb fefe 	bl	8000608 <__aeabi_dmul>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4692      	mov	sl, r2
 8004812:	469b      	mov	fp, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004818:	4618      	mov	r0, r3
 800481a:	f7fb fe9d 	bl	8000558 <__aeabi_f2d>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4650      	mov	r0, sl
 8004824:	4659      	mov	r1, fp
 8004826:	f7fb feef 	bl	8000608 <__aeabi_dmul>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fb fd33 	bl	800029c <__adddf3>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4690      	mov	r8, r2
 800483c:	4699      	mov	r9, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004844:	4618      	mov	r0, r3
 8004846:	f7fb fe87 	bl	8000558 <__aeabi_f2d>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	ec43 2b10 	vmov	d0, r2, r3
 8004852:	f008 fc4d 	bl	800d0f0 <cos>
 8004856:	ec5b ab10 	vmov	sl, fp, d0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004860:	4618      	mov	r0, r3
 8004862:	f7fb fe79 	bl	8000558 <__aeabi_f2d>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	ec43 2b10 	vmov	d0, r2, r3
 800486e:	f008 fcef 	bl	800d250 <tan>
 8004872:	ec53 2b10 	vmov	r2, r3, d0
 8004876:	4650      	mov	r0, sl
 8004878:	4659      	mov	r1, fp
 800487a:	f7fb fec5 	bl	8000608 <__aeabi_dmul>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4692      	mov	sl, r2
 8004884:	469b      	mov	fp, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb fe63 	bl	8000558 <__aeabi_f2d>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4650      	mov	r0, sl
 8004898:	4659      	mov	r1, fp
 800489a:	f7fb feb5 	bl	8000608 <__aeabi_dmul>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4640      	mov	r0, r8
 80048a4:	4649      	mov	r1, r9
 80048a6:	f7fb fcf9 	bl	800029c <__adddf3>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7fc f981 	bl	8000bb8 <__aeabi_d2f>
 80048b6:	4602      	mov	r2, r0
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
	imu->Gyro_Y_NED	=	-cos(imu->Phi)*imu->Gyro_Y_f						+	sin(imu->Phi)*imu->Gyro_Z_f;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fe47 	bl	8000558 <__aeabi_f2d>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	ec43 2b10 	vmov	d0, r2, r3
 80048d2:	f008 fc0d 	bl	800d0f0 <cos>
 80048d6:	ec53 2b10 	vmov	r2, r3, d0
 80048da:	4614      	mov	r4, r2
 80048dc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fb fe37 	bl	8000558 <__aeabi_f2d>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4620      	mov	r0, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7fb fe89 	bl	8000608 <__aeabi_dmul>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4614      	mov	r4, r2
 80048fc:	461d      	mov	r5, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004904:	4618      	mov	r0, r3
 8004906:	f7fb fe27 	bl	8000558 <__aeabi_f2d>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	ec43 2b10 	vmov	d0, r2, r3
 8004912:	f008 fc49 	bl	800d1a8 <sin>
 8004916:	ec59 8b10 	vmov	r8, r9, d0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb fe19 	bl	8000558 <__aeabi_f2d>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f7fb fe6b 	bl	8000608 <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fb fcaf 	bl	800029c <__adddf3>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4610      	mov	r0, r2
 8004944:	4619      	mov	r1, r3
 8004946:	f7fc f937 	bl	8000bb8 <__aeabi_d2f>
 800494a:	4602      	mov	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
	imu->Gyro_Z_NED	=	sin(imu->Phi)/cos(imu->Theta)*imu->Gyro_Y_f		+	cos(imu->Phi)/cos(imu->Theta)*imu->Gyro_Z_f;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fdfd 	bl	8000558 <__aeabi_f2d>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	ec43 2b10 	vmov	d0, r2, r3
 8004966:	f008 fc1f 	bl	800d1a8 <sin>
 800496a:	ec55 4b10 	vmov	r4, r5, d0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004974:	4618      	mov	r0, r3
 8004976:	f7fb fdef 	bl	8000558 <__aeabi_f2d>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	ec43 2b10 	vmov	d0, r2, r3
 8004982:	f008 fbb5 	bl	800d0f0 <cos>
 8004986:	ec53 2b10 	vmov	r2, r3, d0
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f7fb ff65 	bl	800085c <__aeabi_ddiv>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4614      	mov	r4, r2
 8004998:	461d      	mov	r5, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fdda 	bl	8000558 <__aeabi_f2d>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4620      	mov	r0, r4
 80049aa:	4629      	mov	r1, r5
 80049ac:	f7fb fe2c 	bl	8000608 <__aeabi_dmul>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	461d      	mov	r5, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fb fdca 	bl	8000558 <__aeabi_f2d>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	ec43 2b10 	vmov	d0, r2, r3
 80049cc:	f008 fb90 	bl	800d0f0 <cos>
 80049d0:	ec59 8b10 	vmov	r8, r9, d0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fdbc 	bl	8000558 <__aeabi_f2d>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	ec43 2b10 	vmov	d0, r2, r3
 80049e8:	f008 fb82 	bl	800d0f0 <cos>
 80049ec:	ec53 2b10 	vmov	r2, r3, d0
 80049f0:	4640      	mov	r0, r8
 80049f2:	4649      	mov	r1, r9
 80049f4:	f7fb ff32 	bl	800085c <__aeabi_ddiv>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4690      	mov	r8, r2
 80049fe:	4699      	mov	r9, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fb fda6 	bl	8000558 <__aeabi_f2d>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4640      	mov	r0, r8
 8004a12:	4649      	mov	r1, r9
 8004a14:	f7fb fdf8 	bl	8000608 <__aeabi_dmul>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7fb fc3c 	bl	800029c <__adddf3>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f7fc f8c4 	bl	8000bb8 <__aeabi_d2f>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc

	imu->Gyro_dPhi	=	imu->Gyro_X_NED*(imu->curr_Time-imu->prev_Time)/1000		/180*M_PI;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	ed93 7a69 	vldr	s14, [r3, #420]	@ 0x1a4
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8004a44:	edd3 6a00 	vldr	s13, [r3]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8004a4e:	edd3 7a00 	vldr	s15, [r3]
 8004a52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a5a:	eddf 6ad7 	vldr	s13, [pc, #860]	@ 8004db8 <imu_get_euler_angles+0xb30>
 8004a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a62:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8004dbc <imu_get_euler_angles+0xb34>
 8004a66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a6a:	ee16 0a90 	vmov	r0, s13
 8004a6e:	f7fb fd73 	bl	8000558 <__aeabi_f2d>
 8004a72:	a3cf      	add	r3, pc, #828	@ (adr r3, 8004db0 <imu_get_euler_angles+0xb28>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fdc6 	bl	8000608 <__aeabi_dmul>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	f7fc f898 	bl	8000bb8 <__aeabi_d2f>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	imu->Gyro_dTheta=	imu->Gyro_Y_NED*(imu->curr_Time-imu->prev_Time)/1000		/180*M_PI;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	ed93 7a6c 	vldr	s14, [r3, #432]	@ 0x1b0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8004a9c:	edd3 6a00 	vldr	s13, [r3]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8004aa6:	edd3 7a00 	vldr	s15, [r3]
 8004aaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ab2:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8004db8 <imu_get_euler_angles+0xb30>
 8004ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aba:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8004dbc <imu_get_euler_angles+0xb34>
 8004abe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ac2:	ee16 0a90 	vmov	r0, s13
 8004ac6:	f7fb fd47 	bl	8000558 <__aeabi_f2d>
 8004aca:	a3b9      	add	r3, pc, #740	@ (adr r3, 8004db0 <imu_get_euler_angles+0xb28>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fd9a 	bl	8000608 <__aeabi_dmul>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7fc f86c 	bl	8000bb8 <__aeabi_d2f>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	imu->Gyro_dGama	=	imu->Gyro_Z_NED*(imu->curr_Time-imu->prev_Time)/1000		/180*M_PI;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	ed93 7a6f 	vldr	s14, [r3, #444]	@ 0x1bc
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f203 63f4 	addw	r3, r3, #1780	@ 0x6f4
 8004af4:	edd3 6a00 	vldr	s13, [r3]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 63de 	add.w	r3, r3, #1776	@ 0x6f0
 8004afe:	edd3 7a00 	vldr	s15, [r3]
 8004b02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b0a:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8004db8 <imu_get_euler_angles+0xb30>
 8004b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b12:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8004dbc <imu_get_euler_angles+0xb34>
 8004b16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b1a:	ee16 0a90 	vmov	r0, s13
 8004b1e:	f7fb fd1b 	bl	8000558 <__aeabi_f2d>
 8004b22:	a3a3      	add	r3, pc, #652	@ (adr r3, 8004db0 <imu_get_euler_angles+0xb28>)
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	f7fb fd6e 	bl	8000608 <__aeabi_dmul>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	f7fc f840 	bl	8000bb8 <__aeabi_d2f>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

	//Filtragem por filtro passa alta

	imu->Gyro_dPhi_f=	(imu->Gyro_dPhi*imu->Gyro_DHPF_A[0] +	imu->Gyro_dPhi_p[0]*imu->Gyro_DHPF_A[1]	+ imu->Gyro_dPhi_p[1]*imu->Gyro_DHPF_A[2]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	ed93 7a4e 	vldr	s14, [r3, #312]	@ 0x138
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	edd3 7a8f 	vldr	s15, [r3, #572]	@ 0x23c
 8004b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 639b 	add.w	r3, r3, #1240	@ 0x4d8
 8004b56:	edd3 6a00 	vldr	s13, [r3]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	edd3 7a90 	vldr	s15, [r3, #576]	@ 0x240
 8004b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f203 43dc 	addw	r3, r3, #1244	@ 0x4dc
 8004b6e:	edd3 6a00 	vldr	s13, [r3]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 8004b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
					    -imu->Gyro_dPhi_f_p[0]*imu->Gyro_DHPF_B[1]	-	imu->Gyro_dPhi_f_p[1]*imu->Gyro_DHPF_B[2])
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 8004b86:	edd3 6a00 	vldr	s13, [r3]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8004b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8004b9e:	edd3 6a00 	vldr	s13, [r3]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	edd3 7a95 	vldr	s15, [r3, #596]	@ 0x254
 8004ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bac:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Gyro_DHPF_B[0];
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	ed93 7a93 	vldr	s14, [r3, #588]	@ 0x24c
 8004bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Gyro_dPhi_f=	(imu->Gyro_dPhi*imu->Gyro_DHPF_A[0] +	imu->Gyro_dPhi_p[0]*imu->Gyro_DHPF_A[1]	+ imu->Gyro_dPhi_p[1]*imu->Gyro_DHPF_A[2]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c

	imu->Gyro_dTheta_f=	(imu->Gyro_dTheta*imu->Gyro_DHPF_A[0] +	imu->Gyro_dTheta_p[0]*imu->Gyro_DHPF_A[1]+imu->Gyro_dTheta_p[1]*imu->Gyro_DHPF_A[2]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	ed93 7a51 	vldr	s14, [r3, #324]	@ 0x144
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	edd3 7a8f 	vldr	s15, [r3, #572]	@ 0x23c
 8004bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 8004bd6:	edd3 6a00 	vldr	s13, [r3]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	edd3 7a90 	vldr	s15, [r3, #576]	@ 0x240
 8004be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 8004bee:	edd3 6a00 	vldr	s13, [r3]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 8004bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
					    -imu->Gyro_dTheta_f_p[0]*imu->Gyro_DHPF_B[1]-	imu->Gyro_dTheta_f_p[1]*imu->Gyro_DHPF_B[2])
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8004c06:	edd3 6a00 	vldr	s13, [r3]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8004c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f203 5354 	addw	r3, r3, #1364	@ 0x554
 8004c1e:	edd3 6a00 	vldr	s13, [r3]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	edd3 7a95 	vldr	s15, [r3, #596]	@ 0x254
 8004c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c2c:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Gyro_DHPF_B[0];
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	ed93 7a93 	vldr	s14, [r3, #588]	@ 0x24c
 8004c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Gyro_dTheta_f=	(imu->Gyro_dTheta*imu->Gyro_DHPF_A[0] +	imu->Gyro_dTheta_p[0]*imu->Gyro_DHPF_A[1]+imu->Gyro_dTheta_p[1]*imu->Gyro_DHPF_A[2]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148

	imu->Gyro_dGama_f=	(imu->Gyro_dGama*imu->Gyro_DHPF_A[0] +	imu->Gyro_dGama_p[0]*imu->Gyro_DHPF_A[1] +imu->Gyro_dGama_p[1]*imu->Gyro_DHPF_A[2]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	edd3 7a8f 	vldr	s15, [r3, #572]	@ 0x23c
 8004c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8004c56:	edd3 6a00 	vldr	s13, [r3]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	edd3 7a90 	vldr	s15, [r3, #576]	@ 0x240
 8004c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 8004c6e:	edd3 6a00 	vldr	s13, [r3]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 8004c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
					    -imu->Gyro_dGama_f_p[0]*imu->Gyro_DHPF_B[1]	-	imu->Gyro_dGama_f_p[1]*imu->Gyro_DHPF_B[2])
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 8004c86:	edd3 6a00 	vldr	s13, [r3]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8004c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8004c9e:	edd3 6a00 	vldr	s13, [r3]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	edd3 7a95 	vldr	s15, [r3, #596]	@ 0x254
 8004ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cac:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Gyro_DHPF_B[0];
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	ed93 7a93 	vldr	s14, [r3, #588]	@ 0x24c
 8004cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Gyro_dGama_f=	(imu->Gyro_dGama*imu->Gyro_DHPF_A[0] +	imu->Gyro_dGama_p[0]*imu->Gyro_DHPF_A[1] +imu->Gyro_dGama_p[1]*imu->Gyro_DHPF_A[2]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154

	imu->Gyro_dPhi_f=imu->Gyro_dPhi;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
	imu->Gyro_dTheta_f=imu->Gyro_dTheta;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	imu->Gyro_dGama_f=imu->Gyro_dGama;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154

//	imu->Gyro_Phi+=imu->Gyro_dPhi_f;
//	imu->Gyro_Theta+=imu->Gyro_dTheta_f;
//	imu->Gyro_Gama+=imu->Gyro_dGama_f;

	imu->Gyro_Phi=imu->Phi_CF			+	imu->Gyro_dPhi_f;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	ed93 7a9d 	vldr	s14, [r3, #628]	@ 0x274
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	edd3 7a4f 	vldr	s15, [r3, #316]	@ 0x13c
 8004cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
	imu->Gyro_Theta=imu->Theta_CF		+	imu->Gyro_dTheta_f;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	ed93 7a9e 	vldr	s14, [r3, #632]	@ 0x278
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 8004d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
	imu->Gyro_Gama=imu->Gyro_Gama		+	imu->Gyro_dGama_f;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	ed93 7a53 	vldr	s14, [r3, #332]	@ 0x14c
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	edd3 7a55 	vldr	s15, [r3, #340]	@ 0x154
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	edc3 7a53 	vstr	s15, [r3, #332]	@ 0x14c

	/********************************************************************/
	/* 			Filtro complementar para estimativa de atitude			*/
	/********************************************************************/

	imu->Phi_CF	 =	imu->CF_alpha*imu->Acc_Phi 		+ 	(1-imu->CF_alpha)*imu->Gyro_Phi;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8004d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 8004d3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8004d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	edc3 7a9d 	vstr	s15, [r3, #628]	@ 0x274
	imu->Theta_CF=	imu->CF_alpha*imu->Acc_Theta 	+ 	(1-imu->CF_alpha)*imu->Gyro_Theta;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8004d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 8004d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	edc3 7a9e 	vstr	s15, [r3, #632]	@ 0x278
	imu->Gama_CF =	imu->CF_alpha*imu->Mag_Gama 	+ 	(1-imu->CF_alpha)*imu->Gyro_Gama;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	edd3 7a4c 	vldr	s15, [r3, #304]	@ 0x130
 8004d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 8004da0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004da4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004da8:	e00a      	b.n	8004dc0 <imu_get_euler_angles+0xb38>
 8004daa:	bf00      	nop
 8004dac:	f3af 8000 	nop.w
 8004db0:	54442d18 	.word	0x54442d18
 8004db4:	400921fb 	.word	0x400921fb
 8004db8:	447a0000 	.word	0x447a0000
 8004dbc:	43340000 	.word	0x43340000
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	edd3 7a53 	vldr	s15, [r3, #332]	@ 0x14c
 8004dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	edc3 7a9f 	vstr	s15, [r3, #636]	@ 0x27c
	/********************************************************************/

	/* Correção */

	//Em Phi
    imu->x_Phi_SO_c[0] = imu->x_Phi_SO_p[0] + imu->Ke[0]*(imu->Acc_Phi-(imu->Cd[0]*imu->x_Phi_SO_p[0]+imu->Cd[1]*imu->x_Phi_SO_p[1]));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	ed93 7ab1 	vldr	s14, [r3, #708]	@ 0x2c4
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	edd3 6aaa 	vldr	s13, [r3, #680]	@ 0x2a8
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	ed93 6a45 	vldr	s12, [r3, #276]	@ 0x114
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	edd3 7ab1 	vldr	s15, [r3, #708]	@ 0x2c4
 8004df2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	edd3 7ab2 	vldr	s15, [r3, #712]	@ 0x2c8
 8004e02:	ee65 7a27 	vmul.f32	s15, s10, s15
 8004e06:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004e0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	edc3 7aad 	vstr	s15, [r3, #692]	@ 0x2b4
    imu->x_Phi_SO_c[1] = imu->x_Phi_SO_p[1] + imu->Ke[1]*(imu->Acc_Phi-(imu->Cd[0]*imu->x_Phi_SO_p[0]+imu->Cd[1]*imu->x_Phi_SO_p[1]));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	ed93 7ab2 	vldr	s14, [r3, #712]	@ 0x2c8
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	edd3 6aab 	vldr	s13, [r3, #684]	@ 0x2ac
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	ed93 6a45 	vldr	s12, [r3, #276]	@ 0x114
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	edd3 7ab1 	vldr	s15, [r3, #708]	@ 0x2c4
 8004e3a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	edd3 7ab2 	vldr	s15, [r3, #712]	@ 0x2c8
 8004e4a:	ee65 7a27 	vmul.f32	s15, s10, s15
 8004e4e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004e52:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	edc3 7aae 	vstr	s15, [r3, #696]	@ 0x2b8

    imu->Phi_SO=imu->x_Phi_SO_c[0];
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8d3 22b4 	ldr.w	r2, [r3, #692]	@ 0x2b4
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0

	//Em Theta
    imu->x_Theta_SO_c[0] = imu->x_Theta_SO_p[0] + imu->Ke[0]*(imu->Acc_Theta-(imu->Cd[0]*imu->x_Theta_SO_p[0]+imu->Cd[1]*imu->x_Theta_SO_p[1]));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	ed93 7ab8 	vldr	s14, [r3, #736]	@ 0x2e0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	edd3 6aaa 	vldr	s13, [r3, #680]	@ 0x2a8
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	ed93 6a48 	vldr	s12, [r3, #288]	@ 0x120
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	edd3 7ab8 	vldr	s15, [r3, #736]	@ 0x2e0
 8004e8e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	edd3 7ab9 	vldr	s15, [r3, #740]	@ 0x2e4
 8004e9e:	ee65 7a27 	vmul.f32	s15, s10, s15
 8004ea2:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004ea6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	edc3 7ab4 	vstr	s15, [r3, #720]	@ 0x2d0
    imu->x_Theta_SO_c[1] = imu->x_Theta_SO_p[1] + imu->Ke[1]*(imu->Acc_Theta-(imu->Cd[0]*imu->x_Theta_SO_p[0]+imu->Cd[1]*imu->x_Theta_SO_p[1]));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	ed93 7ab9 	vldr	s14, [r3, #740]	@ 0x2e4
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	edd3 6aab 	vldr	s13, [r3, #684]	@ 0x2ac
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	ed93 6a48 	vldr	s12, [r3, #288]	@ 0x120
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	edd3 7ab8 	vldr	s15, [r3, #736]	@ 0x2e0
 8004ed6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	edd3 7ab9 	vldr	s15, [r3, #740]	@ 0x2e4
 8004ee6:	ee65 7a27 	vmul.f32	s15, s10, s15
 8004eea:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004eee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	edc3 7ab5 	vstr	s15, [r3, #724]	@ 0x2d4

    imu->Theta_SO=imu->x_Theta_SO_c[0];
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

	//Em Gama
    imu->x_Gama_SO_c[0] = imu->x_Gama_SO_p[0] + imu->Ke[0]*(imu->Mag_Gama-(imu->Cd[0]*imu->x_Gama_SO_p[0]+imu->Cd[1]*imu->x_Gama_SO_p[1]));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	edd3 6aaa 	vldr	s13, [r3, #680]	@ 0x2a8
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	ed93 6a4c 	vldr	s12, [r3, #304]	@ 0x130
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8004f2a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8004f3a:	ee65 7a27 	vmul.f32	s15, s10, s15
 8004f3e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004f42:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	edc3 7abb 	vstr	s15, [r3, #748]	@ 0x2ec
    imu->x_Gama_SO_c[1] = imu->x_Gama_SO_p[1] + imu->Ke[1]*(imu->Mag_Gama-(imu->Cd[0]*imu->x_Gama_SO_p[0]+imu->Cd[1]*imu->x_Gama_SO_p[1]));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	edd3 6aab 	vldr	s13, [r3, #684]	@ 0x2ac
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	ed93 6a4c 	vldr	s12, [r3, #304]	@ 0x130
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8004f72:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8004f82:	ee65 7a27 	vmul.f32	s15, s10, s15
 8004f86:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004f8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	edc3 7abc 	vstr	s15, [r3, #752]	@ 0x2f0

    imu->Gama_SO=imu->x_Gama_SO_c[0];
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

	/* Previsão */

	//Em Phi
    imu->x_Phi_SO_p[0] = imu->Ad[0][0]*imu->x_Phi_SO_c_past[0] + imu->Ad[0][1]*imu->x_Phi_SO_c_past[1] + imu->Gyro_dPhi_f;//imu->Bd[0]*imu->Gyro_Phi;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	edd3 7aaf 	vldr	s15, [r3, #700]	@ 0x2bc
 8004fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	edd3 7ab0 	vldr	s15, [r3, #704]	@ 0x2c0
 8004fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	edd3 7a4f 	vldr	s15, [r3, #316]	@ 0x13c
 8004fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	edc3 7ab1 	vstr	s15, [r3, #708]	@ 0x2c4
    imu->x_Phi_SO_p[1] = imu->Ad[1][0]*imu->x_Phi_SO_c_past[0] + imu->Ad[1][1]*imu->x_Phi_SO_c_past[1] + imu->Bd[1]*imu->Gyro_Phi;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	edd3 7aaf 	vldr	s15, [r3, #700]	@ 0x2bc
 8004fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	edd3 7ab0 	vldr	s15, [r3, #704]	@ 0x2c0
 8004ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	edd3 6aa5 	vldr	s13, [r3, #660]	@ 0x294
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 800500c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	edc3 7ab2 	vstr	s15, [r3, #712]	@ 0x2c8

	//Em Theta
    imu->x_Theta_SO_p[0] = imu->Ad[0][0]*imu->x_Theta_SO_c_past[0] + imu->Ad[0][1]*imu->x_Theta_SO_c_past[1] + imu->Gyro_dTheta_f;//imu->Bd[0]*imu->Gyro_Theta;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	edd3 7ab6 	vldr	s15, [r3, #728]	@ 0x2d8
 8005026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	edd3 7ab7 	vldr	s15, [r3, #732]	@ 0x2dc
 8005036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800503a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 8005044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	edc3 7ab8 	vstr	s15, [r3, #736]	@ 0x2e0
    imu->x_Theta_SO_p[1] = imu->Ad[1][0]*imu->x_Theta_SO_c_past[0] + imu->Ad[1][1]*imu->x_Theta_SO_c_past[1] + imu->Bd[1]*imu->Gyro_Theta;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	edd3 7ab6 	vldr	s15, [r3, #728]	@ 0x2d8
 800505a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	edd3 7ab7 	vldr	s15, [r3, #732]	@ 0x2dc
 800506a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800506e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	edd3 6aa5 	vldr	s13, [r3, #660]	@ 0x294
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 800507e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	edc3 7ab9 	vstr	s15, [r3, #740]	@ 0x2e4

	//Em Gama
    imu->x_Gama_SO_p[0] = imu->Ad[0][0]*imu->x_Gama_SO_c_past[0] + imu->Ad[0][1]*imu->x_Gama_SO_c_past[1] + imu->Gyro_dGama_f;//imu->Bd[0]*imu->Gyro_Gama;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	edd3 7abd 	vldr	s15, [r3, #756]	@ 0x2f4
 8005098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 80050a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	edd3 7a55 	vldr	s15, [r3, #340]	@ 0x154
 80050b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	edc3 7abf 	vstr	s15, [r3, #764]	@ 0x2fc
    imu->x_Gama_SO_p[1] = imu->Ad[1][0]*imu->x_Gama_SO_c_past[0] + imu->Ad[1][1]*imu->x_Gama_SO_c_past[1] + imu->Bd[1]*imu->Gyro_Gama;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	edd3 7abd 	vldr	s15, [r3, #756]	@ 0x2f4
 80050cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 80050dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	edd3 6aa5 	vldr	s13, [r3, #660]	@ 0x294
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	edd3 7a53 	vldr	s15, [r3, #332]	@ 0x14c
 80050f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	edc3 7ac0 	vstr	s15, [r3, #768]	@ 0x300

	/* Observador de Estados */
	imu->x_Phi_SO_c_past[0]=imu->x_Phi_SO_c[0];
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8d3 22b4 	ldr.w	r2, [r3, #692]	@ 0x2b4
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
	imu->x_Phi_SO_c_past[1]=imu->x_Phi_SO_c[1];
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8d3 22b8 	ldr.w	r2, [r3, #696]	@ 0x2b8
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

	imu->x_Theta_SO_c_past[0]=imu->x_Theta_SO_c[0];
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
	imu->x_Theta_SO_c_past[1]=imu->x_Theta_SO_c[1];
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

	imu->x_Gama_SO_c_past[0]=imu->x_Gama_SO_c[0];
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
	imu->x_Gama_SO_c_past[1]=imu->x_Gama_SO_c[1];
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8d3 22f0 	ldr.w	r2, [r3, #752]	@ 0x2f0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	/********************************************************************/

	/* Correção */

	//Em Phi
    imu->K_KF_Phi[0] = (imu->P_minus_Phi[0][0] * imu->Cd[0] + imu->P_minus_Phi[0][1] *imu->Cd[1])/(
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	edd3 6ac4 	vldr	s13, [r3, #784]	@ 0x310
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005166:	ee77 6a27 	vadd.f32	s13, s14, s15
    		(imu->Cd[0] * imu->P_minus_Phi[0][0]+imu->Cd[1] * imu->P_minus_Phi[1][0])*imu->Cd[0] +
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	ed93 7aa6 	vldr	s14, [r3, #664]	@ 0x298
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8005176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	ed93 6aa7 	vldr	s12, [r3, #668]	@ 0x29c
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	edd3 7ac5 	vldr	s15, [r3, #788]	@ 0x314
 8005186:	ee66 7a27 	vmul.f32	s15, s12, s15
 800518a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005194:	ee27 7a27 	vmul.f32	s14, s14, s15
			(imu->Cd[0] * imu->P_minus_Phi[0][1]+imu->Cd[1] * imu->P_minus_Phi[1][1])*imu->Cd[1] +
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	ed93 6aa6 	vldr	s12, [r3, #664]	@ 0x298
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	edd3 7ac4 	vldr	s15, [r3, #784]	@ 0x310
 80051a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	edd3 5aa7 	vldr	s11, [r3, #668]	@ 0x29c
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	edd3 7ac6 	vldr	s15, [r3, #792]	@ 0x318
 80051b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80051b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80051c2:	ee66 7a27 	vmul.f32	s15, s12, s15
    		(imu->Cd[0] * imu->P_minus_Phi[0][0]+imu->Cd[1] * imu->P_minus_Phi[1][0])*imu->Cd[0] +
 80051c6:	ee37 7a27 	vadd.f32	s14, s14, s15
			 imu->R_v_Phi );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
			(imu->Cd[0] * imu->P_minus_Phi[0][1]+imu->Cd[1] * imu->P_minus_Phi[1][1])*imu->Cd[1] +
 80051d0:	ee37 7a27 	vadd.f32	s14, s14, s15
    imu->K_KF_Phi[0] = (imu->P_minus_Phi[0][0] * imu->Cd[0] + imu->P_minus_Phi[0][1] *imu->Cd[1])/(
 80051d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	edc3 7ac1 	vstr	s15, [r3, #772]	@ 0x304
    imu->K_KF_Phi[1] = (imu->P_minus_Phi[1][0] * imu->Cd[0] + imu->P_minus_Phi[1][1] *imu->Cd[1])/(
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 80051ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	edd3 6ac6 	vldr	s13, [r3, #792]	@ 0x318
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80051fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051fe:	ee77 6a27 	vadd.f32	s13, s14, s15
    		(imu->Cd[0] * imu->P_minus_Phi[0][0]+imu->Cd[1] * imu->P_minus_Phi[1][0])*imu->Cd[0] +
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	ed93 7aa6 	vldr	s14, [r3, #664]	@ 0x298
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 800520e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	ed93 6aa7 	vldr	s12, [r3, #668]	@ 0x29c
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	edd3 7ac5 	vldr	s15, [r3, #788]	@ 0x314
 800521e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 800522c:	ee27 7a27 	vmul.f32	s14, s14, s15
			(imu->Cd[0] * imu->P_minus_Phi[0][1]+imu->Cd[1] * imu->P_minus_Phi[1][1])*imu->Cd[1] +
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	ed93 6aa6 	vldr	s12, [r3, #664]	@ 0x298
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	edd3 7ac4 	vldr	s15, [r3, #784]	@ 0x310
 800523c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	edd3 5aa7 	vldr	s11, [r3, #668]	@ 0x29c
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	edd3 7ac6 	vldr	s15, [r3, #792]	@ 0x318
 800524c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005250:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800525a:	ee66 7a27 	vmul.f32	s15, s12, s15
    		(imu->Cd[0] * imu->P_minus_Phi[0][0]+imu->Cd[1] * imu->P_minus_Phi[1][0])*imu->Cd[0] +
 800525e:	ee37 7a27 	vadd.f32	s14, s14, s15
			 imu->R_v_Phi );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
			(imu->Cd[0] * imu->P_minus_Phi[0][1]+imu->Cd[1] * imu->P_minus_Phi[1][1])*imu->Cd[1] +
 8005268:	ee37 7a27 	vadd.f32	s14, s14, s15
    imu->K_KF_Phi[1] = (imu->P_minus_Phi[1][0] * imu->Cd[0] + imu->P_minus_Phi[1][1] *imu->Cd[1])/(
 800526c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	edc3 7ac2 	vstr	s15, [r3, #776]	@ 0x308


    imu->x_Phi_KF_c[0] = imu->x_Phi_KF_p[0] + imu->K_KF_Phi[0]*(imu->Acc_Phi-(imu->Cd[0]*imu->x_Phi_KF_p[0]+imu->Cd[1]*imu->x_Phi_KF_p[1]));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	ed93 7aea 	vldr	s14, [r3, #936]	@ 0x3a8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	edd3 6ac1 	vldr	s13, [r3, #772]	@ 0x304
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	ed93 6a45 	vldr	s12, [r3, #276]	@ 0x114
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	edd3 7aea 	vldr	s15, [r3, #936]	@ 0x3a8
 8005294:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	edd3 7aeb 	vldr	s15, [r3, #940]	@ 0x3ac
 80052a4:	ee65 7a27 	vmul.f32	s15, s10, s15
 80052a8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80052ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80052b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	edc3 7ae6 	vstr	s15, [r3, #920]	@ 0x398
    imu->x_Phi_KF_c[1] = imu->x_Phi_KF_p[1] + imu->K_KF_Phi[1]*(imu->Acc_Phi-(imu->Cd[0]*imu->x_Phi_KF_p[0]+imu->Cd[1]*imu->x_Phi_KF_p[1]));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	ed93 7aeb 	vldr	s14, [r3, #940]	@ 0x3ac
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	ed93 6a45 	vldr	s12, [r3, #276]	@ 0x114
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	edd3 7aea 	vldr	s15, [r3, #936]	@ 0x3a8
 80052dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	edd3 7aeb 	vldr	s15, [r3, #940]	@ 0x3ac
 80052ec:	ee65 7a27 	vmul.f32	s15, s10, s15
 80052f0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80052f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80052f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	edc3 7ae7 	vstr	s15, [r3, #924]	@ 0x39c

    imu->Phi_KF=imu->x_Phi_KF_c[0];
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8d3 2398 	ldr.w	r2, [r3, #920]	@ 0x398
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

	//Em Theta
    imu->K_KF_Theta[0] = (imu->P_minus_Theta[0][0] * imu->Cd[0] + imu->P_minus_Theta[0][1] *imu->Cd[1])/(
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	ed93 7acf 	vldr	s14, [r3, #828]	@ 0x33c
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 800531e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	edd3 6ad0 	vldr	s13, [r3, #832]	@ 0x340
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800532e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005332:	ee77 6a27 	vadd.f32	s13, s14, s15
    		(imu->Cd[0] * imu->P_minus_Theta[0][0]+imu->Cd[1] * imu->P_minus_Theta[1][0])*imu->Cd[0] +
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	ed93 7aa6 	vldr	s14, [r3, #664]	@ 0x298
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	edd3 7acf 	vldr	s15, [r3, #828]	@ 0x33c
 8005342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	ed93 6aa7 	vldr	s12, [r3, #668]	@ 0x29c
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 8005352:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005360:	ee27 7a27 	vmul.f32	s14, s14, s15
			(imu->Cd[0] * imu->P_minus_Theta[0][1]+imu->Cd[1] * imu->P_minus_Theta[1][1])*imu->Cd[1] +
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	ed93 6aa6 	vldr	s12, [r3, #664]	@ 0x298
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	edd3 7ad0 	vldr	s15, [r3, #832]	@ 0x340
 8005370:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	edd3 5aa7 	vldr	s11, [r3, #668]	@ 0x29c
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8005380:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005384:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800538e:	ee66 7a27 	vmul.f32	s15, s12, s15
    		(imu->Cd[0] * imu->P_minus_Theta[0][0]+imu->Cd[1] * imu->P_minus_Theta[1][0])*imu->Cd[0] +
 8005392:	ee37 7a27 	vadd.f32	s14, s14, s15
			 imu->R_v_Theta );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	edd3 7ad8 	vldr	s15, [r3, #864]	@ 0x360
			(imu->Cd[0] * imu->P_minus_Theta[0][1]+imu->Cd[1] * imu->P_minus_Theta[1][1])*imu->Cd[1] +
 800539c:	ee37 7a27 	vadd.f32	s14, s14, s15
    imu->K_KF_Theta[0] = (imu->P_minus_Theta[0][0] * imu->Cd[0] + imu->P_minus_Theta[0][1] *imu->Cd[1])/(
 80053a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	edc3 7acd 	vstr	s15, [r3, #820]	@ 0x334
    imu->K_KF_Theta[1] = (imu->P_minus_Theta[1][0] * imu->Cd[0] + imu->P_minus_Theta[1][1] *imu->Cd[1])/(
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	ed93 7ad1 	vldr	s14, [r3, #836]	@ 0x344
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 80053b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	edd3 6ad2 	vldr	s13, [r3, #840]	@ 0x348
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80053c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ca:	ee77 6a27 	vadd.f32	s13, s14, s15
    		(imu->Cd[0] * imu->P_minus_Theta[0][0]+imu->Cd[1] * imu->P_minus_Theta[1][0])*imu->Cd[0] +
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	ed93 7aa6 	vldr	s14, [r3, #664]	@ 0x298
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	edd3 7acf 	vldr	s15, [r3, #828]	@ 0x33c
 80053da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	ed93 6aa7 	vldr	s12, [r3, #668]	@ 0x29c
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 80053ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80053ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 80053f8:	ee27 7a27 	vmul.f32	s14, s14, s15
			(imu->Cd[0] * imu->P_minus_Theta[0][1]+imu->Cd[1] * imu->P_minus_Theta[1][1])*imu->Cd[1] +
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	ed93 6aa6 	vldr	s12, [r3, #664]	@ 0x298
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	edd3 7ad0 	vldr	s15, [r3, #832]	@ 0x340
 8005408:	ee26 6a27 	vmul.f32	s12, s12, s15
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	edd3 5aa7 	vldr	s11, [r3, #668]	@ 0x29c
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8005418:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800541c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005426:	ee66 7a27 	vmul.f32	s15, s12, s15
    		(imu->Cd[0] * imu->P_minus_Theta[0][0]+imu->Cd[1] * imu->P_minus_Theta[1][0])*imu->Cd[0] +
 800542a:	ee37 7a27 	vadd.f32	s14, s14, s15
			 imu->R_v_Theta );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	edd3 7ad8 	vldr	s15, [r3, #864]	@ 0x360
			(imu->Cd[0] * imu->P_minus_Theta[0][1]+imu->Cd[1] * imu->P_minus_Theta[1][1])*imu->Cd[1] +
 8005434:	ee37 7a27 	vadd.f32	s14, s14, s15
    imu->K_KF_Theta[1] = (imu->P_minus_Theta[1][0] * imu->Cd[0] + imu->P_minus_Theta[1][1] *imu->Cd[1])/(
 8005438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	edc3 7ace 	vstr	s15, [r3, #824]	@ 0x338

    imu->x_Theta_KF_c[0] = imu->x_Theta_KF_p[0] + imu->K_KF_Theta[0]*(imu->Acc_Theta-(imu->Cd[0]*imu->x_Theta_KF_p[0]+imu->Cd[1]*imu->x_Theta_KF_p[1]));
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	ed93 7af1 	vldr	s14, [r3, #964]	@ 0x3c4
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	ed93 6a48 	vldr	s12, [r3, #288]	@ 0x120
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	edd3 7af1 	vldr	s15, [r3, #964]	@ 0x3c4
 8005460:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	edd3 7af2 	vldr	s15, [r3, #968]	@ 0x3c8
 8005470:	ee65 7a27 	vmul.f32	s15, s10, s15
 8005474:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005478:	ee76 7a67 	vsub.f32	s15, s12, s15
 800547c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	edc3 7aed 	vstr	s15, [r3, #948]	@ 0x3b4
    imu->x_Theta_KF_c[1] = imu->x_Theta_KF_p[1] + imu->K_KF_Theta[1]*(imu->Acc_Theta-(imu->Cd[0]*imu->x_Theta_KF_p[0]+imu->Cd[1]*imu->x_Theta_KF_p[1]));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	ed93 7af2 	vldr	s14, [r3, #968]	@ 0x3c8
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	edd3 6ace 	vldr	s13, [r3, #824]	@ 0x338
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	ed93 6a48 	vldr	s12, [r3, #288]	@ 0x120
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	edd3 7af1 	vldr	s15, [r3, #964]	@ 0x3c4
 80054a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	edd3 7af2 	vldr	s15, [r3, #968]	@ 0x3c8
 80054b8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80054bc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80054c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80054c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	edc3 7aee 	vstr	s15, [r3, #952]	@ 0x3b8

    imu->Theta_KF=imu->x_Theta_KF_c[0];
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0

	//Em Gama
    imu->K_KF_Gama[0] = (imu->P_minus_Gama[0][0] * imu->Cd[0] + imu->P_minus_Gama[0][1] *imu->Cd[1])/(
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	ed93 7adb 	vldr	s14, [r3, #876]	@ 0x36c
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 80054ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	edd3 6adc 	vldr	s13, [r3, #880]	@ 0x370
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fe:	ee77 6a27 	vadd.f32	s13, s14, s15
    		(imu->Cd[0] * imu->P_minus_Gama[0][0]+imu->Cd[1] * imu->P_minus_Gama[1][0])*imu->Cd[0] +
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	ed93 7aa6 	vldr	s14, [r3, #664]	@ 0x298
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	edd3 7adb 	vldr	s15, [r3, #876]	@ 0x36c
 800550e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	ed93 6aa7 	vldr	s12, [r3, #668]	@ 0x29c
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	edd3 7add 	vldr	s15, [r3, #884]	@ 0x374
 800551e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005522:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 800552c:	ee27 7a27 	vmul.f32	s14, s14, s15
			(imu->Cd[0] * imu->P_minus_Gama[0][1]+imu->Cd[1] * imu->P_minus_Gama[1][1])*imu->Cd[1] +
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	ed93 6aa6 	vldr	s12, [r3, #664]	@ 0x298
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	edd3 7adc 	vldr	s15, [r3, #880]	@ 0x370
 800553c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	edd3 5aa7 	vldr	s11, [r3, #668]	@ 0x29c
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	edd3 7ade 	vldr	s15, [r3, #888]	@ 0x378
 800554c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005550:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800555a:	ee66 7a27 	vmul.f32	s15, s12, s15
    		(imu->Cd[0] * imu->P_minus_Gama[0][0]+imu->Cd[1] * imu->P_minus_Gama[1][0])*imu->Cd[0] +
 800555e:	ee37 7a27 	vadd.f32	s14, s14, s15
			imu->R_v_Gama );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	edd3 7ae4 	vldr	s15, [r3, #912]	@ 0x390
			(imu->Cd[0] * imu->P_minus_Gama[0][1]+imu->Cd[1] * imu->P_minus_Gama[1][1])*imu->Cd[1] +
 8005568:	ee37 7a27 	vadd.f32	s14, s14, s15
    imu->K_KF_Gama[0] = (imu->P_minus_Gama[0][0] * imu->Cd[0] + imu->P_minus_Gama[0][1] *imu->Cd[1])/(
 800556c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	edc3 7ad9 	vstr	s15, [r3, #868]	@ 0x364
    imu->K_KF_Gama[1] = (imu->P_minus_Gama[1][0] * imu->Cd[0] + imu->P_minus_Gama[1][1] *imu->Cd[1])/(
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	ed93 7add 	vldr	s14, [r3, #884]	@ 0x374
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	edd3 6ade 	vldr	s13, [r3, #888]	@ 0x378
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005596:	ee77 6a27 	vadd.f32	s13, s14, s15
    		(imu->Cd[0] * imu->P_minus_Gama[0][0]+imu->Cd[1] * imu->P_minus_Gama[1][0])*imu->Cd[0] +
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	ed93 7aa6 	vldr	s14, [r3, #664]	@ 0x298
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	edd3 7adb 	vldr	s15, [r3, #876]	@ 0x36c
 80055a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	ed93 6aa7 	vldr	s12, [r3, #668]	@ 0x29c
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	edd3 7add 	vldr	s15, [r3, #884]	@ 0x374
 80055b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80055ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 80055c4:	ee27 7a27 	vmul.f32	s14, s14, s15
			(imu->Cd[0] * imu->P_minus_Gama[0][1]+imu->Cd[1] * imu->P_minus_Gama[1][1])*imu->Cd[1] +
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	ed93 6aa6 	vldr	s12, [r3, #664]	@ 0x298
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	edd3 7adc 	vldr	s15, [r3, #880]	@ 0x370
 80055d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	edd3 5aa7 	vldr	s11, [r3, #668]	@ 0x29c
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	edd3 7ade 	vldr	s15, [r3, #888]	@ 0x378
 80055e4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80055e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80055f2:	ee66 7a27 	vmul.f32	s15, s12, s15
    		(imu->Cd[0] * imu->P_minus_Gama[0][0]+imu->Cd[1] * imu->P_minus_Gama[1][0])*imu->Cd[0] +
 80055f6:	ee37 7a27 	vadd.f32	s14, s14, s15
			imu->R_v_Gama );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	edd3 7ae4 	vldr	s15, [r3, #912]	@ 0x390
			(imu->Cd[0] * imu->P_minus_Gama[0][1]+imu->Cd[1] * imu->P_minus_Gama[1][1])*imu->Cd[1] +
 8005600:	ee37 7a27 	vadd.f32	s14, s14, s15
    imu->K_KF_Gama[1] = (imu->P_minus_Gama[1][0] * imu->Cd[0] + imu->P_minus_Gama[1][1] *imu->Cd[1])/(
 8005604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	edc3 7ada 	vstr	s15, [r3, #872]	@ 0x368

    imu->x_Gama_KF_c[0] = imu->x_Gama_KF_p[0] + imu->K_KF_Gama[0]*(imu->Mag_Gama-(imu->Cd[0]*imu->x_Gama_KF_p[0]+imu->Cd[1]*imu->x_Gama_KF_p[1]));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	ed93 7af8 	vldr	s14, [r3, #992]	@ 0x3e0
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	edd3 6ad9 	vldr	s13, [r3, #868]	@ 0x364
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	ed93 6a4c 	vldr	s12, [r3, #304]	@ 0x130
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	edd3 7af8 	vldr	s15, [r3, #992]	@ 0x3e0
 800562c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 800563c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8005640:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005644:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800564c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	edc3 7af4 	vstr	s15, [r3, #976]	@ 0x3d0
    imu->x_Gama_KF_c[1] = imu->x_Gama_KF_p[1] + imu->K_KF_Gama[1]*(imu->Mag_Gama-(imu->Cd[0]*imu->x_Gama_KF_p[0]+imu->Cd[1]*imu->x_Gama_KF_p[1]));
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	ed93 7af9 	vldr	s14, [r3, #996]	@ 0x3e4
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	edd3 6ada 	vldr	s13, [r3, #872]	@ 0x368
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	ed93 6a4c 	vldr	s12, [r3, #304]	@ 0x130
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	edd3 5aa6 	vldr	s11, [r3, #664]	@ 0x298
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	edd3 7af8 	vldr	s15, [r3, #992]	@ 0x3e0
 8005674:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	ed93 5aa7 	vldr	s10, [r3, #668]	@ 0x29c
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8005684:	ee65 7a27 	vmul.f32	s15, s10, s15
 8005688:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800568c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	edc3 7af5 	vstr	s15, [r3, #980]	@ 0x3d4

    imu->Gama_KF=imu->x_Gama_KF_c[0];
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 23d0 	ldr.w	r2, [r3, #976]	@ 0x3d0
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc

	/* Propagação */

	//Em Phi
    imu->P_plus_Phi[0][0] = (1-imu->K_KF_Phi[0]*imu->Cd[0])*imu->P_minus_Phi[0][0] - imu->K_KF_Phi[0]*imu->Cd[1]*imu->P_minus_Phi[1][0];
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 80056b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80056c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	edd3 6ac1 	vldr	s13, [r3, #772]	@ 0x304
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80056d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	edd3 7ac5 	vldr	s15, [r3, #788]	@ 0x314
 80056e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	edc3 7ac7 	vstr	s15, [r3, #796]	@ 0x31c
    imu->P_plus_Phi[1][0] = -imu->K_KF_Phi[1]*imu->Cd[0]*imu->P_minus_Phi[0][0] + (1-imu->K_KF_Phi[1]*imu->Cd[1])*imu->P_minus_Phi[1][0];
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80056f6:	eeb1 7a67 	vneg.f32	s14, s15
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 800570a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800571a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005722:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	edd3 7ac5 	vldr	s15, [r3, #788]	@ 0x314
 800572c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	edc3 7ac9 	vstr	s15, [r3, #804]	@ 0x324
    imu->P_plus_Phi[0][1] = (1-imu->K_KF_Phi[0]*imu->Cd[0])*imu->P_minus_Phi[0][1] - imu->K_KF_Phi[0]*imu->Cd[1]*imu->P_minus_Phi[1][1];
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800574e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	edd3 7ac4 	vldr	s15, [r3, #784]	@ 0x310
 8005758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	edd3 6ac1 	vldr	s13, [r3, #772]	@ 0x304
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005768:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	edd3 7ac6 	vldr	s15, [r3, #792]	@ 0x318
 8005772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	edc3 7ac8 	vstr	s15, [r3, #800]	@ 0x320
    imu->P_plus_Phi[1][1] = -imu->K_KF_Phi[1]*imu->Cd[0]*imu->P_minus_Phi[0][1] + (1-imu->K_KF_Phi[1]*imu->Cd[1])*imu->P_minus_Phi[1][1];
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8005786:	eeb1 7a67 	vneg.f32	s14, s15
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	edd3 7ac4 	vldr	s15, [r3, #784]	@ 0x310
 800579a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80057aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	edd3 7ac6 	vldr	s15, [r3, #792]	@ 0x318
 80057bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	edc3 7aca 	vstr	s15, [r3, #808]	@ 0x328

    imu->P_minus_Phi[0][0] = (imu->Ad[0][0]*imu->P_plus_Phi[0][0] + imu->Ad[0][1]*imu->P_plus_Phi[1][0])*imu->Ad[0][0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80057d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 80057e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	edd3 7aa0 	vldr	s15, [r3, #640]	@ 0x280
 80057f4:	ee27 7a27 	vmul.f32	s14, s14, s15
							+(imu->Ad[0][0]*imu->P_plus_Phi[0][1] + imu->Ad[0][1]*imu->P_plus_Phi[1][1])*imu->Ad[0][1]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	edd3 6aa0 	vldr	s13, [r3, #640]	@ 0x280
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8005804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	ed93 6aa1 	vldr	s12, [r3, #644]	@ 0x284
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 8005814:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005818:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	edd3 7aa1 	vldr	s15, [r3, #644]	@ 0x284
 8005822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005826:	ee37 7a27 	vadd.f32	s14, s14, s15
					        +imu->R_w_Phi*(imu->Gd[0]*imu->Gd[0]);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	edd3 6acb 	vldr	s13, [r3, #812]	@ 0x32c
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	ed93 6aa8 	vldr	s12, [r3, #672]	@ 0x2a0
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 800583c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005844:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Phi[0][0] = (imu->Ad[0][0]*imu->P_plus_Phi[0][0] + imu->Ad[0][1]*imu->P_plus_Phi[1][0])*imu->Ad[0][0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	edc3 7ac3 	vstr	s15, [r3, #780]	@ 0x30c
    imu->P_minus_Phi[1][0] = (imu->Ad[1][0]*imu->P_plus_Phi[0][0] + imu->Ad[1][1]*imu->P_plus_Phi[1][0])*imu->Ad[0][0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 800585a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 800586a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800586e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	edd3 7aa0 	vldr	s15, [r3, #640]	@ 0x280
 8005878:	ee27 7a27 	vmul.f32	s14, s14, s15
							+(imu->Ad[1][0]*imu->P_plus_Phi[0][1] + imu->Ad[1][1]*imu->P_plus_Phi[1][1])*imu->Ad[0][1]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	edd3 6aa2 	vldr	s13, [r3, #648]	@ 0x288
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8005888:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	ed93 6aa3 	vldr	s12, [r3, #652]	@ 0x28c
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 8005898:	ee66 7a27 	vmul.f32	s15, s12, s15
 800589c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	edd3 7aa1 	vldr	s15, [r3, #644]	@ 0x284
 80058a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058aa:	ee37 7a27 	vadd.f32	s14, s14, s15
					        +imu->R_w_Phi*(imu->Gd[1]*imu->Gd[0]);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	edd3 6acb 	vldr	s13, [r3, #812]	@ 0x32c
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	ed93 6aa9 	vldr	s12, [r3, #676]	@ 0x2a4
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 80058c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058c8:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Phi[1][0] = (imu->Ad[1][0]*imu->P_plus_Phi[0][0] + imu->Ad[1][1]*imu->P_plus_Phi[1][0])*imu->Ad[0][0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	edc3 7ac5 	vstr	s15, [r3, #788]	@ 0x314
    imu->P_minus_Phi[0][1] = (imu->Ad[0][0]*imu->P_plus_Phi[0][0] + imu->Ad[0][1]*imu->P_plus_Phi[1][0])*imu->Ad[1][0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80058de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 80058ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
 80058fc:	ee27 7a27 	vmul.f32	s14, s14, s15
							+(imu->Ad[0][0]*imu->P_plus_Phi[0][1] + imu->Ad[0][1]*imu->P_plus_Phi[1][1])*imu->Ad[1][1]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	edd3 6aa0 	vldr	s13, [r3, #640]	@ 0x280
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 800590c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	ed93 6aa1 	vldr	s12, [r3, #644]	@ 0x284
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 800591c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005920:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 800592a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592e:	ee37 7a27 	vadd.f32	s14, s14, s15
					        +imu->R_w_Phi*(imu->Gd[0]*imu->Gd[1]);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	edd3 6acb 	vldr	s13, [r3, #812]	@ 0x32c
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	ed93 6aa8 	vldr	s12, [r3, #672]	@ 0x2a0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	edd3 7aa9 	vldr	s15, [r3, #676]	@ 0x2a4
 8005944:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594c:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Phi[0][1] = (imu->Ad[0][0]*imu->P_plus_Phi[0][0] + imu->Ad[0][1]*imu->P_plus_Phi[1][0])*imu->Ad[1][0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	edc3 7ac4 	vstr	s15, [r3, #784]	@ 0x310
    imu->P_minus_Phi[1][1] = (imu->Ad[1][0]*imu->P_plus_Phi[0][0] + imu->Ad[1][1]*imu->P_plus_Phi[1][0])*imu->Ad[1][0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8005962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 8005972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005976:	ee37 7a27 	vadd.f32	s14, s14, s15
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
 8005980:	ee27 7a27 	vmul.f32	s14, s14, s15
							+(imu->Ad[1][0]*imu->P_plus_Phi[0][1] + imu->Ad[1][1]*imu->P_plus_Phi[1][1])*imu->Ad[1][1]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	edd3 6aa2 	vldr	s13, [r3, #648]	@ 0x288
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8005990:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	ed93 6aa3 	vldr	s12, [r3, #652]	@ 0x28c
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 80059a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80059a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 80059ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059b2:	ee37 7a27 	vadd.f32	s14, s14, s15
					        +imu->R_w_Phi*(imu->Gd[1]*imu->Gd[1]);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	edd3 6acb 	vldr	s13, [r3, #812]	@ 0x32c
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	ed93 6aa9 	vldr	s12, [r3, #676]	@ 0x2a4
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	edd3 7aa9 	vldr	s15, [r3, #676]	@ 0x2a4
 80059c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80059cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059d0:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Phi[1][1] = (imu->Ad[1][0]*imu->P_plus_Phi[0][0] + imu->Ad[1][1]*imu->P_plus_Phi[1][0])*imu->Ad[1][0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	edc3 7ac6 	vstr	s15, [r3, #792]	@ 0x318

    imu->x_Phi_KF_p[0] = imu->Ad[0][0]*imu->x_Phi_KF_c_past[0] + imu->Ad[0][1]*imu->x_Phi_KF_c_past[1] + imu->Gyro_Phi;//imu->Bd[0]*imu->Gyro_Phi;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	edd3 7ae8 	vldr	s15, [r3, #928]	@ 0x3a0
 80059e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	edd3 7ae9 	vldr	s15, [r3, #932]	@ 0x3a4
 80059f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8005a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	edc3 7aea 	vstr	s15, [r3, #936]	@ 0x3a8
    imu->x_Phi_KF_p[1] = imu->Ad[1][0]*imu->x_Phi_KF_c_past[0] + imu->Ad[1][1]*imu->x_Phi_KF_c_past[1] + imu->Bd[1]*imu->Gyro_Phi;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	edd3 7ae8 	vldr	s15, [r3, #928]	@ 0x3a0
 8005a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	edd3 7ae9 	vldr	s15, [r3, #932]	@ 0x3a4
 8005a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	edd3 6aa5 	vldr	s13, [r3, #660]	@ 0x294
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8005a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	edc3 7aeb 	vstr	s15, [r3, #940]	@ 0x3ac

	//Em Theta
    imu->P_plus_Theta[0][0] = (1-imu->K_KF_Theta[0]*imu->Cd[0])*imu->P_minus_Theta[0][0] - imu->K_KF_Theta[0]*imu->Cd[1]*imu->P_minus_Theta[1][0];
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	edd3 7acf 	vldr	s15, [r3, #828]	@ 0x33c
 8005a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005a7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 8005a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	edc3 7ad3 	vstr	s15, [r3, #844]	@ 0x34c
    imu->P_plus_Theta[1][0] = -imu->K_KF_Theta[1]*imu->Cd[0]*imu->P_minus_Theta[0][0] + (1-imu->K_KF_Theta[1]*imu->Cd[1])*imu->P_minus_Theta[1][0];
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8005a98:	eeb1 7a67 	vneg.f32	s14, s15
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	edd3 7acf 	vldr	s15, [r3, #828]	@ 0x33c
 8005aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	edd3 6ace 	vldr	s13, [r3, #824]	@ 0x338
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ac4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 8005ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	edc3 7ad5 	vstr	s15, [r3, #852]	@ 0x354
    imu->P_plus_Theta[0][1] = (1-imu->K_KF_Theta[0]*imu->Cd[0])*imu->P_minus_Theta[0][1] - imu->K_KF_Theta[0]*imu->Cd[1]*imu->P_minus_Theta[1][1];
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	edd3 7ad0 	vldr	s15, [r3, #832]	@ 0x340
 8005afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005b0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8005b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	edc3 7ad4 	vstr	s15, [r3, #848]	@ 0x350
    imu->P_plus_Theta[1][1] = -imu->K_KF_Theta[1]*imu->Cd[0]*imu->P_minus_Theta[0][1] + (1-imu->K_KF_Theta[1]*imu->Cd[1])*imu->P_minus_Theta[1][1];
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8005b28:	eeb1 7a67 	vneg.f32	s14, s15
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	edd3 7ad0 	vldr	s15, [r3, #832]	@ 0x340
 8005b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	edd3 6ace 	vldr	s13, [r3, #824]	@ 0x338
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8005b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    imu->P_minus_Theta[0][0] = (imu->Ad[0][0]*imu->P_plus_Theta[0][0] + imu->Ad[0][1]*imu->P_plus_Theta[1][0])*imu->Ad[0][0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8005b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	edd3 7ad5 	vldr	s15, [r3, #852]	@ 0x354
 8005b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	edd3 7aa0 	vldr	s15, [r3, #640]	@ 0x280
 8005b96:	ee27 7a27 	vmul.f32	s14, s14, s15
							  +(imu->Ad[0][0]*imu->P_plus_Theta[0][1] + imu->Ad[0][1]*imu->P_plus_Theta[1][1])*imu->Ad[0][1]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	edd3 6aa0 	vldr	s13, [r3, #640]	@ 0x280
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	edd3 7ad4 	vldr	s15, [r3, #848]	@ 0x350
 8005ba6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	ed93 6aa1 	vldr	s12, [r3, #644]	@ 0x284
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	edd3 7ad6 	vldr	s15, [r3, #856]	@ 0x358
 8005bb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005bba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	edd3 7aa1 	vldr	s15, [r3, #644]	@ 0x284
 8005bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
					          +imu->R_w_Theta*(imu->Gd[0]*imu->Gd[0]);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	edd3 6ad7 	vldr	s13, [r3, #860]	@ 0x35c
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	ed93 6aa8 	vldr	s12, [r3, #672]	@ 0x2a0
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 8005bde:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005be6:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Theta[0][0] = (imu->Ad[0][0]*imu->P_plus_Theta[0][0] + imu->Ad[0][1]*imu->P_plus_Theta[1][0])*imu->Ad[0][0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	edc3 7acf 	vstr	s15, [r3, #828]	@ 0x33c
    imu->P_minus_Theta[1][0] = (imu->Ad[1][0]*imu->P_plus_Theta[0][0] + imu->Ad[1][1]*imu->P_plus_Theta[1][0])*imu->Ad[0][0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8005bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	edd3 7ad5 	vldr	s15, [r3, #852]	@ 0x354
 8005c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	edd3 7aa0 	vldr	s15, [r3, #640]	@ 0x280
 8005c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
							  +(imu->Ad[1][0]*imu->P_plus_Theta[0][1] + imu->Ad[1][1]*imu->P_plus_Theta[1][1])*imu->Ad[0][1]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	edd3 6aa2 	vldr	s13, [r3, #648]	@ 0x288
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	edd3 7ad4 	vldr	s15, [r3, #848]	@ 0x350
 8005c2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	ed93 6aa3 	vldr	s12, [r3, #652]	@ 0x28c
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	edd3 7ad6 	vldr	s15, [r3, #856]	@ 0x358
 8005c3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	edd3 7aa1 	vldr	s15, [r3, #644]	@ 0x284
 8005c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
					          +imu->R_w_Theta*(imu->Gd[1]*imu->Gd[0]);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	edd3 6ad7 	vldr	s13, [r3, #860]	@ 0x35c
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	ed93 6aa9 	vldr	s12, [r3, #676]	@ 0x2a4
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 8005c62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Theta[1][0] = (imu->Ad[1][0]*imu->P_plus_Theta[0][0] + imu->Ad[1][1]*imu->P_plus_Theta[1][0])*imu->Ad[0][0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	edc3 7ad1 	vstr	s15, [r3, #836]	@ 0x344
    imu->P_minus_Theta[0][1] = (imu->Ad[0][0]*imu->P_plus_Theta[0][0] + imu->Ad[0][1]*imu->P_plus_Theta[1][0])*imu->Ad[1][0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8005c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	edd3 7ad5 	vldr	s15, [r3, #852]	@ 0x354
 8005c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
 8005c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
						      +(imu->Ad[0][0]*imu->P_plus_Theta[0][1] + imu->Ad[0][1]*imu->P_plus_Theta[1][1])*imu->Ad[1][1]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	edd3 6aa0 	vldr	s13, [r3, #640]	@ 0x280
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	edd3 7ad4 	vldr	s15, [r3, #848]	@ 0x350
 8005cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	ed93 6aa1 	vldr	s12, [r3, #644]	@ 0x284
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	edd3 7ad6 	vldr	s15, [r3, #856]	@ 0x358
 8005cbe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 8005ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
					          +imu->R_w_Theta*(imu->Gd[0]*imu->Gd[1]);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	edd3 6ad7 	vldr	s13, [r3, #860]	@ 0x35c
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	ed93 6aa8 	vldr	s12, [r3, #672]	@ 0x2a0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	edd3 7aa9 	vldr	s15, [r3, #676]	@ 0x2a4
 8005ce6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cee:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Theta[0][1] = (imu->Ad[0][0]*imu->P_plus_Theta[0][0] + imu->Ad[0][1]*imu->P_plus_Theta[1][0])*imu->Ad[1][0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	edc3 7ad0 	vstr	s15, [r3, #832]	@ 0x340
    imu->P_minus_Theta[1][1] = (imu->Ad[1][0]*imu->P_plus_Theta[0][0] + imu->Ad[1][1]*imu->P_plus_Theta[1][0])*imu->Ad[1][0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8005d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	edd3 7ad5 	vldr	s15, [r3, #852]	@ 0x354
 8005d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
 8005d22:	ee27 7a27 	vmul.f32	s14, s14, s15
							  +(imu->Ad[1][0]*imu->P_plus_Theta[0][1] + imu->Ad[1][1]*imu->P_plus_Theta[1][1])*imu->Ad[1][1]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	edd3 6aa2 	vldr	s13, [r3, #648]	@ 0x288
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	edd3 7ad4 	vldr	s15, [r3, #848]	@ 0x350
 8005d32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	ed93 6aa3 	vldr	s12, [r3, #652]	@ 0x28c
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	edd3 7ad6 	vldr	s15, [r3, #856]	@ 0x358
 8005d42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 8005d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d54:	ee37 7a27 	vadd.f32	s14, s14, s15
					          +imu->R_w_Theta*(imu->Gd[1]*imu->Gd[1]);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	edd3 6ad7 	vldr	s13, [r3, #860]	@ 0x35c
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	ed93 6aa9 	vldr	s12, [r3, #676]	@ 0x2a4
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	edd3 7aa9 	vldr	s15, [r3, #676]	@ 0x2a4
 8005d6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d72:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Theta[1][1] = (imu->Ad[1][0]*imu->P_plus_Theta[0][0] + imu->Ad[1][1]*imu->P_plus_Theta[1][0])*imu->Ad[1][0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	edc3 7ad2 	vstr	s15, [r3, #840]	@ 0x348

    imu->x_Theta_KF_p[0] = imu->Ad[0][0]*imu->x_Theta_KF_c_past[0] + imu->Ad[0][1]*imu->x_Theta_KF_c_past[1] + imu->Gyro_Theta;//imu->Bd[0]*imu->Gyro_Theta;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	edd3 7aef 	vldr	s15, [r3, #956]	@ 0x3bc
 8005d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	edd3 7af0 	vldr	s15, [r3, #960]	@ 0x3c0
 8005d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 8005da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	edc3 7af1 	vstr	s15, [r3, #964]	@ 0x3c4
    imu->x_Theta_KF_p[1] = imu->Ad[1][0]*imu->x_Theta_KF_c_past[0] + imu->Ad[1][1]*imu->x_Theta_KF_c_past[1] + imu->Bd[1]*imu->Gyro_Theta;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	edd3 7aef 	vldr	s15, [r3, #956]	@ 0x3bc
 8005dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	edd3 7af0 	vldr	s15, [r3, #960]	@ 0x3c0
 8005dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	edd3 6aa5 	vldr	s13, [r3, #660]	@ 0x294
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 8005de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	edc3 7af2 	vstr	s15, [r3, #968]	@ 0x3c8

	//Em Gama
    imu->P_plus_Gama[0][0] = (1-imu->K_KF_Gama[0]*imu->Cd[0])*imu->P_minus_Gama[0][0] - imu->K_KF_Gama[0]*imu->Cd[1]*imu->P_minus_Gama[1][0];
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	ed93 7ad9 	vldr	s14, [r3, #868]	@ 0x364
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	edd3 7adb 	vldr	s15, [r3, #876]	@ 0x36c
 8005e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	edd3 6ad9 	vldr	s13, [r3, #868]	@ 0x364
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005e1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	edd3 7add 	vldr	s15, [r3, #884]	@ 0x374
 8005e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	edc3 7adf 	vstr	s15, [r3, #892]	@ 0x37c
    imu->P_plus_Gama[1][0] = -imu->K_KF_Gama[1]*imu->Cd[0]*imu->P_minus_Gama[0][0] + (1-imu->K_KF_Gama[1]*imu->Cd[1])*imu->P_minus_Gama[1][0];
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	edd3 7ada 	vldr	s15, [r3, #872]	@ 0x368
 8005e3a:	eeb1 7a67 	vneg.f32	s14, s15
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	edd3 7adb 	vldr	s15, [r3, #876]	@ 0x36c
 8005e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	edd3 6ada 	vldr	s13, [r3, #872]	@ 0x368
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	edd3 7add 	vldr	s15, [r3, #884]	@ 0x374
 8005e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	edc3 7ae1 	vstr	s15, [r3, #900]	@ 0x384
    imu->P_plus_Gama[0][1] = (1-imu->K_KF_Gama[0]*imu->Cd[0])*imu->P_minus_Gama[0][1] - imu->K_KF_Gama[0]*imu->Cd[1]*imu->P_minus_Gama[1][1];
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	ed93 7ad9 	vldr	s14, [r3, #868]	@ 0x364
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	edd3 7adc 	vldr	s15, [r3, #880]	@ 0x370
 8005e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	edd3 6ad9 	vldr	s13, [r3, #868]	@ 0x364
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005eac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	edd3 7ade 	vldr	s15, [r3, #888]	@ 0x378
 8005eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	edc3 7ae0 	vstr	s15, [r3, #896]	@ 0x380
    imu->P_plus_Gama[1][1] = -imu->K_KF_Gama[1]*imu->Cd[0]*imu->P_minus_Gama[0][1] + (1-imu->K_KF_Gama[1]*imu->Cd[1])*imu->P_minus_Gama[1][1];
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	edd3 7ada 	vldr	s15, [r3, #872]	@ 0x368
 8005eca:	eeb1 7a67 	vneg.f32	s14, s15
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	edd3 7aa6 	vldr	s15, [r3, #664]	@ 0x298
 8005ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	edd3 7adc 	vldr	s15, [r3, #880]	@ 0x370
 8005ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	edd3 6ada 	vldr	s13, [r3, #872]	@ 0x368
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8005eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ef6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	edd3 7ade 	vldr	s15, [r3, #888]	@ 0x378
 8005f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	edc3 7ae2 	vstr	s15, [r3, #904]	@ 0x388

    imu->P_minus_Gama[0][0] = (imu->Ad[0][0]*imu->P_plus_Gama[0][0] + imu->Ad[0][1]*imu->P_plus_Gama[1][0])*imu->Ad[0][0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	edd3 7adf 	vldr	s15, [r3, #892]	@ 0x37c
 8005f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	edd3 7ae1 	vldr	s15, [r3, #900]	@ 0x384
 8005f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	edd3 7aa0 	vldr	s15, [r3, #640]	@ 0x280
 8005f38:	ee27 7a27 	vmul.f32	s14, s14, s15
							 +(imu->Ad[0][0]*imu->P_plus_Gama[0][1] + imu->Ad[0][1]*imu->P_plus_Gama[1][1])*imu->Ad[0][1]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	edd3 6aa0 	vldr	s13, [r3, #640]	@ 0x280
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	edd3 7ae0 	vldr	s15, [r3, #896]	@ 0x380
 8005f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	ed93 6aa1 	vldr	s12, [r3, #644]	@ 0x284
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	edd3 7ae2 	vldr	s15, [r3, #904]	@ 0x388
 8005f58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	edd3 7aa1 	vldr	s15, [r3, #644]	@ 0x284
 8005f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
					         +imu->R_w_Gama*(imu->Gd[0]*imu->Gd[0]);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	edd3 6ae3 	vldr	s13, [r3, #908]	@ 0x38c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	ed93 6aa8 	vldr	s12, [r3, #672]	@ 0x2a0
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 8005f80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f88:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Gama[0][0] = (imu->Ad[0][0]*imu->P_plus_Gama[0][0] + imu->Ad[0][1]*imu->P_plus_Gama[1][0])*imu->Ad[0][0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	edc3 7adb 	vstr	s15, [r3, #876]	@ 0x36c
    imu->P_minus_Gama[1][0] = (imu->Ad[1][0]*imu->P_plus_Gama[0][0] + imu->Ad[1][1]*imu->P_plus_Gama[1][0])*imu->Ad[0][0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	edd3 7adf 	vldr	s15, [r3, #892]	@ 0x37c
 8005f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	edd3 7ae1 	vldr	s15, [r3, #900]	@ 0x384
 8005fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	edd3 7aa0 	vldr	s15, [r3, #640]	@ 0x280
 8005fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
							 +(imu->Ad[1][0]*imu->P_plus_Gama[0][1] + imu->Ad[1][1]*imu->P_plus_Gama[1][1])*imu->Ad[0][1]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	edd3 6aa2 	vldr	s13, [r3, #648]	@ 0x288
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	edd3 7ae0 	vldr	s15, [r3, #896]	@ 0x380
 8005fcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	ed93 6aa3 	vldr	s12, [r3, #652]	@ 0x28c
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	edd3 7ae2 	vldr	s15, [r3, #904]	@ 0x388
 8005fdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005fe0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	edd3 7aa1 	vldr	s15, [r3, #644]	@ 0x284
 8005fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fee:	ee37 7a27 	vadd.f32	s14, s14, s15
					         +imu->R_w_Gama*(imu->Gd[1]*imu->Gd[0]);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	edd3 6ae3 	vldr	s13, [r3, #908]	@ 0x38c
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	ed93 6aa9 	vldr	s12, [r3, #676]	@ 0x2a4
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 8006004:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800600c:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Gama[1][0] = (imu->Ad[1][0]*imu->P_plus_Gama[0][0] + imu->Ad[1][1]*imu->P_plus_Gama[1][0])*imu->Ad[0][0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	edc3 7add 	vstr	s15, [r3, #884]	@ 0x374
    imu->P_minus_Gama[0][1] = (imu->Ad[0][0]*imu->P_plus_Gama[0][0] + imu->Ad[0][1]*imu->P_plus_Gama[1][0])*imu->Ad[1][0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	edd3 7adf 	vldr	s15, [r3, #892]	@ 0x37c
 8006022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	edd3 7ae1 	vldr	s15, [r3, #900]	@ 0x384
 8006032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
 8006040:	ee27 7a27 	vmul.f32	s14, s14, s15
							 +(imu->Ad[0][0]*imu->P_plus_Gama[0][1] + imu->Ad[0][1]*imu->P_plus_Gama[1][1])*imu->Ad[1][1]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	edd3 6aa0 	vldr	s13, [r3, #640]	@ 0x280
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	edd3 7ae0 	vldr	s15, [r3, #896]	@ 0x380
 8006050:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	ed93 6aa1 	vldr	s12, [r3, #644]	@ 0x284
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	edd3 7ae2 	vldr	s15, [r3, #904]	@ 0x388
 8006060:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006064:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 800606e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006072:	ee37 7a27 	vadd.f32	s14, s14, s15
					         +imu->R_w_Gama*(imu->Gd[0]*imu->Gd[1]);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	edd3 6ae3 	vldr	s13, [r3, #908]	@ 0x38c
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	ed93 6aa8 	vldr	s12, [r3, #672]	@ 0x2a0
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	edd3 7aa9 	vldr	s15, [r3, #676]	@ 0x2a4
 8006088:	ee66 7a27 	vmul.f32	s15, s12, s15
 800608c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006090:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Gama[0][1] = (imu->Ad[0][0]*imu->P_plus_Gama[0][0] + imu->Ad[0][1]*imu->P_plus_Gama[1][0])*imu->Ad[1][0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	edc3 7adc 	vstr	s15, [r3, #880]	@ 0x370
    imu->P_minus_Gama[1][1] = (imu->Ad[1][0]*imu->P_plus_Gama[0][0] + imu->Ad[1][1]*imu->P_plus_Gama[1][0])*imu->Ad[1][0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	edd3 7adf 	vldr	s15, [r3, #892]	@ 0x37c
 80060a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	edd3 7ae1 	vldr	s15, [r3, #900]	@ 0x384
 80060b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
 80060c4:	ee27 7a27 	vmul.f32	s14, s14, s15
							 +(imu->Ad[1][0]*imu->P_plus_Gama[0][1] + imu->Ad[1][1]*imu->P_plus_Gama[1][1])*imu->Ad[1][1]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	edd3 6aa2 	vldr	s13, [r3, #648]	@ 0x288
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	edd3 7ae0 	vldr	s15, [r3, #896]	@ 0x380
 80060d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	ed93 6aa3 	vldr	s12, [r3, #652]	@ 0x28c
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	edd3 7ae2 	vldr	s15, [r3, #904]	@ 0x388
 80060e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 80060f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f6:	ee37 7a27 	vadd.f32	s14, s14, s15
					         +imu->R_w_Gama*(imu->Gd[1]*imu->Gd[1]);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	edd3 6ae3 	vldr	s13, [r3, #908]	@ 0x38c
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	ed93 6aa9 	vldr	s12, [r3, #676]	@ 0x2a4
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	edd3 7aa9 	vldr	s15, [r3, #676]	@ 0x2a4
 800610c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006114:	ee77 7a27 	vadd.f32	s15, s14, s15
    imu->P_minus_Gama[1][1] = (imu->Ad[1][0]*imu->P_plus_Gama[0][0] + imu->Ad[1][1]*imu->P_plus_Gama[1][0])*imu->Ad[1][0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	edc3 7ade 	vstr	s15, [r3, #888]	@ 0x378

    imu->x_Gama_KF_p[0] = imu->Ad[0][0]*imu->x_Gama_KF_c_past[0] + imu->Ad[0][1]*imu->x_Gama_KF_c_past[1] + imu->Gyro_Gama;//imu->Bd[0]*imu->Gyro_Gama;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	ed93 7aa0 	vldr	s14, [r3, #640]	@ 0x280
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	edd3 7af6 	vldr	s15, [r3, #984]	@ 0x3d8
 800612a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	edd3 6aa1 	vldr	s13, [r3, #644]	@ 0x284
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	edd3 7af7 	vldr	s15, [r3, #988]	@ 0x3dc
 800613a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800613e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	edd3 7a53 	vldr	s15, [r3, #332]	@ 0x14c
 8006148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	edc3 7af8 	vstr	s15, [r3, #992]	@ 0x3e0
    imu->x_Gama_KF_p[1] = imu->Ad[1][0]*imu->x_Gama_KF_c_past[0] + imu->Ad[1][1]*imu->x_Gama_KF_c_past[1] + imu->Bd[1]*imu->Gyro_Gama;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	ed93 7aa2 	vldr	s14, [r3, #648]	@ 0x288
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	edd3 7af6 	vldr	s15, [r3, #984]	@ 0x3d8
 800615e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	edd3 6aa3 	vldr	s13, [r3, #652]	@ 0x28c
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	edd3 7af7 	vldr	s15, [r3, #988]	@ 0x3dc
 800616e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	edd3 6aa5 	vldr	s13, [r3, #660]	@ 0x294
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	edd3 7a53 	vldr	s15, [r3, #332]	@ 0x14c
 8006182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	edc3 7af9 	vstr	s15, [r3, #996]	@ 0x3e4



}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	ecbd 8b02 	vpop	{d8}
 800619a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619e:	bf00      	nop

080061a0 <imu_filter_data>:

void imu_filter_data(IMU *imu)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	/********************************************************************/
	/* 					Obtenção de dados filtrados						*/
	/********************************************************************/

	//Filtragem do acelerômetro por filtro passa baixa
	imu->Acc_X_f=	(imu->Acc_X*imu->Acc_DLPF_A[0] 			+	imu->Acc_X_p[0]*imu->Acc_DLPF_A[1]		+ imu->Acc_X_p[1]*imu->Acc_DLPF_A[2]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 80061b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	edd3 6afa 	vldr	s13, [r3, #1000]	@ 0x3e8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 80061c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	edd3 6afb 	vldr	s13, [r3, #1004]	@ 0x3ec
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 80061d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061dc:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Acc_X_f_p[0]*imu->Acc_DLPF_B[1]	-	imu->Acc_X_f_p[1]*imu->Acc_DLPF_B[2])
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	edd3 6aff 	vldr	s13, [r3, #1020]	@ 0x3fc
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 80061ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061fa:	edd3 6a00 	vldr	s13, [r3]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8006204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006208:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Acc_DLPF_B[0];
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8006212:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Acc_X_f=	(imu->Acc_X*imu->Acc_DLPF_A[0] 			+	imu->Acc_X_p[0]*imu->Acc_DLPF_A[1]		+ imu->Acc_X_p[1]*imu->Acc_DLPF_A[2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	imu->Acc_Y_f=	(imu->Acc_Y*imu->Acc_DLPF_A[0] 			+ 	imu->Acc_Y_p[0]*imu->Acc_DLPF_A[1]		+ imu->Acc_Y_p[1]*imu->Acc_DLPF_A[2]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 8006228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8006232:	edd3 6a00 	vldr	s13, [r3]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 800623c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800624a:	edd3 6a00 	vldr	s13, [r3]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8006254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006258:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Acc_Y_f_p[0]*imu->Acc_DLPF_B[1]	-	imu->Acc_Y_f_p[1]*imu->Acc_DLPF_B[2])
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 8006262:	edd3 6a00 	vldr	s13, [r3]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 800626c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 800627a:	edd3 6a00 	vldr	s13, [r3]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8006284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006288:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Acc_DLPF_B[0];
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8006292:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Acc_Y_f=	(imu->Acc_Y*imu->Acc_DLPF_A[0] 			+ 	imu->Acc_Y_p[0]*imu->Acc_DLPF_A[1]		+ imu->Acc_Y_p[1]*imu->Acc_DLPF_A[2]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	imu->Acc_Z_f=	(imu->Acc_Z*imu->Acc_DLPF_A[0] 			+ 	imu->Acc_Z_p[0]*imu->Acc_DLPF_A[1]		+ imu->Acc_Z_p[1]*imu->Acc_DLPF_A[2]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 80062a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 80062b2:	edd3 6a00 	vldr	s13, [r3]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 80062bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 80062ca:	edd3 6a00 	vldr	s13, [r3]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 80062d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062d8:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Acc_Z_f_p[0]*imu->Acc_DLPF_B[1]	-	imu->Acc_Z_f_p[1]*imu->Acc_DLPF_B[2])
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 80062e2:	edd3 6a00 	vldr	s13, [r3]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 80062ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80062fa:	edd3 6a00 	vldr	s13, [r3]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8006304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006308:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Acc_DLPF_B[0];
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8006312:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Acc_Z_f=	(imu->Acc_Z*imu->Acc_DLPF_A[0] 			+ 	imu->Acc_Z_p[0]*imu->Acc_DLPF_A[1]		+ imu->Acc_Z_p[1]*imu->Acc_DLPF_A[2]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	//Filtragem do giroscópio por filtro passa baixa
	imu->Gyro_X_f=	(imu->Gyro_X*imu->Gyro_DLPF_A[0] 		+	imu->Gyro_X_p[0]*imu->Gyro_DLPF_A[1]	+ imu->Gyro_X_p[1]*imu->Gyro_DLPF_A[2]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8006328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006332:	edd3 6a00 	vldr	s13, [r3]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 800633c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800634a:	edd3 6a00 	vldr	s13, [r3]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8006354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006358:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Gyro_X_f_p[0]*imu->Gyro_DLPF_B[1]	-	imu->Gyro_X_f_p[1]*imu->Gyro_DLPF_B[2])
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8006362:	edd3 6a00 	vldr	s13, [r3]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 800636c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800637a:	edd3 6a00 	vldr	s13, [r3]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	edd3 7a8d 	vldr	s15, [r3, #564]	@ 0x234
 8006384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006388:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Gyro_DLPF_B[0];
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	ed93 7a8b 	vldr	s14, [r3, #556]	@ 0x22c
 8006392:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Gyro_X_f=	(imu->Gyro_X*imu->Gyro_DLPF_A[0] 		+	imu->Gyro_X_p[0]*imu->Gyro_DLPF_A[1]	+ imu->Gyro_X_p[1]*imu->Gyro_DLPF_A[2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

	imu->Gyro_Y_f=	(imu->Gyro_Y*imu->Gyro_DLPF_A[0] 		+	imu->Gyro_Y_p[0]*imu->Gyro_DLPF_A[1]	+ imu->Gyro_Y_p[1]*imu->Gyro_DLPF_A[2]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 80063a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b2:	edd3 6a00 	vldr	s13, [r3]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 80063bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 80063ca:	edd3 6a00 	vldr	s13, [r3]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 80063d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063d8:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Gyro_Y_f_p[0]*imu->Gyro_DLPF_B[1]	-	imu->Gyro_Y_f_p[1]*imu->Gyro_DLPF_B[2])
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80063e2:	edd3 6a00 	vldr	s13, [r3]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 80063ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 80063fa:	edd3 6a00 	vldr	s13, [r3]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	edd3 7a8d 	vldr	s15, [r3, #564]	@ 0x234
 8006404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006408:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Gyro_DLPF_B[0];
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	ed93 7a8b 	vldr	s14, [r3, #556]	@ 0x22c
 8006412:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Gyro_Y_f=	(imu->Gyro_Y*imu->Gyro_DLPF_A[0] 		+	imu->Gyro_Y_p[0]*imu->Gyro_DLPF_A[1]	+ imu->Gyro_Y_p[1]*imu->Gyro_DLPF_A[2]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	imu->Gyro_Z_f=	(imu->Gyro_Z*imu->Gyro_DLPF_A[0] 		+	imu->Gyro_Z_p[0]*imu->Gyro_DLPF_A[1]	+ imu->Gyro_Z_p[1]*imu->Gyro_DLPF_A[2]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8006428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8006432:	edd3 6a00 	vldr	s13, [r3]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 800643c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 800644a:	edd3 6a00 	vldr	s13, [r3]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8006454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006458:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Gyro_Z_f_p[0]*imu->Gyro_DLPF_B[1]	-	imu->Gyro_Z_f_p[1]*imu->Gyro_DLPF_B[2])
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8006462:	edd3 6a00 	vldr	s13, [r3]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 800646c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f203 537c 	addw	r3, r3, #1404	@ 0x57c
 800647a:	edd3 6a00 	vldr	s13, [r3]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	edd3 7a8d 	vldr	s15, [r3, #564]	@ 0x234
 8006484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006488:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Gyro_DLPF_B[0];
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	ed93 7a8b 	vldr	s14, [r3, #556]	@ 0x22c
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Gyro_Z_f=	(imu->Gyro_Z*imu->Gyro_DLPF_A[0] 		+	imu->Gyro_Z_p[0]*imu->Gyro_DLPF_A[1]	+ imu->Gyro_Z_p[1]*imu->Gyro_DLPF_A[2]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	//Filtragem do magnetômetro por filtro passa baixa
	imu->Mag_X_f=	(imu->Mag_X*imu->Mag_DLPF_A[0] 			+	imu->Mag_X_p[0]*imu->Mag_DLPF_A[1]		+ imu->Mag_X_p[1]*imu->Mag_DLPF_A[2]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	ed93 7a25 	vldr	s14, [r3, #148]	@ 0x94
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 80064a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 80064b2:	edd3 6a00 	vldr	s13, [r3]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	edd3 7a98 	vldr	s15, [r3, #608]	@ 0x260
 80064bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f203 53cc 	addw	r3, r3, #1484	@ 0x5cc
 80064ca:	edd3 6a00 	vldr	s13, [r3]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	edd3 7a99 	vldr	s15, [r3, #612]	@ 0x264
 80064d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d8:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Mag_X_f_p[0]*imu->Mag_DLPF_B[1]	-	imu->Mag_X_f_p[1]*imu->Mag_DLPF_B[2])
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80064e2:	edd3 6a00 	vldr	s13, [r3]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	edd3 7a9b 	vldr	s15, [r3, #620]	@ 0x26c
 80064ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f503 63bc 	add.w	r3, r3, #1504	@ 0x5e0
 80064fa:	edd3 6a00 	vldr	s13, [r3]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	edd3 7a9c 	vldr	s15, [r3, #624]	@ 0x270
 8006504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006508:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Mag_DLPF_B[0];
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	ed93 7a9a 	vldr	s14, [r3, #616]	@ 0x268
 8006512:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Mag_X_f=	(imu->Mag_X*imu->Mag_DLPF_A[0] 			+	imu->Mag_X_p[0]*imu->Mag_DLPF_A[1]		+ imu->Mag_X_p[1]*imu->Mag_DLPF_A[2]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0

	imu->Mag_Y_f=	(imu->Mag_Y*imu->Mag_DLPF_A[0] 			+	imu->Mag_Y_p[0]*imu->Mag_DLPF_A[1]		+ imu->Mag_Y_p[1]*imu->Mag_DLPF_A[2]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8006528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 8006532:	edd3 6a00 	vldr	s13, [r3]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	edd3 7a98 	vldr	s15, [r3, #608]	@ 0x260
 800653c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800654a:	edd3 6a00 	vldr	s13, [r3]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	edd3 7a99 	vldr	s15, [r3, #612]	@ 0x264
 8006554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006558:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Mag_Y_f_p[0]*imu->Mag_DLPF_B[1]	-	imu->Mag_Y_f_p[1]*imu->Mag_DLPF_B[2])
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8006562:	edd3 6a00 	vldr	s13, [r3]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	edd3 7a9b 	vldr	s15, [r3, #620]	@ 0x26c
 800656c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006570:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 800657a:	edd3 6a00 	vldr	s13, [r3]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	edd3 7a9c 	vldr	s15, [r3, #624]	@ 0x270
 8006584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006588:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Mag_DLPF_B[0];
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	ed93 7a9a 	vldr	s14, [r3, #616]	@ 0x268
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Mag_Y_f=	(imu->Mag_Y*imu->Mag_DLPF_A[0] 			+	imu->Mag_Y_p[0]*imu->Mag_DLPF_A[1]		+ imu->Mag_Y_p[1]*imu->Mag_DLPF_A[2]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8

	imu->Mag_Z_f=	(imu->Mag_Z*imu->Mag_DLPF_A[0] 			+	imu->Mag_Z_p[0]*imu->Mag_DLPF_A[1]		+ imu->Mag_Z_p[1]*imu->Mag_DLPF_A[2]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 80065a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80065b2:	edd3 6a00 	vldr	s13, [r3]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	edd3 7a98 	vldr	s15, [r3, #608]	@ 0x260
 80065bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 80065ca:	edd3 6a00 	vldr	s13, [r3]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	edd3 7a99 	vldr	s15, [r3, #612]	@ 0x264
 80065d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065d8:	ee37 7a27 	vadd.f32	s14, s14, s15
					-imu->Mag_Z_f_p[0]*imu->Mag_DLPF_B[1]	-	imu->Mag_Z_f_p[1]*imu->Mag_DLPF_B[2])
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80065e2:	edd3 6a00 	vldr	s13, [r3]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	edd3 7a9b 	vldr	s15, [r3, #620]	@ 0x26c
 80065ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80065fa:	edd3 6a00 	vldr	s13, [r3]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	edd3 7a9c 	vldr	s15, [r3, #624]	@ 0x270
 8006604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006608:	ee77 6a67 	vsub.f32	s13, s14, s15
							/imu->Mag_DLPF_B[0];
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	ed93 7a9a 	vldr	s14, [r3, #616]	@ 0x268
 8006612:	eec6 7a87 	vdiv.f32	s15, s13, s14
	imu->Mag_Z_f=	(imu->Mag_Z*imu->Mag_DLPF_A[0] 			+	imu->Mag_Z_p[0]*imu->Mag_DLPF_A[1]		+ imu->Mag_Z_p[1]*imu->Mag_DLPF_A[2]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0

	imu->Mag_X_f=imu->Mag_X;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	imu->Mag_Y_f=imu->Mag_Y;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	imu->Mag_Z_f=imu->Mag_Z;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	//	imu->Gyro_X_f=	imu->Gyro_X;
	//
	//	imu->Gyro_Y_f=	imu->Gyro_Y;
	//
	//	imu->Gyro_Z_f=	imu->Gyro_Z;
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <imu_get_initial_conditions>:


void imu_get_initial_conditions(IMU *imu, int smpls)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	int i=0;
 8006656:	2300      	movs	r3, #0
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
	float mean_X=0 ,mean_Y=0, mean_Z=0;
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	61bb      	str	r3, [r7, #24]
	float mean_Acc_X_BF=0, mean_Acc_Y_BF=0, mean_Acc_Z_BF=0;
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]

	imu->gyro_offset_X=0;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	669a      	str	r2, [r3, #104]	@ 0x68
	imu->gyro_offset_Y=0;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	679a      	str	r2, [r3, #120]	@ 0x78
	imu->gyro_offset_Z=0;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	imu->Acc_X_NED_0=0;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	imu->Acc_Y_NED_0=0;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	imu->Acc_Z_NED_0=0;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

	//Realiza uma quantidade de medidas com base na variável smpls
	while(i<smpls)
 80066b6:	e03b      	b.n	8006730 <imu_get_initial_conditions+0xe4>
	{
		imu_get_data(imu);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fb fc21 	bl	8001f00 <imu_get_data>
		mean_X+=imu->Gyro_X;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80066c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80066c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066cc:	edc7 7a08 	vstr	s15, [r7, #32]
		mean_Y+=imu->Gyro_Y;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80066d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80066da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066de:	edc7 7a07 	vstr	s15, [r7, #28]
		mean_Z+=imu->Gyro_Z;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80066e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80066ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f0:	edc7 7a06 	vstr	s15, [r7, #24]

		mean_Acc_X_BF+=imu->Acc_X_NED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	edd3 7a68 	vldr	s15, [r3, #416]	@ 0x1a0
 80066fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80066fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006702:	edc7 7a05 	vstr	s15, [r7, #20]
		mean_Acc_Y_BF+=imu->Acc_Y_NED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	edd3 7a6b 	vldr	s15, [r3, #428]	@ 0x1ac
 800670c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006714:	edc7 7a04 	vstr	s15, [r7, #16]
		mean_Acc_Z_BF+=imu->Acc_Z_NED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	edd3 7a6e 	vldr	s15, [r3, #440]	@ 0x1b8
 800671e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006726:	edc7 7a03 	vstr	s15, [r7, #12]
		i++;
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	3301      	adds	r3, #1
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
	while(i<smpls)
 8006730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	dbbf      	blt.n	80066b8 <imu_get_initial_conditions+0x6c>
	}
	//Condições iniciais
	imu->Acc_X_0=imu->Acc_X;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	629a      	str	r2, [r3, #40]	@ 0x28
	imu->Acc_Y_0=imu->Acc_Y;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	639a      	str	r2, [r3, #56]	@ 0x38
	imu->Acc_Z_0=imu->Acc_Z;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	649a      	str	r2, [r3, #72]	@ 0x48

	imu->Gyro_X_0=imu->Gyro_X;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	661a      	str	r2, [r3, #96]	@ 0x60
	imu->Gyro_Y_0=imu->Gyro_Y;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	671a      	str	r2, [r3, #112]	@ 0x70
	imu->Gyro_Z_0=imu->Gyro_Z;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	imu->Mag_X_0=imu->Mag_X;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	imu->Mag_Y_0=imu->Mag_Y;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	imu->Mag_Z_0=imu->Mag_Z;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

	imu->Acc_Phi_0=imu->Acc_Phi;;		imu->Gyro_Phi_0=imu->Gyro_Phi;;		imu->Mag_Phi_0=imu->Mag_Phi;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
	imu->Acc_Theta_0=imu->Acc_Theta;	imu->Gyro_Theta_0=imu->Gyro_Theta;	imu->Mag_Theta_0=imu->Mag_Theta;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	imu->Acc_Gama_0=imu->Acc_Gama;		imu->Gyro_Gama_0=imu->Gyro_Gama;	imu->Mag_Gama_0=imu->Mag_Gama;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

	//Offset do Giroscópio
	imu->gyro_offset_X=mean_X/smpls;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006804:	edd7 6a08 	vldr	s13, [r7, #32]
 8006808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
	imu->gyro_offset_Y=mean_Y/smpls;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800681c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
	imu->gyro_offset_Z=mean_Z/smpls;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006834:	edd7 6a06 	vldr	s13, [r7, #24]
 8006838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

	//Offset Aceleração no BF
	imu->Acc_X_NED_0=mean_Acc_X_BF/smpls;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800684c:	edd7 6a05 	vldr	s13, [r7, #20]
 8006850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	edc3 7a65 	vstr	s15, [r3, #404]	@ 0x194
	imu->Acc_Y_NED_0=mean_Acc_Y_BF/smpls;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006864:	edd7 6a04 	vldr	s13, [r7, #16]
 8006868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198
	imu->Acc_Z_NED_0=mean_Acc_Z_BF/smpls;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800687c:	edd7 6a03 	vldr	s13, [r7, #12]
 8006880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	edc3 7a67 	vstr	s15, [r3, #412]	@ 0x19c

	imu->Vel_X_NED=0;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	imu->Vel_Y_NED=0;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
	imu->Vel_Z_NED=0;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4

	imu->Pos_X_NED=0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
	imu->Pos_Y_NED=0;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	imu->Pos_Z_NED=0;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	imu->Gyro_Phi=0;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	imu->Gyro_Theta=0;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	imu->Gyro_Gama=0;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
}
 80068e4:	bf00      	nop
 80068e6:	3728      	adds	r7, #40	@ 0x28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <imu_print_data>:
}

/* Print Functions */

void imu_print_data(IMU* imu)
{
 80068ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f0:	b09c      	sub	sp, #112	@ 0x70
 80068f2:	af10      	add	r7, sp, #64	@ 0x40
 80068f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
			  "Gyro  		X:%f	Y:%f	Z:%f	[deg/s]"
			  "\n\r"
			  "\n\r"
			  "Mag  	 	X:%f	Y:%f	Z:%f	[uT]"
			  "\n\r"
			  ,imu->Acc_X,imu->Acc_Y,imu->Acc_Z
 80068f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  printf(
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7f9 fe2c 	bl	8000558 <__aeabi_f2d>
 8006900:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  ,imu->Acc_X,imu->Acc_Y,imu->Acc_Z
 8006904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	  printf(
 8006908:	4618      	mov	r0, r3
 800690a:	f7f9 fe25 	bl	8000558 <__aeabi_f2d>
 800690e:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  ,imu->Acc_X,imu->Acc_Y,imu->Acc_Z
 8006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
	  printf(
 8006916:	4618      	mov	r0, r3
 8006918:	f7f9 fe1e 	bl	8000558 <__aeabi_f2d>
 800691c:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  ,imu->Gyro_X,imu->Gyro_Y,imu->Gyro_Z
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
	  printf(
 8006924:	4618      	mov	r0, r3
 8006926:	f7f9 fe17 	bl	8000558 <__aeabi_f2d>
 800692a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			  ,imu->Gyro_X,imu->Gyro_Y,imu->Gyro_Z
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
	  printf(
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 fe10 	bl	8000558 <__aeabi_f2d>
 8006938:	e9c7 0100 	strd	r0, r1, [r7]
			  ,imu->Gyro_X,imu->Gyro_Y,imu->Gyro_Z
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
	  printf(
 8006940:	4618      	mov	r0, r3
 8006942:	f7f9 fe09 	bl	8000558 <__aeabi_f2d>
 8006946:	4682      	mov	sl, r0
 8006948:	468b      	mov	fp, r1
			  ,imu->Mag_X,imu->Mag_Y,imu->Mag_Z
 800694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
	  printf(
 8006950:	4618      	mov	r0, r3
 8006952:	f7f9 fe01 	bl	8000558 <__aeabi_f2d>
 8006956:	4680      	mov	r8, r0
 8006958:	4689      	mov	r9, r1
			  ,imu->Mag_X,imu->Mag_Y,imu->Mag_Z
 800695a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
	  printf(
 8006960:	4618      	mov	r0, r3
 8006962:	f7f9 fdf9 	bl	8000558 <__aeabi_f2d>
 8006966:	4604      	mov	r4, r0
 8006968:	460d      	mov	r5, r1
			  ,imu->Mag_X,imu->Mag_Y,imu->Mag_Z
 800696a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
	  printf(
 8006970:	4618      	mov	r0, r3
 8006972:	f7f9 fdf1 	bl	8000558 <__aeabi_f2d>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800697e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8006982:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8006986:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800698a:	ed97 7b00 	vldr	d7, [r7]
 800698e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006992:	ed97 7b02 	vldr	d7, [r7, #8]
 8006996:	ed8d 7b04 	vstr	d7, [sp, #16]
 800699a:	ed97 7b04 	vldr	d7, [r7, #16]
 800699e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069a2:	ed97 7b06 	vldr	d7, [r7, #24]
 80069a6:	ed8d 7b00 	vstr	d7, [sp]
 80069aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ae:	4804      	ldr	r0, [pc, #16]	@ (80069c0 <imu_print_data+0xd4>)
 80069b0:	f004 fc00 	bl	800b1b4 <iprintf>
			  );
}
 80069b4:	bf00      	nop
 80069b6:	3730      	adds	r7, #48	@ 0x30
 80069b8:	46bd      	mov	sp, r7
 80069ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069be:	bf00      	nop
 80069c0:	0800fe88 	.word	0x0800fe88

080069c4 <imu_print_BF_info>:
			  ,imu->raw_Mag_X,imu->raw_Mag_Y,imu->raw_Mag_Z
			  );
}

void imu_print_BF_info(IMU* imu)
{
 80069c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c8:	b09c      	sub	sp, #112	@ 0x70
 80069ca:	af10      	add	r7, sp, #64	@ 0x40
 80069cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
			  "\n\r"
			  "Vel		X:%f	Y:%f	Z:%f"
			  "\n\r"
			  "Pos 		X:%f	Y:%f	Z:%f"
			  "\n\r"
			  ,imu->Acc_X_NED,imu->Acc_Y_NED,imu->Acc_Z_NED
 80069ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
	  printf(
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7f9 fdbf 	bl	8000558 <__aeabi_f2d>
 80069da:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  ,imu->Acc_X_NED,imu->Acc_Y_NED,imu->Acc_Z_NED
 80069de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
	  printf(
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7f9 fdb7 	bl	8000558 <__aeabi_f2d>
 80069ea:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  ,imu->Acc_X_NED,imu->Acc_Y_NED,imu->Acc_Z_NED
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
	  printf(
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7f9 fdaf 	bl	8000558 <__aeabi_f2d>
 80069fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  ,imu->Vel_X_NED,imu->Vel_Y_NED,imu->Vel_Z_NED
 80069fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a00:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
	  printf(
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7f9 fda7 	bl	8000558 <__aeabi_f2d>
 8006a0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			  ,imu->Vel_X_NED,imu->Vel_Y_NED,imu->Vel_Z_NED
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
	  printf(
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7f9 fd9f 	bl	8000558 <__aeabi_f2d>
 8006a1a:	e9c7 0100 	strd	r0, r1, [r7]
			  ,imu->Vel_X_NED,imu->Vel_Y_NED,imu->Vel_Z_NED
 8006a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a20:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
	  printf(
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7f9 fd97 	bl	8000558 <__aeabi_f2d>
 8006a2a:	4682      	mov	sl, r0
 8006a2c:	468b      	mov	fp, r1
			  ,imu->Pos_X_NED,imu->Pos_Y_NED,imu->Pos_Z_NED
 8006a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a30:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
	  printf(
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7f9 fd8f 	bl	8000558 <__aeabi_f2d>
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	4689      	mov	r9, r1
			  ,imu->Pos_X_NED,imu->Pos_Y_NED,imu->Pos_Z_NED
 8006a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a40:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
	  printf(
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7f9 fd87 	bl	8000558 <__aeabi_f2d>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	460d      	mov	r5, r1
			  ,imu->Pos_X_NED,imu->Pos_Y_NED,imu->Pos_Z_NED
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
	  printf(
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7f9 fd7f 	bl	8000558 <__aeabi_f2d>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8006a62:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8006a66:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8006a6a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006a6e:	ed97 7b00 	vldr	d7, [r7]
 8006a72:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006a76:	ed97 7b02 	vldr	d7, [r7, #8]
 8006a7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8006a82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a86:	ed97 7b06 	vldr	d7, [r7, #24]
 8006a8a:	ed8d 7b00 	vstr	d7, [sp]
 8006a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a92:	4804      	ldr	r0, [pc, #16]	@ (8006aa4 <imu_print_BF_info+0xe0>)
 8006a94:	f004 fb8e 	bl	800b1b4 <iprintf>
			  );
}
 8006a98:	bf00      	nop
 8006a9a:	3730      	adds	r7, #48	@ 0x30
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aa2:	bf00      	nop
 8006aa4:	0800ff80 	.word	0x0800ff80

08006aa8 <imu_print_att_data>:

void imu_print_att_data(IMU* imu)
{
 8006aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aac:	ed2d 8b0e 	vpush	{d8-d14}
 8006ab0:	b09a      	sub	sp, #104	@ 0x68
 8006ab2:	af16      	add	r7, sp, #88	@ 0x58
 8006ab4:	60f8      	str	r0, [r7, #12]
			  "\n\r"
			  "Mag : 	Phi:%f		Theta:%f		Gama:%f"
			  "\n\r"
			  "Est : 	Phi:%f		Theta:%f		Gama:%f"
			  "\n\r"
			  ,imu->Acc_Phi*180/M_PI,imu->Acc_Theta*180/M_PI,imu->Acc_Gama*180/M_PI
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8006abc:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8006ce0 <imu_print_att_data+0x238>
 8006ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ac4:	ee17 0a90 	vmov	r0, s15
 8006ac8:	f7f9 fd46 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006acc:	a382      	add	r3, pc, #520	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f7f9 fec3 	bl	800085c <__aeabi_ddiv>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	e9c7 2300 	strd	r2, r3, [r7]
			  ,imu->Acc_Phi*180/M_PI,imu->Acc_Theta*180/M_PI,imu->Acc_Gama*180/M_PI
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8006ae4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8006ce0 <imu_print_att_data+0x238>
 8006ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006aec:	ee17 0a90 	vmov	r0, s15
 8006af0:	f7f9 fd32 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006af4:	a378      	add	r3, pc, #480	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 feaf 	bl	800085c <__aeabi_ddiv>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	ec43 2b1c 	vmov	d12, r2, r3
			  ,imu->Acc_Phi*180/M_PI,imu->Acc_Theta*180/M_PI,imu->Acc_Gama*180/M_PI
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 8006b0c:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8006ce0 <imu_print_att_data+0x238>
 8006b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b14:	ee17 0a90 	vmov	r0, s15
 8006b18:	f7f9 fd1e 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006b1c:	a36e      	add	r3, pc, #440	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fe9b 	bl	800085c <__aeabi_ddiv>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	ec43 2b1d 	vmov	d13, r2, r3
			  ,imu->Gyro_Phi*180/M_PI,imu->Gyro_Theta*180/M_PI,imu->Gyro_Gama*180/M_PI
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8006b34:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8006ce0 <imu_print_att_data+0x238>
 8006b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b3c:	ee17 0a90 	vmov	r0, s15
 8006b40:	f7f9 fd0a 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006b44:	a364      	add	r3, pc, #400	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fe87 	bl	800085c <__aeabi_ddiv>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	ec43 2b1e 	vmov	d14, r2, r3
			  ,imu->Gyro_Phi*180/M_PI,imu->Gyro_Theta*180/M_PI,imu->Gyro_Gama*180/M_PI
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 8006b5c:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8006ce0 <imu_print_att_data+0x238>
 8006b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b64:	ee17 0a90 	vmov	r0, s15
 8006b68:	f7f9 fcf6 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006b6c:	a35a      	add	r3, pc, #360	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f7f9 fe73 	bl	800085c <__aeabi_ddiv>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	ec43 2b1b 	vmov	d11, r2, r3
			  ,imu->Gyro_Phi*180/M_PI,imu->Gyro_Theta*180/M_PI,imu->Gyro_Gama*180/M_PI
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	edd3 7a53 	vldr	s15, [r3, #332]	@ 0x14c
 8006b84:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8006ce0 <imu_print_att_data+0x238>
 8006b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b8c:	ee17 0a90 	vmov	r0, s15
 8006b90:	f7f9 fce2 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006b94:	a350      	add	r3, pc, #320	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f7f9 fe5f 	bl	800085c <__aeabi_ddiv>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	ec43 2b1a 	vmov	d10, r2, r3
			  ,imu->Mag_Phi*180/M_PI,imu->Mag_Theta*180/M_PI,imu->Mag_Gama*180/M_PI
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8006bac:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006ce0 <imu_print_att_data+0x238>
 8006bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bb4:	ee17 0a90 	vmov	r0, s15
 8006bb8:	f7f9 fcce 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006bbc:	a346      	add	r3, pc, #280	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fe4b 	bl	800085c <__aeabi_ddiv>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	ec43 2b19 	vmov	d9, r2, r3
			  ,imu->Mag_Phi*180/M_PI,imu->Mag_Theta*180/M_PI,imu->Mag_Gama*180/M_PI
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8006bd4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006ce0 <imu_print_att_data+0x238>
 8006bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bdc:	ee17 0a90 	vmov	r0, s15
 8006be0:	f7f9 fcba 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006be4:	a33c      	add	r3, pc, #240	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7f9 fe37 	bl	800085c <__aeabi_ddiv>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	ec43 2b18 	vmov	d8, r2, r3
			  ,imu->Mag_Phi*180/M_PI,imu->Mag_Theta*180/M_PI,imu->Mag_Gama*180/M_PI
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	edd3 7a4c 	vldr	s15, [r3, #304]	@ 0x130
 8006bfc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006ce0 <imu_print_att_data+0x238>
 8006c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c04:	ee17 0a90 	vmov	r0, s15
 8006c08:	f7f9 fca6 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006c0c:	a332      	add	r3, pc, #200	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fe23 	bl	800085c <__aeabi_ddiv>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4692      	mov	sl, r2
 8006c1c:	469b      	mov	fp, r3
			  ,imu->Phi*180/M_PI,imu->Theta*180/M_PI,imu->Gama*180/M_PI
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 8006c24:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006ce0 <imu_print_att_data+0x238>
 8006c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c2c:	ee17 0a90 	vmov	r0, s15
 8006c30:	f7f9 fc92 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006c34:	a328      	add	r3, pc, #160	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fe0f 	bl	800085c <__aeabi_ddiv>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4690      	mov	r8, r2
 8006c44:	4699      	mov	r9, r3
			  ,imu->Phi*180/M_PI,imu->Theta*180/M_PI,imu->Gama*180/M_PI
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8006c4c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006ce0 <imu_print_att_data+0x238>
 8006c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c54:	ee17 0a90 	vmov	r0, s15
 8006c58:	f7f9 fc7e 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006c5c:	a31e      	add	r3, pc, #120	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f7f9 fdfb 	bl	800085c <__aeabi_ddiv>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4614      	mov	r4, r2
 8006c6c:	461d      	mov	r5, r3
			  ,imu->Phi*180/M_PI,imu->Theta*180/M_PI,imu->Gama*180/M_PI
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 8006c74:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006ce0 <imu_print_att_data+0x238>
 8006c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c7c:	ee17 0a90 	vmov	r0, s15
 8006c80:	f7f9 fc6a 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006c84:	a314      	add	r3, pc, #80	@ (adr r3, 8006cd8 <imu_print_att_data+0x230>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fde7 	bl	800085c <__aeabi_ddiv>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8006c96:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8006c9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8006c9e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8006ca2:	ed8d 8b0c 	vstr	d8, [sp, #48]	@ 0x30
 8006ca6:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8006caa:	ed8d ab08 	vstr	d10, [sp, #32]
 8006cae:	ed8d bb06 	vstr	d11, [sp, #24]
 8006cb2:	ed8d eb04 	vstr	d14, [sp, #16]
 8006cb6:	ed8d db02 	vstr	d13, [sp, #8]
 8006cba:	ed8d cb00 	vstr	d12, [sp]
 8006cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc2:	4808      	ldr	r0, [pc, #32]	@ (8006ce4 <imu_print_att_data+0x23c>)
 8006cc4:	f004 fa76 	bl	800b1b4 <iprintf>
			  );
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	ecbd 8b0e 	vpop	{d8-d14}
 8006cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cd6:	bf00      	nop
 8006cd8:	54442d18 	.word	0x54442d18
 8006cdc:	400921fb 	.word	0x400921fb
 8006ce0:	43340000 	.word	0x43340000
 8006ce4:	0800ffc8 	.word	0x0800ffc8

08006ce8 <imu_print_att_data2>:

void imu_print_att_data2(IMU* imu)
{
 8006ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cec:	ed2d 8b08 	vpush	{d8-d11}
 8006cf0:	b094      	sub	sp, #80	@ 0x50
 8006cf2:	af10      	add	r7, sp, #64	@ 0x40
 8006cf4:	60f8      	str	r0, [r7, #12]
			  "\n\r"
			  "KF : 	Phi:%f		Theta:%f		Gama:%f"
			  "\n\r"
			  "____________________________________________________________"
			  "\n\r"
			  ,imu->Phi_CF*180/M_PI,imu->Theta_CF*180/M_PI,imu->Gama_CF*180/M_PI
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	edd3 7a9d 	vldr	s15, [r3, #628]	@ 0x274
 8006cfc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d04:	ee17 0a90 	vmov	r0, s15
 8006d08:	f7f9 fc26 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006d0c:	a362      	add	r3, pc, #392	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fda3 	bl	800085c <__aeabi_ddiv>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	e9c7 2300 	strd	r2, r3, [r7]
			  ,imu->Phi_CF*180/M_PI,imu->Theta_CF*180/M_PI,imu->Gama_CF*180/M_PI
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	edd3 7a9e 	vldr	s15, [r3, #632]	@ 0x278
 8006d24:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d2c:	ee17 0a90 	vmov	r0, s15
 8006d30:	f7f9 fc12 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006d34:	a358      	add	r3, pc, #352	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f7f9 fd8f 	bl	800085c <__aeabi_ddiv>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	ec43 2b19 	vmov	d9, r2, r3
			  ,imu->Phi_CF*180/M_PI,imu->Theta_CF*180/M_PI,imu->Gama_CF*180/M_PI
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	edd3 7a9f 	vldr	s15, [r3, #636]	@ 0x27c
 8006d4c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d54:	ee17 0a90 	vmov	r0, s15
 8006d58:	f7f9 fbfe 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006d5c:	a34e      	add	r3, pc, #312	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f7f9 fd7b 	bl	800085c <__aeabi_ddiv>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	ec43 2b1a 	vmov	d10, r2, r3
			  ,imu->Phi_SO*180/M_PI,imu->Theta_SO*180/M_PI,imu->Gama_SO*180/M_PI
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	edd3 7aac 	vldr	s15, [r3, #688]	@ 0x2b0
 8006d74:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d7c:	ee17 0a90 	vmov	r0, s15
 8006d80:	f7f9 fbea 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006d84:	a344      	add	r3, pc, #272	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f7f9 fd67 	bl	800085c <__aeabi_ddiv>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	ec43 2b1b 	vmov	d11, r2, r3
			  ,imu->Phi_SO*180/M_PI,imu->Theta_SO*180/M_PI,imu->Gama_SO*180/M_PI
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	edd3 7ab3 	vldr	s15, [r3, #716]	@ 0x2cc
 8006d9c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006da4:	ee17 0a90 	vmov	r0, s15
 8006da8:	f7f9 fbd6 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006dac:	a33a      	add	r3, pc, #232	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f7f9 fd53 	bl	800085c <__aeabi_ddiv>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	ec43 2b18 	vmov	d8, r2, r3
			  ,imu->Phi_SO*180/M_PI,imu->Theta_SO*180/M_PI,imu->Gama_SO*180/M_PI
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	edd3 7aba 	vldr	s15, [r3, #744]	@ 0x2e8
 8006dc4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dcc:	ee17 0a90 	vmov	r0, s15
 8006dd0:	f7f9 fbc2 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006dd4:	a330      	add	r3, pc, #192	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	f7f9 fd3f 	bl	800085c <__aeabi_ddiv>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4692      	mov	sl, r2
 8006de4:	469b      	mov	fp, r3
			  ,imu->Phi_KF*180/M_PI,imu->Theta_KF*180/M_PI,imu->Gama_KF*180/M_PI
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	edd3 7ae5 	vldr	s15, [r3, #916]	@ 0x394
 8006dec:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006df4:	ee17 0a90 	vmov	r0, s15
 8006df8:	f7f9 fbae 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006dfc:	a326      	add	r3, pc, #152	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fd2b 	bl	800085c <__aeabi_ddiv>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4690      	mov	r8, r2
 8006e0c:	4699      	mov	r9, r3
			  ,imu->Phi_KF*180/M_PI,imu->Theta_KF*180/M_PI,imu->Gama_KF*180/M_PI
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	edd3 7aec 	vldr	s15, [r3, #944]	@ 0x3b0
 8006e14:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e1c:	ee17 0a90 	vmov	r0, s15
 8006e20:	f7f9 fb9a 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006e24:	a31c      	add	r3, pc, #112	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fd17 	bl	800085c <__aeabi_ddiv>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
			  ,imu->Phi_KF*180/M_PI,imu->Theta_KF*180/M_PI,imu->Gama_KF*180/M_PI
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	edd3 7af3 	vldr	s15, [r3, #972]	@ 0x3cc
 8006e3c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006ea0 <imu_print_att_data2+0x1b8>
 8006e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e44:	ee17 0a90 	vmov	r0, s15
 8006e48:	f7f9 fb86 	bl	8000558 <__aeabi_f2d>
	  printf(
 8006e4c:	a312      	add	r3, pc, #72	@ (adr r3, 8006e98 <imu_print_att_data2+0x1b0>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fd03 	bl	800085c <__aeabi_ddiv>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8006e5e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8006e62:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8006e66:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006e6a:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006e6e:	ed8d bb04 	vstr	d11, [sp, #16]
 8006e72:	ed8d ab02 	vstr	d10, [sp, #8]
 8006e76:	ed8d 9b00 	vstr	d9, [sp]
 8006e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e7e:	4809      	ldr	r0, [pc, #36]	@ (8006ea4 <imu_print_att_data2+0x1bc>)
 8006e80:	f004 f998 	bl	800b1b4 <iprintf>
			  );
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	ecbd 8b08 	vpop	{d8-d11}
 8006e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	f3af 8000 	nop.w
 8006e98:	54442d18 	.word	0x54442d18
 8006e9c:	400921fb 	.word	0x400921fb
 8006ea0:	43340000 	.word	0x43340000
 8006ea4:	08010054 	.word	0x08010054

08006ea8 <imu_Write_Reg>:
}

/* Read and Write Functions */

void imu_Write_Reg(uint8_t reg, uint8_t data)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	71fb      	strb	r3, [r7, #7]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS_IMU_GPIO, CS_IMU_Pin, GPIO_PIN_RESET);
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef8 <imu_Write_Reg+0x50>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8006efc <imu_Write_Reg+0x54>)
 8006ebe:	8811      	ldrh	r1, [r2, #0]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fac2 	bl	800844c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&imuspi, &reg, 1, 100);
 8006ec8:	1df9      	adds	r1, r7, #7
 8006eca:	2364      	movs	r3, #100	@ 0x64
 8006ecc:	2201      	movs	r2, #1
 8006ece:	480c      	ldr	r0, [pc, #48]	@ (8006f00 <imu_Write_Reg+0x58>)
 8006ed0:	f001 ffd1 	bl	8008e76 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&imuspi, &data, 1, 100);
 8006ed4:	1db9      	adds	r1, r7, #6
 8006ed6:	2364      	movs	r3, #100	@ 0x64
 8006ed8:	2201      	movs	r2, #1
 8006eda:	4809      	ldr	r0, [pc, #36]	@ (8006f00 <imu_Write_Reg+0x58>)
 8006edc:	f001 ffcb 	bl	8008e76 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&imuspi, &data, 1);

//	HAL_SPI_Transmit_IT(&imuspi, &reg, 1);
//	HAL_SPI_Transmit_IT(&imuspi, &data, 1);

	HAL_GPIO_WritePin(CS_IMU_GPIO, CS_IMU_Pin, GPIO_PIN_SET);
 8006ee0:	4b05      	ldr	r3, [pc, #20]	@ (8006ef8 <imu_Write_Reg+0x50>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a05      	ldr	r2, [pc, #20]	@ (8006efc <imu_Write_Reg+0x54>)
 8006ee6:	8811      	ldrh	r1, [r2, #0]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 faae 	bl	800844c <HAL_GPIO_WritePin>
}
 8006ef0:	bf00      	nop
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200002b4 	.word	0x200002b4
 8006efc:	200002b8 	.word	0x200002b8
 8006f00:	2000025c 	.word	0x2000025c

08006f04 <imu_Read_Reg>:

void imu_Read_Reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6039      	str	r1, [r7, #0]
 8006f0e:	71fb      	strb	r3, [r7, #7]
 8006f10:	4613      	mov	r3, r2
 8006f12:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_IMU_GPIO, CS_IMU_Pin, GPIO_PIN_RESET);
 8006f1e:	4b11      	ldr	r3, [pc, #68]	@ (8006f64 <imu_Read_Reg+0x60>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a11      	ldr	r2, [pc, #68]	@ (8006f68 <imu_Read_Reg+0x64>)
 8006f24:	8811      	ldrh	r1, [r2, #0]
 8006f26:	2200      	movs	r2, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fa8f 	bl	800844c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&imuspi, &temp_data, 1, 100);
 8006f2e:	f107 010f 	add.w	r1, r7, #15
 8006f32:	2364      	movs	r3, #100	@ 0x64
 8006f34:	2201      	movs	r2, #1
 8006f36:	480d      	ldr	r0, [pc, #52]	@ (8006f6c <imu_Read_Reg+0x68>)
 8006f38:	f001 ff9d 	bl	8008e76 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&imuspi, data, len, 100);
 8006f3c:	79bb      	ldrb	r3, [r7, #6]
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	2364      	movs	r3, #100	@ 0x64
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	4809      	ldr	r0, [pc, #36]	@ (8006f6c <imu_Read_Reg+0x68>)
 8006f46:	f002 f8d9 	bl	80090fc <HAL_SPI_Receive>
//
//	HAL_SPI_Transmit_IT(&imuspi, &temp_data, 1);
//	HAL_SPI_Receive_IT(&imuspi, data, len);


	HAL_GPIO_WritePin(CS_IMU_GPIO, CS_IMU_Pin, GPIO_PIN_SET);
 8006f4a:	4b06      	ldr	r3, [pc, #24]	@ (8006f64 <imu_Read_Reg+0x60>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a06      	ldr	r2, [pc, #24]	@ (8006f68 <imu_Read_Reg+0x64>)
 8006f50:	8811      	ldrh	r1, [r2, #0]
 8006f52:	2201      	movs	r2, #1
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 fa79 	bl	800844c <HAL_GPIO_WritePin>
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200002b4 	.word	0x200002b4
 8006f68:	200002b8 	.word	0x200002b8
 8006f6c:	2000025c 	.word	0x2000025c

08006f70 <mag_begin>:

/************************MAG Functions************************/

/*Configuration Functions */
void mag_begin(IMU* imu)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	uint8_t val=0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]

	/* Reseta I2C Master*/
	val=0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
	imu_bank(0, imu);
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	2000      	movs	r0, #0
 8006f84:	f7fa feae 	bl	8001ce4 <imu_bank>
	imu_Read_Reg(ICM20948_USER_CTRL,&val,1);
 8006f88:	2003      	movs	r0, #3
 8006f8a:	f107 030f 	add.w	r3, r7, #15
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4619      	mov	r1, r3
 8006f92:	f7ff ffb7 	bl	8006f04 <imu_Read_Reg>
	val|=0x02;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	f043 0302 	orr.w	r3, r3, #2
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_USER_CTRL,val);
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f7ff ff7e 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(100);
 8006fac:	2064      	movs	r0, #100	@ 0x64
 8006fae:	f000 ff4f 	bl	8007e50 <HAL_Delay>

	/* Habilita I2C Master */
	val=0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
	imu_Read_Reg(ICM20948_USER_CTRL,&val,1);
 8006fb6:	2003      	movs	r0, #3
 8006fb8:	f107 030f 	add.w	r3, r7, #15
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f7ff ffa0 	bl	8006f04 <imu_Read_Reg>
	val|=0x20;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	f043 0320 	orr.w	r3, r3, #32
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_USER_CTRL,val);
 8006fce:	2203      	movs	r2, #3
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7ff ff67 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 8006fda:	200a      	movs	r0, #10
 8006fdc:	f000 ff38 	bl	8007e50 <HAL_Delay>

	/* Configura clock da comunicação */
	val=0;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]
	imu_bank(3, imu);
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	2003      	movs	r0, #3
 8006fe8:	f7fa fe7c 	bl	8001ce4 <imu_bank>
	val=0x07;
 8006fec:	2307      	movs	r3, #7
 8006fee:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_I2C_MST_CTRL, val);
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7ff ff56 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 8006ffc:	200a      	movs	r0, #10
 8006ffe:	f000 ff27 	bl	8007e50 <HAL_Delay>

	/* Configuração durante LP */
	val=0;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
	imu_bank(0, imu);
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	2000      	movs	r0, #0
 800700a:	f7fa fe6b 	bl	8001ce4 <imu_bank>
	val=0x40;
 800700e:	2340      	movs	r3, #64	@ 0x40
 8007010:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_LP_CONFIG, val);
 8007012:	2205      	movs	r2, #5
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f7ff ff45 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 800701e:	200a      	movs	r0, #10
 8007020:	f000 ff16 	bl	8007e50 <HAL_Delay>

	/* Configuração de ODR */
	val=0;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]
	imu_bank(3, imu);
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	2003      	movs	r0, #3
 800702c:	f7fa fe5a 	bl	8001ce4 <imu_bank>
	val=0x03;
 8007030:	2303      	movs	r3, #3
 8007032:	73fb      	strb	r3, [r7, #15]
	imu_Write_Reg(ICM20948_I2C_MST_ODR_CFG, val);
 8007034:	2200      	movs	r2, #0
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7ff ff34 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 8007040:	200a      	movs	r0, #10
 8007042:	f000 ff05 	bl	8007e50 <HAL_Delay>

	/* Reseta AK09916 */
	val=0;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
	val=0x01;
 800704a:	2301      	movs	r3, #1
 800704c:	73fb      	strb	r3, [r7, #15]
	mag_Write_Reg(AK09916_CNTL_3, val, imu);
 800704e:	2032      	movs	r0, #50	@ 0x32
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4619      	mov	r1, r3
 8007056:	f000 f828 	bl	80070aa <mag_Write_Reg>
	HAL_Delay(100);
 800705a:	2064      	movs	r0, #100	@ 0x64
 800705c:	f000 fef8 	bl	8007e50 <HAL_Delay>
	mag_Write_Reg(AK09916_CNTL_3, val, imu);
 8007060:	2032      	movs	r0, #50	@ 0x32
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4619      	mov	r1, r3
 8007068:	f000 f81f 	bl	80070aa <mag_Write_Reg>
	HAL_Delay(100);
 800706c:	2064      	movs	r0, #100	@ 0x64
 800706e:	f000 feef 	bl	8007e50 <HAL_Delay>
	val=0;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
	mag_Write_Reg(AK09916_CNTL_2, val, imu);
 8007076:	2031      	movs	r0, #49	@ 0x31
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	4619      	mov	r1, r3
 800707e:	f000 f814 	bl	80070aa <mag_Write_Reg>
	HAL_Delay(100);
 8007082:	2064      	movs	r0, #100	@ 0x64
 8007084:	f000 fee4 	bl	8007e50 <HAL_Delay>

	/* Modo continuo de transmissão */
	val=0;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
	val=0x08;
 800708c:	2308      	movs	r3, #8
 800708e:	73fb      	strb	r3, [r7, #15]
	mag_Write_Reg(AK09916_CNTL_2, val, imu);
 8007090:	2031      	movs	r0, #49	@ 0x31
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	4619      	mov	r1, r3
 8007098:	f000 f807 	bl	80070aa <mag_Write_Reg>
	HAL_Delay(100);
 800709c:	2064      	movs	r0, #100	@ 0x64
 800709e:	f000 fed7 	bl	8007e50 <HAL_Delay>
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <mag_Write_Reg>:

/* Read and Write Functions */
void mag_Write_Reg(uint8_t reg, uint8_t data, IMU* imu)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	4603      	mov	r3, r0
 80070b2:	603a      	str	r2, [r7, #0]
 80070b4:	71fb      	strb	r3, [r7, #7]
 80070b6:	460b      	mov	r3, r1
 80070b8:	71bb      	strb	r3, [r7, #6]
	imu_bank(3, imu);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	2003      	movs	r0, #3
 80070be:	f7fa fe11 	bl	8001ce4 <imu_bank>

	imu_Write_Reg(ICM20948_I2C_SLV0_ADDR, AK09916_ADDRESS);
 80070c2:	2303      	movs	r3, #3
 80070c4:	220c      	movs	r2, #12
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff feed 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 80070ce:	200a      	movs	r0, #10
 80070d0:	f000 febe 	bl	8007e50 <HAL_Delay>
	imu_Write_Reg(ICM20948_I2C_SLV0_REG, reg);
 80070d4:	2204      	movs	r2, #4
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f7ff fee4 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 80070e0:	200a      	movs	r0, #10
 80070e2:	f000 feb5 	bl	8007e50 <HAL_Delay>
	imu_Write_Reg(ICM20948_I2C_SLV0_DO, data);
 80070e6:	2206      	movs	r2, #6
 80070e8:	79bb      	ldrb	r3, [r7, #6]
 80070ea:	4619      	mov	r1, r3
 80070ec:	4610      	mov	r0, r2
 80070ee:	f7ff fedb 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 80070f2:	200a      	movs	r0, #10
 80070f4:	f000 feac 	bl	8007e50 <HAL_Delay>
	imu_Write_Reg(ICM20948_I2C_SLV0_CTRL, 0x80|0x01);
 80070f8:	2305      	movs	r3, #5
 80070fa:	2181      	movs	r1, #129	@ 0x81
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff fed3 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(100);
 8007102:	2064      	movs	r0, #100	@ 0x64
 8007104:	f000 fea4 	bl	8007e50 <HAL_Delay>

	imu_bank(0, imu);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	2000      	movs	r0, #0
 800710c:	f7fa fdea 	bl	8001ce4 <imu_bank>
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <mag_Read_Reg>:

void mag_Read_Reg(uint8_t reg, uint8_t len, IMU* imu)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	603a      	str	r2, [r7, #0]
 8007122:	71fb      	strb	r3, [r7, #7]
 8007124:	460b      	mov	r3, r1
 8007126:	71bb      	strb	r3, [r7, #6]
	imu_bank(3, imu);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	2003      	movs	r0, #3
 800712c:	f7fa fdda 	bl	8001ce4 <imu_bank>

	imu_Write_Reg(ICM20948_I2C_SLV0_ADDR, 0x80|AK09916_ADDRESS);
 8007130:	2203      	movs	r2, #3
 8007132:	230c      	movs	r3, #12
 8007134:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007138:	b2db      	uxtb	r3, r3
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7ff feb3 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 8007142:	200a      	movs	r0, #10
 8007144:	f000 fe84 	bl	8007e50 <HAL_Delay>
	imu_Write_Reg(ICM20948_I2C_SLV0_REG, reg);
 8007148:	2204      	movs	r2, #4
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7ff feaa 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(10);
 8007154:	200a      	movs	r0, #10
 8007156:	f000 fe7b 	bl	8007e50 <HAL_Delay>
	imu_Write_Reg(ICM20948_I2C_SLV0_CTRL, 0x80|len);
 800715a:	2205      	movs	r2, #5
 800715c:	79bb      	ldrb	r3, [r7, #6]
 800715e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007162:	b2db      	uxtb	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7ff fe9e 	bl	8006ea8 <imu_Write_Reg>
	HAL_Delay(100);
 800716c:	2064      	movs	r0, #100	@ 0x64
 800716e:	f000 fe6f 	bl	8007e50 <HAL_Delay>

	imu_bank(0, imu);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	2000      	movs	r0, #0
 8007176:	f7fa fdb5 	bl	8001ce4 <imu_bank>
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800718c:	1d39      	adds	r1, r7, #4
 800718e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007192:	2201      	movs	r2, #1
 8007194:	4803      	ldr	r0, [pc, #12]	@ (80071a4 <__io_putchar+0x20>)
 8007196:	f002 fd5d 	bl	8009c54 <HAL_UART_Transmit>

  return ch;
 800719a:	687b      	ldr	r3, [r7, #4]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	2000036c 	.word	0x2000036c

080071a8 <_write>:

int _write(int fd, char * ptr, int len)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e009      	b.n	80071ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	60ba      	str	r2, [r7, #8]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff ffde 	bl	8007184 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	3301      	adds	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	dbf1      	blt.n	80071ba <_write+0x12>
	}
	return len;
 80071d6:	687b      	ldr	r3, [r7, #4]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	f6ad 0dec 	subw	sp, sp, #2284	@ 0x8ec
 80071e6:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071e8:	f000 fdc0 	bl	8007d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80071ec:	f000 f8ce 	bl	800738c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80071f0:	f000 f9f4 	bl	80075dc <MX_GPIO_Init>
  MX_SPI1_Init();
 80071f4:	f000 f932 	bl	800745c <MX_SPI1_Init>
  MX_SPI4_Init();
 80071f8:	f000 f966 	bl	80074c8 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80071fc:	f000 f99a 	bl	8007534 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007200:	f000 f9c2 	bl	8007588 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8007204:	f003 f940 	bl	800a488 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  GPS gps;
  GPS_begin(huart2, &gps);
 8007208:	4e5b      	ldr	r6, [pc, #364]	@ (8007378 <main+0x198>)
 800720a:	f507 63f4 	add.w	r3, r7, #1952	@ 0x7a0
 800720e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007210:	466d      	mov	r5, sp
 8007212:	f106 0410 	add.w	r4, r6, #16
 8007216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800721a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800721c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800721e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007222:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007226:	e885 0003 	stmia.w	r5, {r0, r1}
 800722a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800722e:	f7f9 fe8b 	bl	8000f48 <GPS_begin>

  HAL_GPIO_WritePin(SPI_CS_BAR_GPIO_Port, SPI_CS_BAR_Pin, SET);
 8007232:	2201      	movs	r2, #1
 8007234:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007238:	4850      	ldr	r0, [pc, #320]	@ (800737c <main+0x19c>)
 800723a:	f001 f907 	bl	800844c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800723e:	2064      	movs	r0, #100	@ 0x64
 8007240:	f000 fe06 	bl	8007e50 <HAL_Delay>
  IMU icm;
  int no_imu_flag=0;
 8007244:	2300      	movs	r3, #0
 8007246:	f8c7 3888 	str.w	r3, [r7, #2184]	@ 0x888
  do
  {
	  imu_begin(hspi4, SPI_CS_IMU_GPIO_Port, SPI_CS_IMU_Pin, &icm);
 800724a:	4c4d      	ldr	r4, [pc, #308]	@ (8007380 <main+0x1a0>)
 800724c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8007250:	9314      	str	r3, [sp, #80]	@ 0x50
 8007252:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007256:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007258:	4b4a      	ldr	r3, [pc, #296]	@ (8007384 <main+0x1a4>)
 800725a:	9312      	str	r3, [sp, #72]	@ 0x48
 800725c:	4668      	mov	r0, sp
 800725e:	f104 0310 	add.w	r3, r4, #16
 8007262:	2248      	movs	r2, #72	@ 0x48
 8007264:	4619      	mov	r1, r3
 8007266:	f004 f91e 	bl	800b4a6 <memcpy>
 800726a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800726e:	f7f9 fe83 	bl	8000f78 <imu_begin>
	  printf("%d\r\n",icm.status);
 8007272:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007276:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800727a:	f993 3717 	ldrsb.w	r3, [r3, #1815]	@ 0x717
 800727e:	4619      	mov	r1, r3
 8007280:	4841      	ldr	r0, [pc, #260]	@ (8007388 <main+0x1a8>)
 8007282:	f003 ff97 	bl	800b1b4 <iprintf>

	  if(no_imu_flag!=0)
 8007286:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10f      	bne.n	80072ae <main+0xce>
	  {
		  break;
	  }
	  HAL_Delay(200);
 800728e:	20c8      	movs	r0, #200	@ 0xc8
 8007290:	f000 fdde 	bl	8007e50 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8007294:	2104      	movs	r1, #4
 8007296:	4839      	ldr	r0, [pc, #228]	@ (800737c <main+0x19c>)
 8007298:	f001 f8f1 	bl	800847e <HAL_GPIO_TogglePin>
  }while(icm.status!=7);
 800729c:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 80072a0:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80072a4:	f993 3717 	ldrsb.w	r3, [r3, #1815]	@ 0x717
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	d1ce      	bne.n	800724a <main+0x6a>
 80072ac:	e000      	b.n	80072b0 <main+0xd0>
		  break;
 80072ae:	bf00      	nop

  imu_get_initial_conditions(&icm,10000);
 80072b0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80072b4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff f9c7 	bl	800664c <imu_get_initial_conditions>

  int t1=0, t2=0, t_print=500;
 80072be:	2300      	movs	r3, #0
 80072c0:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 80072c4:	2300      	movs	r3, #0
 80072c6:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 80072ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80072ce:	f8c7 3880 	str.w	r3, [r7, #2176]	@ 0x880
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char GPS_Data[128];
  HAL_UART_Receive_IT(&huart2, GPS_Data, 128);
 80072d2:	463b      	mov	r3, r7
 80072d4:	2280      	movs	r2, #128	@ 0x80
 80072d6:	4619      	mov	r1, r3
 80072d8:	4827      	ldr	r0, [pc, #156]	@ (8007378 <main+0x198>)
 80072da:	f002 fd46 	bl	8009d6a <HAL_UART_Receive_IT>

  while (1)
  {
	  if(icm.status==7)
 80072de:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 80072e2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80072e6:	f993 3717 	ldrsb.w	r3, [r3, #1815]	@ 0x717
 80072ea:	2b07      	cmp	r3, #7
 80072ec:	d138      	bne.n	8007360 <main+0x180>
	  {
		  printf(GPS_Data);
 80072ee:	463b      	mov	r3, r7
 80072f0:	4618      	mov	r0, r3
 80072f2:	f003 ff5f 	bl	800b1b4 <iprintf>
		  //GPS_Read(&gps);

		  imu_get_data(&icm);
 80072f6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fa fe00 	bl	8001f00 <imu_get_data>

		  t2=HAL_GetTick();
 8007300:	f000 fd9a 	bl	8007e38 <HAL_GetTick>
 8007304:	4603      	mov	r3, r0
 8007306:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
		  if(t2-t1>t_print)
 800730a:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 800730e:	f8d7 388c 	ldr.w	r3, [r7, #2188]	@ 0x88c
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f8d7 2880 	ldr.w	r2, [r7, #2176]	@ 0x880
 8007318:	429a      	cmp	r2, r3
 800731a:	da1b      	bge.n	8007354 <main+0x174>
//		  	  imu_print_mag_data_matlab(&icm);
//			  imu_print_data_matlab_attitude(&icm);
//			  imu_print_data_matlab_euler_n_pos(&icm);
//			  imu_print_data_matlab_raw_and_filtered(&icm);

			  imu_print_BF_info(&icm);
 800731c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fb4f 	bl	80069c4 <imu_print_BF_info>
			  imu_print_data(&icm);
 8007326:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff fade 	bl	80068ec <imu_print_data>
			  imu_print_att_data(&icm);
 8007330:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fbb7 	bl	8006aa8 <imu_print_att_data>
			  imu_print_att_data2(&icm);
 800733a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fcd2 	bl	8006ce8 <imu_print_att_data2>
//			  printf("%.4f %.4f %.4f\r\n",icm.Gyro_dPhi,icm.Gyro_dTheta,icm.Gyro_dGama);
//
//			  printf("%.2f\r\n",icm.Mag_Abs);
//			  printf("%.2f\r\n",icm.Acc_Abs);

			  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8007344:	2102      	movs	r1, #2
 8007346:	480d      	ldr	r0, [pc, #52]	@ (800737c <main+0x19c>)
 8007348:	f001 f899 	bl	800847e <HAL_GPIO_TogglePin>

			  t1=t2;
 800734c:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 8007350:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
//				  icm.Gyro_dPhi,icm.Gyro_dTheta,icm.Gyro_dGama
//				  ,icm.Gyro_Phi,icm.Gyro_Theta,icm.Gyro_Gama
//		  );


		  imu_check_status(&icm);
 8007354:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8007358:	4618      	mov	r0, r3
 800735a:	f7fa fc31 	bl	8001bc0 <imu_check_status>
 800735e:	e7be      	b.n	80072de <main+0xfe>
	  }
	  else
	  {
		  imu_reconect_handler(10, &icm);
 8007360:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8007364:	4619      	mov	r1, r3
 8007366:	200a      	movs	r0, #10
 8007368:	f7fa fc68 	bl	8001c3c <imu_reconect_handler>
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800736c:	2104      	movs	r1, #4
 800736e:	4803      	ldr	r0, [pc, #12]	@ (800737c <main+0x19c>)
 8007370:	f001 f885 	bl	800847e <HAL_GPIO_TogglePin>
	  if(icm.status==7)
 8007374:	e7b3      	b.n	80072de <main+0xfe>
 8007376:	bf00      	nop
 8007378:	200003b4 	.word	0x200003b4
 800737c:	40020400 	.word	0x40020400
 8007380:	20000314 	.word	0x20000314
 8007384:	40020000 	.word	0x40020000
 8007388:	0801018c 	.word	0x0801018c

0800738c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b094      	sub	sp, #80	@ 0x50
 8007390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007392:	f107 0320 	add.w	r3, r7, #32
 8007396:	2230      	movs	r2, #48	@ 0x30
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f003 fff4 	bl	800b388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80073b0:	2300      	movs	r3, #0
 80073b2:	60bb      	str	r3, [r7, #8]
 80073b4:	4b27      	ldr	r3, [pc, #156]	@ (8007454 <SystemClock_Config+0xc8>)
 80073b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b8:	4a26      	ldr	r2, [pc, #152]	@ (8007454 <SystemClock_Config+0xc8>)
 80073ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073be:	6413      	str	r3, [r2, #64]	@ 0x40
 80073c0:	4b24      	ldr	r3, [pc, #144]	@ (8007454 <SystemClock_Config+0xc8>)
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073c8:	60bb      	str	r3, [r7, #8]
 80073ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80073cc:	2300      	movs	r3, #0
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	4b21      	ldr	r3, [pc, #132]	@ (8007458 <SystemClock_Config+0xcc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a20      	ldr	r2, [pc, #128]	@ (8007458 <SystemClock_Config+0xcc>)
 80073d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <SystemClock_Config+0xcc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80073f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073f2:	2302      	movs	r3, #2
 80073f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80073fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80073fc:	2319      	movs	r3, #25
 80073fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007400:	23c0      	movs	r3, #192	@ 0xc0
 8007402:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007404:	2302      	movs	r3, #2
 8007406:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007408:	2304      	movs	r3, #4
 800740a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800740c:	f107 0320 	add.w	r3, r7, #32
 8007410:	4618      	mov	r0, r3
 8007412:	f001 f84f 	bl	80084b4 <HAL_RCC_OscConfig>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800741c:	f000 f948 	bl	80076b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007420:	230f      	movs	r3, #15
 8007422:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007424:	2302      	movs	r3, #2
 8007426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800742c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007430:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	2103      	movs	r1, #3
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fab1 	bl	80089a4 <HAL_RCC_ClockConfig>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8007448:	f000 f932 	bl	80076b0 <Error_Handler>
  }
}
 800744c:	bf00      	nop
 800744e:	3750      	adds	r7, #80	@ 0x50
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40023800 	.word	0x40023800
 8007458:	40007000 	.word	0x40007000

0800745c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007460:	4b17      	ldr	r3, [pc, #92]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007462:	4a18      	ldr	r2, [pc, #96]	@ (80074c4 <MX_SPI1_Init+0x68>)
 8007464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007466:	4b16      	ldr	r3, [pc, #88]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007468:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800746c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800746e:	4b14      	ldr	r3, [pc, #80]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007470:	2200      	movs	r2, #0
 8007472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007474:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007476:	2200      	movs	r2, #0
 8007478:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800747a:	4b11      	ldr	r3, [pc, #68]	@ (80074c0 <MX_SPI1_Init+0x64>)
 800747c:	2200      	movs	r2, #0
 800747e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007480:	4b0f      	ldr	r3, [pc, #60]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007482:	2200      	movs	r2, #0
 8007484:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007486:	4b0e      	ldr	r3, [pc, #56]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800748c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007490:	2200      	movs	r2, #0
 8007492:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007494:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <MX_SPI1_Init+0x64>)
 8007496:	2200      	movs	r2, #0
 8007498:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800749a:	4b09      	ldr	r3, [pc, #36]	@ (80074c0 <MX_SPI1_Init+0x64>)
 800749c:	2200      	movs	r2, #0
 800749e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074a0:	4b07      	ldr	r3, [pc, #28]	@ (80074c0 <MX_SPI1_Init+0x64>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80074a6:	4b06      	ldr	r3, [pc, #24]	@ (80074c0 <MX_SPI1_Init+0x64>)
 80074a8:	220a      	movs	r2, #10
 80074aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80074ac:	4804      	ldr	r0, [pc, #16]	@ (80074c0 <MX_SPI1_Init+0x64>)
 80074ae:	f001 fc59 	bl	8008d64 <HAL_SPI_Init>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80074b8:	f000 f8fa 	bl	80076b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80074bc:	bf00      	nop
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	200002bc 	.word	0x200002bc
 80074c4:	40013000 	.word	0x40013000

080074c8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80074cc:	4b17      	ldr	r3, [pc, #92]	@ (800752c <MX_SPI4_Init+0x64>)
 80074ce:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <MX_SPI4_Init+0x68>)
 80074d0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80074d2:	4b16      	ldr	r3, [pc, #88]	@ (800752c <MX_SPI4_Init+0x64>)
 80074d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80074d8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80074da:	4b14      	ldr	r3, [pc, #80]	@ (800752c <MX_SPI4_Init+0x64>)
 80074dc:	2200      	movs	r2, #0
 80074de:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80074e0:	4b12      	ldr	r3, [pc, #72]	@ (800752c <MX_SPI4_Init+0x64>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80074e6:	4b11      	ldr	r3, [pc, #68]	@ (800752c <MX_SPI4_Init+0x64>)
 80074e8:	2202      	movs	r2, #2
 80074ea:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80074ec:	4b0f      	ldr	r3, [pc, #60]	@ (800752c <MX_SPI4_Init+0x64>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80074f2:	4b0e      	ldr	r3, [pc, #56]	@ (800752c <MX_SPI4_Init+0x64>)
 80074f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074f8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80074fa:	4b0c      	ldr	r3, [pc, #48]	@ (800752c <MX_SPI4_Init+0x64>)
 80074fc:	2218      	movs	r2, #24
 80074fe:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007500:	4b0a      	ldr	r3, [pc, #40]	@ (800752c <MX_SPI4_Init+0x64>)
 8007502:	2200      	movs	r2, #0
 8007504:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8007506:	4b09      	ldr	r3, [pc, #36]	@ (800752c <MX_SPI4_Init+0x64>)
 8007508:	2200      	movs	r2, #0
 800750a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800750c:	4b07      	ldr	r3, [pc, #28]	@ (800752c <MX_SPI4_Init+0x64>)
 800750e:	2200      	movs	r2, #0
 8007510:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8007512:	4b06      	ldr	r3, [pc, #24]	@ (800752c <MX_SPI4_Init+0x64>)
 8007514:	220a      	movs	r2, #10
 8007516:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8007518:	4804      	ldr	r0, [pc, #16]	@ (800752c <MX_SPI4_Init+0x64>)
 800751a:	f001 fc23 	bl	8008d64 <HAL_SPI_Init>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8007524:	f000 f8c4 	bl	80076b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8007528:	bf00      	nop
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20000314 	.word	0x20000314
 8007530:	40013400 	.word	0x40013400

08007534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007538:	4b11      	ldr	r3, [pc, #68]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 800753a:	4a12      	ldr	r2, [pc, #72]	@ (8007584 <MX_USART1_UART_Init+0x50>)
 800753c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800753e:	4b10      	ldr	r3, [pc, #64]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 8007540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007546:	4b0e      	ldr	r3, [pc, #56]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 8007548:	2200      	movs	r2, #0
 800754a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800754c:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 800754e:	2200      	movs	r2, #0
 8007550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007552:	4b0b      	ldr	r3, [pc, #44]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 8007554:	2200      	movs	r2, #0
 8007556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007558:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 800755a:	220c      	movs	r2, #12
 800755c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800755e:	4b08      	ldr	r3, [pc, #32]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 8007560:	2200      	movs	r2, #0
 8007562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007564:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 8007566:	2200      	movs	r2, #0
 8007568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800756a:	4805      	ldr	r0, [pc, #20]	@ (8007580 <MX_USART1_UART_Init+0x4c>)
 800756c:	f002 fb22 	bl	8009bb4 <HAL_UART_Init>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007576:	f000 f89b 	bl	80076b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2000036c 	.word	0x2000036c
 8007584:	40011000 	.word	0x40011000

08007588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800758c:	4b11      	ldr	r3, [pc, #68]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 800758e:	4a12      	ldr	r2, [pc, #72]	@ (80075d8 <MX_USART2_UART_Init+0x50>)
 8007590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8007592:	4b10      	ldr	r3, [pc, #64]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 8007594:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8007598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800759a:	4b0e      	ldr	r3, [pc, #56]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 800759c:	2200      	movs	r2, #0
 800759e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80075a0:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075ac:	4b09      	ldr	r3, [pc, #36]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 80075ae:	220c      	movs	r2, #12
 80075b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075b2:	4b08      	ldr	r3, [pc, #32]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80075b8:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075be:	4805      	ldr	r0, [pc, #20]	@ (80075d4 <MX_USART2_UART_Init+0x4c>)
 80075c0:	f002 faf8 	bl	8009bb4 <HAL_UART_Init>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80075ca:	f000 f871 	bl	80076b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075ce:	bf00      	nop
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200003b4 	.word	0x200003b4
 80075d8:	40004400 	.word	0x40004400

080075dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e2:	f107 030c 	add.w	r3, r7, #12
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	605a      	str	r2, [r3, #4]
 80075ec:	609a      	str	r2, [r3, #8]
 80075ee:	60da      	str	r2, [r3, #12]
 80075f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80075f2:	2300      	movs	r3, #0
 80075f4:	60bb      	str	r3, [r7, #8]
 80075f6:	4b2b      	ldr	r3, [pc, #172]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 80075f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fa:	4a2a      	ldr	r2, [pc, #168]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 80075fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007600:	6313      	str	r3, [r2, #48]	@ 0x30
 8007602:	4b28      	ldr	r3, [pc, #160]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760a:	60bb      	str	r3, [r7, #8]
 800760c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800760e:	2300      	movs	r3, #0
 8007610:	607b      	str	r3, [r7, #4]
 8007612:	4b24      	ldr	r3, [pc, #144]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	4a23      	ldr	r2, [pc, #140]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 8007618:	f043 0301 	orr.w	r3, r3, #1
 800761c:	6313      	str	r3, [r2, #48]	@ 0x30
 800761e:	4b21      	ldr	r3, [pc, #132]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	607b      	str	r3, [r7, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800762a:	2300      	movs	r3, #0
 800762c:	603b      	str	r3, [r7, #0]
 800762e:	4b1d      	ldr	r3, [pc, #116]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 8007630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007632:	4a1c      	ldr	r2, [pc, #112]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 8007634:	f043 0302 	orr.w	r3, r3, #2
 8007638:	6313      	str	r3, [r2, #48]	@ 0x30
 800763a:	4b1a      	ldr	r3, [pc, #104]	@ (80076a4 <MX_GPIO_Init+0xc8>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_SD_CS_Pin|SPI_CS_IMU_Pin, GPIO_PIN_RESET);
 8007646:	2200      	movs	r2, #0
 8007648:	f241 0110 	movw	r1, #4112	@ 0x1010
 800764c:	4816      	ldr	r0, [pc, #88]	@ (80076a8 <MX_GPIO_Init+0xcc>)
 800764e:	f000 fefd 	bl	800844c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin|SPI_CS_BAR_Pin, GPIO_PIN_RESET);
 8007652:	2200      	movs	r2, #0
 8007654:	f248 0106 	movw	r1, #32774	@ 0x8006
 8007658:	4814      	ldr	r0, [pc, #80]	@ (80076ac <MX_GPIO_Init+0xd0>)
 800765a:	f000 fef7 	bl	800844c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_SD_CS_Pin SPI_CS_IMU_Pin */
  GPIO_InitStruct.Pin = SPI_SD_CS_Pin|SPI_CS_IMU_Pin;
 800765e:	f241 0310 	movw	r3, #4112	@ 0x1010
 8007662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007664:	2301      	movs	r3, #1
 8007666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800766c:	2300      	movs	r3, #0
 800766e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007670:	f107 030c 	add.w	r3, r7, #12
 8007674:	4619      	mov	r1, r3
 8007676:	480c      	ldr	r0, [pc, #48]	@ (80076a8 <MX_GPIO_Init+0xcc>)
 8007678:	f000 fd64 	bl	8008144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin SPI_CS_BAR_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|SPI_CS_BAR_Pin;
 800767c:	f248 0306 	movw	r3, #32774	@ 0x8006
 8007680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007682:	2301      	movs	r3, #1
 8007684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800768e:	f107 030c 	add.w	r3, r7, #12
 8007692:	4619      	mov	r1, r3
 8007694:	4805      	ldr	r0, [pc, #20]	@ (80076ac <MX_GPIO_Init+0xd0>)
 8007696:	f000 fd55 	bl	8008144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800769a:	bf00      	nop
 800769c:	3720      	adds	r7, #32
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40020000 	.word	0x40020000
 80076ac:	40020400 	.word	0x40020400

080076b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076b4:	b672      	cpsid	i
}
 80076b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80076b8:	bf00      	nop
 80076ba:	e7fd      	b.n	80076b8 <Error_Handler+0x8>

080076bc <quaternion_init>:
 *      Author: de4lerr
 */
#include "main.h"
#include "quaternion.h"

void quaternion_init(Quaternion *q, float w, float x, float y, float z) {
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6178      	str	r0, [r7, #20]
 80076c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80076c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80076cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80076d0:	edc7 1a01 	vstr	s3, [r7, #4]
    if (q == NULL) return;  // Evita ponteiro nulo
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <quaternion_init+0x38>
    q->w = w;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	601a      	str	r2, [r3, #0]
    q->x = x;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]
    q->y = y;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	609a      	str	r2, [r3, #8]
    q->z = z;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	60da      	str	r2, [r3, #12]
 80076f2:	e000      	b.n	80076f6 <quaternion_init+0x3a>
    if (q == NULL) return;  // Evita ponteiro nulo
 80076f4:	bf00      	nop
}
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <normalizeVector>:

void normalizeVector(float *x, float *y, float *z) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
    float norm = sqrt((*x) * (*x) + (*y) * (*y) + (*z) * (*z));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	ed93 7a00 	vldr	s14, [r3]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	edd3 7a00 	vldr	s15, [r3]
 8007718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	edd3 6a00 	vldr	s13, [r3]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	edd3 7a00 	vldr	s15, [r3]
 8007728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800772c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	edd3 6a00 	vldr	s13, [r3]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	edd3 7a00 	vldr	s15, [r3]
 800773c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007744:	ee17 0a90 	vmov	r0, s15
 8007748:	f7f8 ff06 	bl	8000558 <__aeabi_f2d>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	ec43 2b10 	vmov	d0, r2, r3
 8007754:	f005 fca0 	bl	800d098 <sqrt>
 8007758:	ec53 2b10 	vmov	r2, r3, d0
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	f7f9 fa2a 	bl	8000bb8 <__aeabi_d2f>
 8007764:	4603      	mov	r3, r0
 8007766:	617b      	str	r3, [r7, #20]
    if (norm > 0.0f) {
 8007768:	edd7 7a05 	vldr	s15, [r7, #20]
 800776c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007774:	dc00      	bgt.n	8007778 <normalizeVector+0x78>
        *x /= norm;
        *y /= norm;
        *z /= norm;
    }
}
 8007776:	e01d      	b.n	80077b4 <normalizeVector+0xb4>
        *x /= norm;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	edd3 6a00 	vldr	s13, [r3]
 800777e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	edc3 7a00 	vstr	s15, [r3]
        *y /= norm;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	edd3 6a00 	vldr	s13, [r3]
 8007792:	ed97 7a05 	vldr	s14, [r7, #20]
 8007796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	edc3 7a00 	vstr	s15, [r3]
        *z /= norm;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	edd3 6a00 	vldr	s13, [r3]
 80077a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80077aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	edc3 7a00 	vstr	s15, [r3]
}
 80077b4:	bf00      	nop
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <normalizeQuaternion>:

void normalizeQuaternion(Quaternion *q) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
    float norm = sqrt(q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	ed93 7a00 	vldr	s14, [r3]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	edd3 7a00 	vldr	s15, [r3]
 80077d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80077e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80077f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	edd3 6a03 	vldr	s13, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	edd3 7a03 	vldr	s15, [r3, #12]
 8007808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800780c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007810:	ee17 0a90 	vmov	r0, s15
 8007814:	f7f8 fea0 	bl	8000558 <__aeabi_f2d>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	ec43 2b10 	vmov	d0, r2, r3
 8007820:	f005 fc3a 	bl	800d098 <sqrt>
 8007824:	ec53 2b10 	vmov	r2, r3, d0
 8007828:	4610      	mov	r0, r2
 800782a:	4619      	mov	r1, r3
 800782c:	f7f9 f9c4 	bl	8000bb8 <__aeabi_d2f>
 8007830:	4603      	mov	r3, r0
 8007832:	60fb      	str	r3, [r7, #12]
    if (norm > 0.0f) {
 8007834:	edd7 7a03 	vldr	s15, [r7, #12]
 8007838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800783c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007840:	dc00      	bgt.n	8007844 <normalizeQuaternion+0x88>
        q->w /= norm;
        q->x /= norm;
        q->y /= norm;
        q->z /= norm;
    }
}
 8007842:	e027      	b.n	8007894 <normalizeQuaternion+0xd8>
        q->w /= norm;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	edd3 6a00 	vldr	s13, [r3]
 800784a:	ed97 7a03 	vldr	s14, [r7, #12]
 800784e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	edc3 7a00 	vstr	s15, [r3]
        q->x /= norm;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	edd3 6a01 	vldr	s13, [r3, #4]
 800785e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	edc3 7a01 	vstr	s15, [r3, #4]
        q->y /= norm;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	edd3 6a02 	vldr	s13, [r3, #8]
 8007872:	ed97 7a03 	vldr	s14, [r7, #12]
 8007876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	edc3 7a02 	vstr	s15, [r3, #8]
        q->z /= norm;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	edd3 6a03 	vldr	s13, [r3, #12]
 8007886:	ed97 7a03 	vldr	s14, [r7, #12]
 800788a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078a2:	2300      	movs	r3, #0
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	4b10      	ldr	r3, [pc, #64]	@ (80078e8 <HAL_MspInit+0x4c>)
 80078a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078aa:	4a0f      	ldr	r2, [pc, #60]	@ (80078e8 <HAL_MspInit+0x4c>)
 80078ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80078b2:	4b0d      	ldr	r3, [pc, #52]	@ (80078e8 <HAL_MspInit+0x4c>)
 80078b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ba:	607b      	str	r3, [r7, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078be:	2300      	movs	r3, #0
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4b09      	ldr	r3, [pc, #36]	@ (80078e8 <HAL_MspInit+0x4c>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c6:	4a08      	ldr	r2, [pc, #32]	@ (80078e8 <HAL_MspInit+0x4c>)
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80078ce:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <HAL_MspInit+0x4c>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40023800 	.word	0x40023800

080078ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	@ 0x30
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078f4:	f107 031c 	add.w	r3, r7, #28
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	605a      	str	r2, [r3, #4]
 80078fe:	609a      	str	r2, [r3, #8]
 8007900:	60da      	str	r2, [r3, #12]
 8007902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a4a      	ldr	r2, [pc, #296]	@ (8007a34 <HAL_SPI_MspInit+0x148>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d12c      	bne.n	8007968 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	4b49      	ldr	r3, [pc, #292]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	4a48      	ldr	r2, [pc, #288]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007918:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800791c:	6453      	str	r3, [r2, #68]	@ 0x44
 800791e:	4b46      	ldr	r3, [pc, #280]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007922:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	4b42      	ldr	r3, [pc, #264]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007932:	4a41      	ldr	r2, [pc, #260]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007934:	f043 0301 	orr.w	r3, r3, #1
 8007938:	6313      	str	r3, [r2, #48]	@ 0x30
 800793a:	4b3f      	ldr	r3, [pc, #252]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 800793c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SD_SCK_Pin|SPI_SD_MISO_Pin|SPI_SD_MOSI_Pin;
 8007946:	23e0      	movs	r3, #224	@ 0xe0
 8007948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800794a:	2302      	movs	r3, #2
 800794c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794e:	2300      	movs	r3, #0
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007952:	2303      	movs	r3, #3
 8007954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007956:	2305      	movs	r3, #5
 8007958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800795a:	f107 031c 	add.w	r3, r7, #28
 800795e:	4619      	mov	r1, r3
 8007960:	4836      	ldr	r0, [pc, #216]	@ (8007a3c <HAL_SPI_MspInit+0x150>)
 8007962:	f000 fbef 	bl	8008144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007966:	e060      	b.n	8007a2a <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI4)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a34      	ldr	r2, [pc, #208]	@ (8007a40 <HAL_SPI_MspInit+0x154>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d15b      	bne.n	8007a2a <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	4b30      	ldr	r3, [pc, #192]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 800797c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007980:	6453      	str	r3, [r2, #68]	@ 0x44
 8007982:	4b2d      	ldr	r3, [pc, #180]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	4b29      	ldr	r3, [pc, #164]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007996:	4a28      	ldr	r2, [pc, #160]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	6313      	str	r3, [r2, #48]	@ 0x30
 800799e:	4b26      	ldr	r3, [pc, #152]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079aa:	2300      	movs	r3, #0
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	4b22      	ldr	r3, [pc, #136]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 80079b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b2:	4a21      	ldr	r2, [pc, #132]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 80079b4:	f043 0302 	orr.w	r3, r3, #2
 80079b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80079ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007a38 <HAL_SPI_MspInit+0x14c>)
 80079bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	60bb      	str	r3, [r7, #8]
 80079c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI_IMU_MOSI_Pin;
 80079c6:	2302      	movs	r3, #2
 80079c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ca:	2302      	movs	r3, #2
 80079cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079d2:	2303      	movs	r3, #3
 80079d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80079d6:	2305      	movs	r3, #5
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI_IMU_MOSI_GPIO_Port, &GPIO_InitStruct);
 80079da:	f107 031c 	add.w	r3, r7, #28
 80079de:	4619      	mov	r1, r3
 80079e0:	4816      	ldr	r0, [pc, #88]	@ (8007a3c <HAL_SPI_MspInit+0x150>)
 80079e2:	f000 fbaf 	bl	8008144 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_IMU_SCK_Pin;
 80079e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80079ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ec:	2302      	movs	r3, #2
 80079ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079f4:	2303      	movs	r3, #3
 80079f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80079f8:	2306      	movs	r3, #6
 80079fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI_IMU_SCK_GPIO_Port, &GPIO_InitStruct);
 80079fc:	f107 031c 	add.w	r3, r7, #28
 8007a00:	4619      	mov	r1, r3
 8007a02:	4810      	ldr	r0, [pc, #64]	@ (8007a44 <HAL_SPI_MspInit+0x158>)
 8007a04:	f000 fb9e 	bl	8008144 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_IMU_MISO_Pin;
 8007a08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a16:	2303      	movs	r3, #3
 8007a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8007a1a:	2306      	movs	r3, #6
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI_IMU_MISO_GPIO_Port, &GPIO_InitStruct);
 8007a1e:	f107 031c 	add.w	r3, r7, #28
 8007a22:	4619      	mov	r1, r3
 8007a24:	4805      	ldr	r0, [pc, #20]	@ (8007a3c <HAL_SPI_MspInit+0x150>)
 8007a26:	f000 fb8d 	bl	8008144 <HAL_GPIO_Init>
}
 8007a2a:	bf00      	nop
 8007a2c:	3730      	adds	r7, #48	@ 0x30
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40013000 	.word	0x40013000
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	40020000 	.word	0x40020000
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40020400 	.word	0x40020400

08007a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08c      	sub	sp, #48	@ 0x30
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a50:	f107 031c 	add.w	r3, r7, #28
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	605a      	str	r2, [r3, #4]
 8007a5a:	609a      	str	r2, [r3, #8]
 8007a5c:	60da      	str	r2, [r3, #12]
 8007a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a32      	ldr	r2, [pc, #200]	@ (8007b30 <HAL_UART_MspInit+0xe8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d12d      	bne.n	8007ac6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	4b31      	ldr	r3, [pc, #196]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a72:	4a30      	ldr	r2, [pc, #192]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007a74:	f043 0310 	orr.w	r3, r3, #16
 8007a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	61bb      	str	r3, [r7, #24]
 8007a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a86:	2300      	movs	r3, #0
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8e:	4a29      	ldr	r2, [pc, #164]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a96:	4b27      	ldr	r3, [pc, #156]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8007aa2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007ab4:	2307      	movs	r3, #7
 8007ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ab8:	f107 031c 	add.w	r3, r7, #28
 8007abc:	4619      	mov	r1, r3
 8007abe:	481e      	ldr	r0, [pc, #120]	@ (8007b38 <HAL_UART_MspInit+0xf0>)
 8007ac0:	f000 fb40 	bl	8008144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007ac4:	e030      	b.n	8007b28 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1c      	ldr	r2, [pc, #112]	@ (8007b3c <HAL_UART_MspInit+0xf4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d12b      	bne.n	8007b28 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	4b17      	ldr	r3, [pc, #92]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad8:	4a16      	ldr	r2, [pc, #88]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ae0:	4b14      	ldr	r3, [pc, #80]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	4b10      	ldr	r3, [pc, #64]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af4:	4a0f      	ldr	r2, [pc, #60]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007af6:	f043 0301 	orr.w	r3, r3, #1
 8007afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8007afc:	4b0d      	ldr	r3, [pc, #52]	@ (8007b34 <HAL_UART_MspInit+0xec>)
 8007afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8007b08:	230c      	movs	r3, #12
 8007b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b14:	2303      	movs	r3, #3
 8007b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007b18:	2307      	movs	r3, #7
 8007b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b1c:	f107 031c 	add.w	r3, r7, #28
 8007b20:	4619      	mov	r1, r3
 8007b22:	4805      	ldr	r0, [pc, #20]	@ (8007b38 <HAL_UART_MspInit+0xf0>)
 8007b24:	f000 fb0e 	bl	8008144 <HAL_GPIO_Init>
}
 8007b28:	bf00      	nop
 8007b2a:	3730      	adds	r7, #48	@ 0x30
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40011000 	.word	0x40011000
 8007b34:	40023800 	.word	0x40023800
 8007b38:	40020000 	.word	0x40020000
 8007b3c:	40004400 	.word	0x40004400

08007b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <NMI_Handler+0x4>

08007b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b4c:	bf00      	nop
 8007b4e:	e7fd      	b.n	8007b4c <HardFault_Handler+0x4>

08007b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b54:	bf00      	nop
 8007b56:	e7fd      	b.n	8007b54 <MemManage_Handler+0x4>

08007b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b5c:	bf00      	nop
 8007b5e:	e7fd      	b.n	8007b5c <BusFault_Handler+0x4>

08007b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b64:	bf00      	nop
 8007b66:	e7fd      	b.n	8007b64 <UsageFault_Handler+0x4>

08007b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b6c:	bf00      	nop
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b76:	b480      	push	{r7}
 8007b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b7a:	bf00      	nop
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b88:	bf00      	nop
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007b96:	f000 f93b 	bl	8007e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007b9a:	bf00      	nop
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	af00      	add	r7, sp, #0
  return 1;
 8007ba2:	2301      	movs	r3, #1
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <_kill>:

int _kill(int pid, int sig)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007bb8:	f003 fc48 	bl	800b44c <__errno>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2216      	movs	r2, #22
 8007bc0:	601a      	str	r2, [r3, #0]
  return -1;
 8007bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <_exit>:

void _exit (int status)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007bd6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ffe7 	bl	8007bae <_kill>
  while (1) {}    /* Make sure we hang here */
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <_exit+0x12>

08007be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e00a      	b.n	8007c0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007bf6:	f3af 8000 	nop.w
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	60ba      	str	r2, [r7, #8]
 8007c02:	b2ca      	uxtb	r2, r1
 8007c04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	dbf0      	blt.n	8007bf6 <_read+0x12>
  }

  return len;
 8007c14:	687b      	ldr	r3, [r7, #4]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c46:	605a      	str	r2, [r3, #4]
  return 0;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <_isatty>:

int _isatty(int file)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007c5e:	2301      	movs	r3, #1
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
	...

08007c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c90:	4a14      	ldr	r2, [pc, #80]	@ (8007ce4 <_sbrk+0x5c>)
 8007c92:	4b15      	ldr	r3, [pc, #84]	@ (8007ce8 <_sbrk+0x60>)
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c9c:	4b13      	ldr	r3, [pc, #76]	@ (8007cec <_sbrk+0x64>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ca4:	4b11      	ldr	r3, [pc, #68]	@ (8007cec <_sbrk+0x64>)
 8007ca6:	4a12      	ldr	r2, [pc, #72]	@ (8007cf0 <_sbrk+0x68>)
 8007ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007caa:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <_sbrk+0x64>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d207      	bcs.n	8007cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007cb8:	f003 fbc8 	bl	800b44c <__errno>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	220c      	movs	r2, #12
 8007cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cc6:	e009      	b.n	8007cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007cc8:	4b08      	ldr	r3, [pc, #32]	@ (8007cec <_sbrk+0x64>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007cce:	4b07      	ldr	r3, [pc, #28]	@ (8007cec <_sbrk+0x64>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	4a05      	ldr	r2, [pc, #20]	@ (8007cec <_sbrk+0x64>)
 8007cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007cda:	68fb      	ldr	r3, [r7, #12]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20020000 	.word	0x20020000
 8007ce8:	00000400 	.word	0x00000400
 8007cec:	200003fc 	.word	0x200003fc
 8007cf0:	20000568 	.word	0x20000568

08007cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007cf8:	4b06      	ldr	r3, [pc, #24]	@ (8007d14 <SystemInit+0x20>)
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfe:	4a05      	ldr	r2, [pc, #20]	@ (8007d14 <SystemInit+0x20>)
 8007d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	e000ed00 	.word	0xe000ed00

08007d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007d50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007d1c:	f7ff ffea 	bl	8007cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007d20:	480c      	ldr	r0, [pc, #48]	@ (8007d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007d22:	490d      	ldr	r1, [pc, #52]	@ (8007d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007d24:	4a0d      	ldr	r2, [pc, #52]	@ (8007d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d28:	e002      	b.n	8007d30 <LoopCopyDataInit>

08007d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d2e:	3304      	adds	r3, #4

08007d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d34:	d3f9      	bcc.n	8007d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d36:	4a0a      	ldr	r2, [pc, #40]	@ (8007d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007d38:	4c0a      	ldr	r4, [pc, #40]	@ (8007d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d3c:	e001      	b.n	8007d42 <LoopFillZerobss>

08007d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d40:	3204      	adds	r2, #4

08007d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d44:	d3fb      	bcc.n	8007d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007d46:	f003 fb87 	bl	800b458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d4a:	f7ff fa49 	bl	80071e0 <main>
  bx  lr    
 8007d4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d58:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8007d5c:	080107a8 	.word	0x080107a8
  ldr r2, =_sbss
 8007d60:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8007d64:	20000564 	.word	0x20000564

08007d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d68:	e7fe      	b.n	8007d68 <ADC_IRQHandler>
	...

08007d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d70:	4b0e      	ldr	r3, [pc, #56]	@ (8007dac <HAL_Init+0x40>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a0d      	ldr	r2, [pc, #52]	@ (8007dac <HAL_Init+0x40>)
 8007d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dac <HAL_Init+0x40>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0a      	ldr	r2, [pc, #40]	@ (8007dac <HAL_Init+0x40>)
 8007d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d88:	4b08      	ldr	r3, [pc, #32]	@ (8007dac <HAL_Init+0x40>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a07      	ldr	r2, [pc, #28]	@ (8007dac <HAL_Init+0x40>)
 8007d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d94:	2003      	movs	r0, #3
 8007d96:	f000 f931 	bl	8007ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d9a:	200f      	movs	r0, #15
 8007d9c:	f000 f808 	bl	8007db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007da0:	f7ff fd7c 	bl	800789c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	40023c00 	.word	0x40023c00

08007db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007db8:	4b12      	ldr	r3, [pc, #72]	@ (8007e04 <HAL_InitTick+0x54>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	4b12      	ldr	r3, [pc, #72]	@ (8007e08 <HAL_InitTick+0x58>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 f93b 	bl	800804a <HAL_SYSTICK_Config>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e00e      	b.n	8007dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b0f      	cmp	r3, #15
 8007de2:	d80a      	bhi.n	8007dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007de4:	2200      	movs	r2, #0
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dec:	f000 f911 	bl	8008012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007df0:	4a06      	ldr	r2, [pc, #24]	@ (8007e0c <HAL_InitTick+0x5c>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	e000      	b.n	8007dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000000 	.word	0x20000000
 8007e08:	20000008 	.word	0x20000008
 8007e0c:	20000004 	.word	0x20000004

08007e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <HAL_IncTick+0x20>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <HAL_IncTick+0x24>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4413      	add	r3, r2
 8007e20:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <HAL_IncTick+0x24>)
 8007e22:	6013      	str	r3, [r2, #0]
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000008 	.word	0x20000008
 8007e34:	20000400 	.word	0x20000400

08007e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8007e3c:	4b03      	ldr	r3, [pc, #12]	@ (8007e4c <HAL_GetTick+0x14>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000400 	.word	0x20000400

08007e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e58:	f7ff ffee 	bl	8007e38 <HAL_GetTick>
 8007e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e68:	d005      	beq.n	8007e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e94 <HAL_Delay+0x44>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007e76:	bf00      	nop
 8007e78:	f7ff ffde 	bl	8007e38 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d8f7      	bhi.n	8007e78 <HAL_Delay+0x28>
  {
  }
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000008 	.word	0x20000008

08007e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8007edc <__NVIC_SetPriorityGrouping+0x44>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007eca:	4a04      	ldr	r2, [pc, #16]	@ (8007edc <__NVIC_SetPriorityGrouping+0x44>)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	60d3      	str	r3, [r2, #12]
}
 8007ed0:	bf00      	nop
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	e000ed00 	.word	0xe000ed00

08007ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ee4:	4b04      	ldr	r3, [pc, #16]	@ (8007ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	f003 0307 	and.w	r3, r3, #7
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	e000ed00 	.word	0xe000ed00

08007efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	db0a      	blt.n	8007f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	490c      	ldr	r1, [pc, #48]	@ (8007f48 <__NVIC_SetPriority+0x4c>)
 8007f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f1a:	0112      	lsls	r2, r2, #4
 8007f1c:	b2d2      	uxtb	r2, r2
 8007f1e:	440b      	add	r3, r1
 8007f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f24:	e00a      	b.n	8007f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	4908      	ldr	r1, [pc, #32]	@ (8007f4c <__NVIC_SetPriority+0x50>)
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	3b04      	subs	r3, #4
 8007f34:	0112      	lsls	r2, r2, #4
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	440b      	add	r3, r1
 8007f3a:	761a      	strb	r2, [r3, #24]
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	e000e100 	.word	0xe000e100
 8007f4c:	e000ed00 	.word	0xe000ed00

08007f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b089      	sub	sp, #36	@ 0x24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f1c3 0307 	rsb	r3, r3, #7
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	bf28      	it	cs
 8007f6e:	2304      	movcs	r3, #4
 8007f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3304      	adds	r3, #4
 8007f76:	2b06      	cmp	r3, #6
 8007f78:	d902      	bls.n	8007f80 <NVIC_EncodePriority+0x30>
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	3b03      	subs	r3, #3
 8007f7e:	e000      	b.n	8007f82 <NVIC_EncodePriority+0x32>
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	43da      	mvns	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	401a      	ands	r2, r3
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa2:	43d9      	mvns	r1, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fa8:	4313      	orrs	r3, r2
         );
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3724      	adds	r7, #36	@ 0x24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fc8:	d301      	bcc.n	8007fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e00f      	b.n	8007fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fce:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff8 <SysTick_Config+0x40>)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fd6:	210f      	movs	r1, #15
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fdc:	f7ff ff8e 	bl	8007efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <SysTick_Config+0x40>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fe6:	4b04      	ldr	r3, [pc, #16]	@ (8007ff8 <SysTick_Config+0x40>)
 8007fe8:	2207      	movs	r2, #7
 8007fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	e000e010 	.word	0xe000e010

08007ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff ff47 	bl	8007e98 <__NVIC_SetPriorityGrouping>
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008012:	b580      	push	{r7, lr}
 8008014:	b086      	sub	sp, #24
 8008016:	af00      	add	r7, sp, #0
 8008018:	4603      	mov	r3, r0
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008024:	f7ff ff5c 	bl	8007ee0 <__NVIC_GetPriorityGrouping>
 8008028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	f7ff ff8e 	bl	8007f50 <NVIC_EncodePriority>
 8008034:	4602      	mov	r2, r0
 8008036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800803a:	4611      	mov	r1, r2
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff ff5d 	bl	8007efc <__NVIC_SetPriority>
}
 8008042:	bf00      	nop
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff ffb0 	bl	8007fb8 <SysTick_Config>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008070:	f7ff fee2 	bl	8007e38 <HAL_GetTick>
 8008074:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d008      	beq.n	8008094 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2280      	movs	r2, #128	@ 0x80
 8008086:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e052      	b.n	800813a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0216 	bic.w	r2, r2, #22
 80080a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695a      	ldr	r2, [r3, #20]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <HAL_DMA_Abort+0x62>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0208 	bic.w	r2, r2, #8
 80080d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080e4:	e013      	b.n	800810e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080e6:	f7ff fea7 	bl	8007e38 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	d90c      	bls.n	800810e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2203      	movs	r2, #3
 80080fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e015      	b.n	800813a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e4      	bne.n	80080e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008120:	223f      	movs	r2, #63	@ 0x3f
 8008122:	409a      	lsls	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	@ 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008156:	2300      	movs	r3, #0
 8008158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	e159      	b.n	8008414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008160:	2201      	movs	r2, #1
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4013      	ands	r3, r2
 8008172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	429a      	cmp	r2, r3
 800817a:	f040 8148 	bne.w	800840e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	2b01      	cmp	r3, #1
 8008188:	d005      	beq.n	8008196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008192:	2b02      	cmp	r3, #2
 8008194:	d130      	bne.n	80081f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	2203      	movs	r2, #3
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	43db      	mvns	r3, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	4013      	ands	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	4313      	orrs	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081cc:	2201      	movs	r2, #1
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	4013      	ands	r3, r2
 80081da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	f003 0201 	and.w	r2, r3, #1
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	2b03      	cmp	r3, #3
 8008202:	d017      	beq.n	8008234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	2203      	movs	r2, #3
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	43db      	mvns	r3, r3
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	4013      	ands	r3, r2
 800821a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	4313      	orrs	r3, r2
 800822c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d123      	bne.n	8008288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	08da      	lsrs	r2, r3, #3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3208      	adds	r2, #8
 8008248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	220f      	movs	r2, #15
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	43db      	mvns	r3, r3
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4013      	ands	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	4313      	orrs	r3, r2
 8008278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	08da      	lsrs	r2, r3, #3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3208      	adds	r2, #8
 8008282:	69b9      	ldr	r1, [r7, #24]
 8008284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	2203      	movs	r2, #3
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	43db      	mvns	r3, r3
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	4013      	ands	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f003 0203 	and.w	r2, r3, #3
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	fa02 f303 	lsl.w	r3, r2, r3
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80a2 	beq.w	800840e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	4b57      	ldr	r3, [pc, #348]	@ (800842c <HAL_GPIO_Init+0x2e8>)
 80082d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d2:	4a56      	ldr	r2, [pc, #344]	@ (800842c <HAL_GPIO_Init+0x2e8>)
 80082d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80082da:	4b54      	ldr	r3, [pc, #336]	@ (800842c <HAL_GPIO_Init+0x2e8>)
 80082dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082e6:	4a52      	ldr	r2, [pc, #328]	@ (8008430 <HAL_GPIO_Init+0x2ec>)
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	089b      	lsrs	r3, r3, #2
 80082ec:	3302      	adds	r3, #2
 80082ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	220f      	movs	r2, #15
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	43db      	mvns	r3, r3
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	4013      	ands	r3, r2
 8008308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a49      	ldr	r2, [pc, #292]	@ (8008434 <HAL_GPIO_Init+0x2f0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d019      	beq.n	8008346 <HAL_GPIO_Init+0x202>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a48      	ldr	r2, [pc, #288]	@ (8008438 <HAL_GPIO_Init+0x2f4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d013      	beq.n	8008342 <HAL_GPIO_Init+0x1fe>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a47      	ldr	r2, [pc, #284]	@ (800843c <HAL_GPIO_Init+0x2f8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00d      	beq.n	800833e <HAL_GPIO_Init+0x1fa>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a46      	ldr	r2, [pc, #280]	@ (8008440 <HAL_GPIO_Init+0x2fc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d007      	beq.n	800833a <HAL_GPIO_Init+0x1f6>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a45      	ldr	r2, [pc, #276]	@ (8008444 <HAL_GPIO_Init+0x300>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d101      	bne.n	8008336 <HAL_GPIO_Init+0x1f2>
 8008332:	2304      	movs	r3, #4
 8008334:	e008      	b.n	8008348 <HAL_GPIO_Init+0x204>
 8008336:	2307      	movs	r3, #7
 8008338:	e006      	b.n	8008348 <HAL_GPIO_Init+0x204>
 800833a:	2303      	movs	r3, #3
 800833c:	e004      	b.n	8008348 <HAL_GPIO_Init+0x204>
 800833e:	2302      	movs	r3, #2
 8008340:	e002      	b.n	8008348 <HAL_GPIO_Init+0x204>
 8008342:	2301      	movs	r3, #1
 8008344:	e000      	b.n	8008348 <HAL_GPIO_Init+0x204>
 8008346:	2300      	movs	r3, #0
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	f002 0203 	and.w	r2, r2, #3
 800834e:	0092      	lsls	r2, r2, #2
 8008350:	4093      	lsls	r3, r2
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	4313      	orrs	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008358:	4935      	ldr	r1, [pc, #212]	@ (8008430 <HAL_GPIO_Init+0x2ec>)
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	089b      	lsrs	r3, r3, #2
 800835e:	3302      	adds	r3, #2
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008366:	4b38      	ldr	r3, [pc, #224]	@ (8008448 <HAL_GPIO_Init+0x304>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	43db      	mvns	r3, r3
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	4013      	ands	r3, r2
 8008374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	4313      	orrs	r3, r2
 8008388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800838a:	4a2f      	ldr	r2, [pc, #188]	@ (8008448 <HAL_GPIO_Init+0x304>)
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008390:	4b2d      	ldr	r3, [pc, #180]	@ (8008448 <HAL_GPIO_Init+0x304>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	43db      	mvns	r3, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4013      	ands	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80083b4:	4a24      	ldr	r2, [pc, #144]	@ (8008448 <HAL_GPIO_Init+0x304>)
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083ba:	4b23      	ldr	r3, [pc, #140]	@ (8008448 <HAL_GPIO_Init+0x304>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	43db      	mvns	r3, r3
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	4013      	ands	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083de:	4a1a      	ldr	r2, [pc, #104]	@ (8008448 <HAL_GPIO_Init+0x304>)
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083e4:	4b18      	ldr	r3, [pc, #96]	@ (8008448 <HAL_GPIO_Init+0x304>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	43db      	mvns	r3, r3
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	4013      	ands	r3, r2
 80083f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008408:	4a0f      	ldr	r2, [pc, #60]	@ (8008448 <HAL_GPIO_Init+0x304>)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	3301      	adds	r3, #1
 8008412:	61fb      	str	r3, [r7, #28]
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b0f      	cmp	r3, #15
 8008418:	f67f aea2 	bls.w	8008160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	3724      	adds	r7, #36	@ 0x24
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40023800 	.word	0x40023800
 8008430:	40013800 	.word	0x40013800
 8008434:	40020000 	.word	0x40020000
 8008438:	40020400 	.word	0x40020400
 800843c:	40020800 	.word	0x40020800
 8008440:	40020c00 	.word	0x40020c00
 8008444:	40021000 	.word	0x40021000
 8008448:	40013c00 	.word	0x40013c00

0800844c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	807b      	strh	r3, [r7, #2]
 8008458:	4613      	mov	r3, r2
 800845a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800845c:	787b      	ldrb	r3, [r7, #1]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008462:	887a      	ldrh	r2, [r7, #2]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008468:	e003      	b.n	8008472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800846a:	887b      	ldrh	r3, [r7, #2]
 800846c:	041a      	lsls	r2, r3, #16
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	619a      	str	r2, [r3, #24]
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008490:	887a      	ldrh	r2, [r7, #2]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4013      	ands	r3, r2
 8008496:	041a      	lsls	r2, r3, #16
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	43d9      	mvns	r1, r3
 800849c:	887b      	ldrh	r3, [r7, #2]
 800849e:	400b      	ands	r3, r1
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	619a      	str	r2, [r3, #24]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e267      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d075      	beq.n	80085be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084d2:	4b88      	ldr	r3, [pc, #544]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 030c 	and.w	r3, r3, #12
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d00c      	beq.n	80084f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084de:	4b85      	ldr	r3, [pc, #532]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d112      	bne.n	8008510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ea:	4b82      	ldr	r3, [pc, #520]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084f6:	d10b      	bne.n	8008510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084f8:	4b7e      	ldr	r3, [pc, #504]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d05b      	beq.n	80085bc <HAL_RCC_OscConfig+0x108>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d157      	bne.n	80085bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e242      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008518:	d106      	bne.n	8008528 <HAL_RCC_OscConfig+0x74>
 800851a:	4b76      	ldr	r3, [pc, #472]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a75      	ldr	r2, [pc, #468]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	e01d      	b.n	8008564 <HAL_RCC_OscConfig+0xb0>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008530:	d10c      	bne.n	800854c <HAL_RCC_OscConfig+0x98>
 8008532:	4b70      	ldr	r3, [pc, #448]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a6f      	ldr	r2, [pc, #444]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	4b6d      	ldr	r3, [pc, #436]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a6c      	ldr	r2, [pc, #432]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	e00b      	b.n	8008564 <HAL_RCC_OscConfig+0xb0>
 800854c:	4b69      	ldr	r3, [pc, #420]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a68      	ldr	r2, [pc, #416]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	4b66      	ldr	r3, [pc, #408]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a65      	ldr	r2, [pc, #404]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 800855e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d013      	beq.n	8008594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800856c:	f7ff fc64 	bl	8007e38 <HAL_GetTick>
 8008570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008572:	e008      	b.n	8008586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008574:	f7ff fc60 	bl	8007e38 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b64      	cmp	r3, #100	@ 0x64
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e207      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008586:	4b5b      	ldr	r3, [pc, #364]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0f0      	beq.n	8008574 <HAL_RCC_OscConfig+0xc0>
 8008592:	e014      	b.n	80085be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008594:	f7ff fc50 	bl	8007e38 <HAL_GetTick>
 8008598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800859a:	e008      	b.n	80085ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800859c:	f7ff fc4c 	bl	8007e38 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b64      	cmp	r3, #100	@ 0x64
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e1f3      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ae:	4b51      	ldr	r3, [pc, #324]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f0      	bne.n	800859c <HAL_RCC_OscConfig+0xe8>
 80085ba:	e000      	b.n	80085be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d063      	beq.n	8008692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ca:	4b4a      	ldr	r3, [pc, #296]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 030c 	and.w	r3, r3, #12
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085d6:	4b47      	ldr	r3, [pc, #284]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d11c      	bne.n	800861c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085e2:	4b44      	ldr	r3, [pc, #272]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085ee:	4b41      	ldr	r3, [pc, #260]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_RCC_OscConfig+0x152>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d001      	beq.n	8008606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e1c7      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008606:	4b3b      	ldr	r3, [pc, #236]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4937      	ldr	r1, [pc, #220]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008616:	4313      	orrs	r3, r2
 8008618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800861a:	e03a      	b.n	8008692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d020      	beq.n	8008666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008624:	4b34      	ldr	r3, [pc, #208]	@ (80086f8 <HAL_RCC_OscConfig+0x244>)
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862a:	f7ff fc05 	bl	8007e38 <HAL_GetTick>
 800862e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008630:	e008      	b.n	8008644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008632:	f7ff fc01 	bl	8007e38 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e1a8      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008644:	4b2b      	ldr	r3, [pc, #172]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0f0      	beq.n	8008632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008650:	4b28      	ldr	r3, [pc, #160]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4925      	ldr	r1, [pc, #148]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]
 8008664:	e015      	b.n	8008692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008666:	4b24      	ldr	r3, [pc, #144]	@ (80086f8 <HAL_RCC_OscConfig+0x244>)
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7ff fbe4 	bl	8007e38 <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008674:	f7ff fbe0 	bl	8007e38 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e187      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008686:	4b1b      	ldr	r3, [pc, #108]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d036      	beq.n	800870c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d016      	beq.n	80086d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086a6:	4b15      	ldr	r3, [pc, #84]	@ (80086fc <HAL_RCC_OscConfig+0x248>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ac:	f7ff fbc4 	bl	8007e38 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086b4:	f7ff fbc0 	bl	8007e38 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e167      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086c6:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <HAL_RCC_OscConfig+0x240>)
 80086c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f0      	beq.n	80086b4 <HAL_RCC_OscConfig+0x200>
 80086d2:	e01b      	b.n	800870c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086d4:	4b09      	ldr	r3, [pc, #36]	@ (80086fc <HAL_RCC_OscConfig+0x248>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086da:	f7ff fbad 	bl	8007e38 <HAL_GetTick>
 80086de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086e0:	e00e      	b.n	8008700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e2:	f7ff fba9 	bl	8007e38 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d907      	bls.n	8008700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e150      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
 80086f4:	40023800 	.word	0x40023800
 80086f8:	42470000 	.word	0x42470000
 80086fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008700:	4b88      	ldr	r3, [pc, #544]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1ea      	bne.n	80086e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 8097 	beq.w	8008848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800871e:	4b81      	ldr	r3, [pc, #516]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10f      	bne.n	800874a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800872a:	2300      	movs	r3, #0
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	4b7d      	ldr	r3, [pc, #500]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008732:	4a7c      	ldr	r2, [pc, #496]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008738:	6413      	str	r3, [r2, #64]	@ 0x40
 800873a:	4b7a      	ldr	r3, [pc, #488]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008742:	60bb      	str	r3, [r7, #8]
 8008744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800874a:	4b77      	ldr	r3, [pc, #476]	@ (8008928 <HAL_RCC_OscConfig+0x474>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008752:	2b00      	cmp	r3, #0
 8008754:	d118      	bne.n	8008788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008756:	4b74      	ldr	r3, [pc, #464]	@ (8008928 <HAL_RCC_OscConfig+0x474>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a73      	ldr	r2, [pc, #460]	@ (8008928 <HAL_RCC_OscConfig+0x474>)
 800875c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008762:	f7ff fb69 	bl	8007e38 <HAL_GetTick>
 8008766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008768:	e008      	b.n	800877c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800876a:	f7ff fb65 	bl	8007e38 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e10c      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800877c:	4b6a      	ldr	r3, [pc, #424]	@ (8008928 <HAL_RCC_OscConfig+0x474>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0f0      	beq.n	800876a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d106      	bne.n	800879e <HAL_RCC_OscConfig+0x2ea>
 8008790:	4b64      	ldr	r3, [pc, #400]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008794:	4a63      	ldr	r2, [pc, #396]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008796:	f043 0301 	orr.w	r3, r3, #1
 800879a:	6713      	str	r3, [r2, #112]	@ 0x70
 800879c:	e01c      	b.n	80087d8 <HAL_RCC_OscConfig+0x324>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d10c      	bne.n	80087c0 <HAL_RCC_OscConfig+0x30c>
 80087a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087aa:	4a5e      	ldr	r2, [pc, #376]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087ac:	f043 0304 	orr.w	r3, r3, #4
 80087b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80087b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b6:	4a5b      	ldr	r2, [pc, #364]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087b8:	f043 0301 	orr.w	r3, r3, #1
 80087bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80087be:	e00b      	b.n	80087d8 <HAL_RCC_OscConfig+0x324>
 80087c0:	4b58      	ldr	r3, [pc, #352]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087c4:	4a57      	ldr	r2, [pc, #348]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80087cc:	4b55      	ldr	r3, [pc, #340]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d0:	4a54      	ldr	r2, [pc, #336]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80087d2:	f023 0304 	bic.w	r3, r3, #4
 80087d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d015      	beq.n	800880c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e0:	f7ff fb2a 	bl	8007e38 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e6:	e00a      	b.n	80087fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087e8:	f7ff fb26 	bl	8007e38 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e0cb      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087fe:	4b49      	ldr	r3, [pc, #292]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0ee      	beq.n	80087e8 <HAL_RCC_OscConfig+0x334>
 800880a:	e014      	b.n	8008836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800880c:	f7ff fb14 	bl	8007e38 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008812:	e00a      	b.n	800882a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008814:	f7ff fb10 	bl	8007e38 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008822:	4293      	cmp	r3, r2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e0b5      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800882a:	4b3e      	ldr	r3, [pc, #248]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 800882c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1ee      	bne.n	8008814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d105      	bne.n	8008848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800883c:	4b39      	ldr	r3, [pc, #228]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 800883e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008840:	4a38      	ldr	r2, [pc, #224]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008846:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80a1 	beq.w	8008994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008852:	4b34      	ldr	r3, [pc, #208]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 030c 	and.w	r3, r3, #12
 800885a:	2b08      	cmp	r3, #8
 800885c:	d05c      	beq.n	8008918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d141      	bne.n	80088ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008866:	4b31      	ldr	r3, [pc, #196]	@ (800892c <HAL_RCC_OscConfig+0x478>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800886c:	f7ff fae4 	bl	8007e38 <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008872:	e008      	b.n	8008886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008874:	f7ff fae0 	bl	8007e38 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b02      	cmp	r3, #2
 8008880:	d901      	bls.n	8008886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e087      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008886:	4b27      	ldr	r3, [pc, #156]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f0      	bne.n	8008874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69da      	ldr	r2, [r3, #28]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a0:	019b      	lsls	r3, r3, #6
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	3b01      	subs	r3, #1
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b4:	061b      	lsls	r3, r3, #24
 80088b6:	491b      	ldr	r1, [pc, #108]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088bc:	4b1b      	ldr	r3, [pc, #108]	@ (800892c <HAL_RCC_OscConfig+0x478>)
 80088be:	2201      	movs	r2, #1
 80088c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088c2:	f7ff fab9 	bl	8007e38 <HAL_GetTick>
 80088c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088ca:	f7ff fab5 	bl	8007e38 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e05c      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088dc:	4b11      	ldr	r3, [pc, #68]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0f0      	beq.n	80088ca <HAL_RCC_OscConfig+0x416>
 80088e8:	e054      	b.n	8008994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088ea:	4b10      	ldr	r3, [pc, #64]	@ (800892c <HAL_RCC_OscConfig+0x478>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f0:	f7ff faa2 	bl	8007e38 <HAL_GetTick>
 80088f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088f6:	e008      	b.n	800890a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088f8:	f7ff fa9e 	bl	8007e38 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b02      	cmp	r3, #2
 8008904:	d901      	bls.n	800890a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e045      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800890a:	4b06      	ldr	r3, [pc, #24]	@ (8008924 <HAL_RCC_OscConfig+0x470>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f0      	bne.n	80088f8 <HAL_RCC_OscConfig+0x444>
 8008916:	e03d      	b.n	8008994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d107      	bne.n	8008930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e038      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
 8008924:	40023800 	.word	0x40023800
 8008928:	40007000 	.word	0x40007000
 800892c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008930:	4b1b      	ldr	r3, [pc, #108]	@ (80089a0 <HAL_RCC_OscConfig+0x4ec>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d028      	beq.n	8008990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008948:	429a      	cmp	r2, r3
 800894a:	d121      	bne.n	8008990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008956:	429a      	cmp	r2, r3
 8008958:	d11a      	bne.n	8008990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008960:	4013      	ands	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008968:	4293      	cmp	r3, r2
 800896a:	d111      	bne.n	8008990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	3b01      	subs	r3, #1
 800897a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800897c:	429a      	cmp	r2, r3
 800897e:	d107      	bne.n	8008990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800898c:	429a      	cmp	r2, r3
 800898e:	d001      	beq.n	8008994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40023800 	.word	0x40023800

080089a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0cc      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089b8:	4b68      	ldr	r3, [pc, #416]	@ (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d90c      	bls.n	80089e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c6:	4b65      	ldr	r3, [pc, #404]	@ (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ce:	4b63      	ldr	r3, [pc, #396]	@ (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d001      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e0b8      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d020      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089f8:	4b59      	ldr	r3, [pc, #356]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	4a58      	ldr	r2, [pc, #352]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 80089fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a10:	4b53      	ldr	r3, [pc, #332]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	4a52      	ldr	r2, [pc, #328]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a1c:	4b50      	ldr	r3, [pc, #320]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	494d      	ldr	r1, [pc, #308]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d044      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d107      	bne.n	8008a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a42:	4b47      	ldr	r3, [pc, #284]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d119      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e07f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d003      	beq.n	8008a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d107      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a62:	4b3f      	ldr	r3, [pc, #252]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e06f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a72:	4b3b      	ldr	r3, [pc, #236]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e067      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a82:	4b37      	ldr	r3, [pc, #220]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f023 0203 	bic.w	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	4934      	ldr	r1, [pc, #208]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a94:	f7ff f9d0 	bl	8007e38 <HAL_GetTick>
 8008a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a9a:	e00a      	b.n	8008ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a9c:	f7ff f9cc 	bl	8007e38 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e04f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f003 020c 	and.w	r2, r3, #12
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d1eb      	bne.n	8008a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ac4:	4b25      	ldr	r3, [pc, #148]	@ (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d20c      	bcs.n	8008aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ad2:	4b22      	ldr	r3, [pc, #136]	@ (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ada:	4b20      	ldr	r3, [pc, #128]	@ (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d001      	beq.n	8008aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e032      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d008      	beq.n	8008b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008af8:	4b19      	ldr	r3, [pc, #100]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	4916      	ldr	r1, [pc, #88]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b16:	4b12      	ldr	r3, [pc, #72]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	490e      	ldr	r1, [pc, #56]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b2a:	f000 f821 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	4b0b      	ldr	r3, [pc, #44]	@ (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	091b      	lsrs	r3, r3, #4
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	490a      	ldr	r1, [pc, #40]	@ (8008b64 <HAL_RCC_ClockConfig+0x1c0>)
 8008b3c:	5ccb      	ldrb	r3, [r1, r3]
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	4a09      	ldr	r2, [pc, #36]	@ (8008b68 <HAL_RCC_ClockConfig+0x1c4>)
 8008b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b46:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <HAL_RCC_ClockConfig+0x1c8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff f930 	bl	8007db0 <HAL_InitTick>

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	40023c00 	.word	0x40023c00
 8008b60:	40023800 	.word	0x40023800
 8008b64:	08010194 	.word	0x08010194
 8008b68:	20000000 	.word	0x20000000
 8008b6c:	20000004 	.word	0x20000004

08008b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b74:	b090      	sub	sp, #64	@ 0x40
 8008b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b80:	2300      	movs	r3, #0
 8008b82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b88:	4b59      	ldr	r3, [pc, #356]	@ (8008cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 030c 	and.w	r3, r3, #12
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d00d      	beq.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8008b94:	2b08      	cmp	r3, #8
 8008b96:	f200 80a1 	bhi.w	8008cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d003      	beq.n	8008baa <HAL_RCC_GetSysClockFreq+0x3a>
 8008ba2:	e09b      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ba4:	4b53      	ldr	r3, [pc, #332]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008ba8:	e09b      	b.n	8008ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008baa:	4b53      	ldr	r3, [pc, #332]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008bac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bae:	e098      	b.n	8008ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8008cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bba:	4b4d      	ldr	r3, [pc, #308]	@ (8008cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d028      	beq.n	8008c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8008cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	099b      	lsrs	r3, r3, #6
 8008bcc:	2200      	movs	r2, #0
 8008bce:	623b      	str	r3, [r7, #32]
 8008bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4b47      	ldr	r3, [pc, #284]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008bdc:	fb03 f201 	mul.w	r2, r3, r1
 8008be0:	2300      	movs	r3, #0
 8008be2:	fb00 f303 	mul.w	r3, r0, r3
 8008be6:	4413      	add	r3, r2
 8008be8:	4a43      	ldr	r2, [pc, #268]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008bea:	fba0 1202 	umull	r1, r2, r0, r2
 8008bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bf0:	460a      	mov	r2, r1
 8008bf2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf6:	4413      	add	r3, r2
 8008bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	61bb      	str	r3, [r7, #24]
 8008c00:	61fa      	str	r2, [r7, #28]
 8008c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008c0a:	f7f8 f825 	bl	8000c58 <__aeabi_uldivmod>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4613      	mov	r3, r2
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c16:	e053      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c18:	4b35      	ldr	r3, [pc, #212]	@ (8008cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	099b      	lsrs	r3, r3, #6
 8008c1e:	2200      	movs	r2, #0
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	617a      	str	r2, [r7, #20]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008c2a:	f04f 0b00 	mov.w	fp, #0
 8008c2e:	4652      	mov	r2, sl
 8008c30:	465b      	mov	r3, fp
 8008c32:	f04f 0000 	mov.w	r0, #0
 8008c36:	f04f 0100 	mov.w	r1, #0
 8008c3a:	0159      	lsls	r1, r3, #5
 8008c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c40:	0150      	lsls	r0, r2, #5
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	ebb2 080a 	subs.w	r8, r2, sl
 8008c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008c62:	ebb2 0408 	subs.w	r4, r2, r8
 8008c66:	eb63 0509 	sbc.w	r5, r3, r9
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	00eb      	lsls	r3, r5, #3
 8008c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c78:	00e2      	lsls	r2, r4, #3
 8008c7a:	4614      	mov	r4, r2
 8008c7c:	461d      	mov	r5, r3
 8008c7e:	eb14 030a 	adds.w	r3, r4, sl
 8008c82:	603b      	str	r3, [r7, #0]
 8008c84:	eb45 030b 	adc.w	r3, r5, fp
 8008c88:	607b      	str	r3, [r7, #4]
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c96:	4629      	mov	r1, r5
 8008c98:	028b      	lsls	r3, r1, #10
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	028a      	lsls	r2, r1, #10
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008caa:	2200      	movs	r2, #0
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	60fa      	str	r2, [r7, #12]
 8008cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cb4:	f7f7 ffd0 	bl	8000c58 <__aeabi_uldivmod>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	0c1b      	lsrs	r3, r3, #16
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	3301      	adds	r3, #1
 8008ccc:	005b      	lsls	r3, r3, #1
 8008cce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008cda:	e002      	b.n	8008ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cdc:	4b05      	ldr	r3, [pc, #20]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3740      	adds	r7, #64	@ 0x40
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cee:	bf00      	nop
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	00f42400 	.word	0x00f42400
 8008cf8:	017d7840 	.word	0x017d7840

08008cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d00:	4b03      	ldr	r3, [pc, #12]	@ (8008d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d02:	681b      	ldr	r3, [r3, #0]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	20000000 	.word	0x20000000

08008d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d18:	f7ff fff0 	bl	8008cfc <HAL_RCC_GetHCLKFreq>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	4b05      	ldr	r3, [pc, #20]	@ (8008d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	0a9b      	lsrs	r3, r3, #10
 8008d24:	f003 0307 	and.w	r3, r3, #7
 8008d28:	4903      	ldr	r1, [pc, #12]	@ (8008d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d2a:	5ccb      	ldrb	r3, [r1, r3]
 8008d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40023800 	.word	0x40023800
 8008d38:	080101a4 	.word	0x080101a4

08008d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d40:	f7ff ffdc 	bl	8008cfc <HAL_RCC_GetHCLKFreq>
 8008d44:	4602      	mov	r2, r0
 8008d46:	4b05      	ldr	r3, [pc, #20]	@ (8008d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	0b5b      	lsrs	r3, r3, #13
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	4903      	ldr	r1, [pc, #12]	@ (8008d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d52:	5ccb      	ldrb	r3, [r1, r3]
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	080101a4 	.word	0x080101a4

08008d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e07b      	b.n	8008e6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d108      	bne.n	8008d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d86:	d009      	beq.n	8008d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	61da      	str	r2, [r3, #28]
 8008d8e:	e005      	b.n	8008d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fe fd98 	bl	80078ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e16:	431a      	orrs	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e20:	ea42 0103 	orr.w	r1, r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	0c1b      	lsrs	r3, r3, #16
 8008e3a:	f003 0104 	and.w	r1, r3, #4
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e42:	f003 0210 	and.w	r2, r3, #16
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69da      	ldr	r2, [r3, #28]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b088      	sub	sp, #32
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	4613      	mov	r3, r2
 8008e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <HAL_SPI_Transmit+0x22>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e12d      	b.n	80090f4 <HAL_SPI_Transmit+0x27e>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ea0:	f7fe ffca 	bl	8007e38 <HAL_GetTick>
 8008ea4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d002      	beq.n	8008ebc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008eba:	e116      	b.n	80090ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_SPI_Transmit+0x52>
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ecc:	e10d      	b.n	80090ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	88fa      	ldrh	r2, [r7, #6]
 8008ee6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	88fa      	ldrh	r2, [r7, #6]
 8008eec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f14:	d10f      	bne.n	8008f36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f40:	2b40      	cmp	r3, #64	@ 0x40
 8008f42:	d007      	beq.n	8008f54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f5c:	d14f      	bne.n	8008ffe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <HAL_SPI_Transmit+0xf6>
 8008f66:	8afb      	ldrh	r3, [r7, #22]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d142      	bne.n	8008ff2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f70:	881a      	ldrh	r2, [r3, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f7c:	1c9a      	adds	r2, r3, #2
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f90:	e02f      	b.n	8008ff2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d112      	bne.n	8008fc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa4:	881a      	ldrh	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb0:	1c9a      	adds	r2, r3, #2
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008fc4:	e015      	b.n	8008ff2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fc6:	f7fe ff37 	bl	8007e38 <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d803      	bhi.n	8008fde <HAL_SPI_Transmit+0x168>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fdc:	d102      	bne.n	8008fe4 <HAL_SPI_Transmit+0x16e>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d106      	bne.n	8008ff2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008ff0:	e07b      	b.n	80090ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1ca      	bne.n	8008f92 <HAL_SPI_Transmit+0x11c>
 8008ffc:	e050      	b.n	80090a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <HAL_SPI_Transmit+0x196>
 8009006:	8afb      	ldrh	r3, [r7, #22]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d144      	bne.n	8009096 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	7812      	ldrb	r2, [r2, #0]
 8009018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009028:	b29b      	uxth	r3, r3
 800902a:	3b01      	subs	r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009032:	e030      	b.n	8009096 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b02      	cmp	r3, #2
 8009040:	d113      	bne.n	800906a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	330c      	adds	r3, #12
 800904c:	7812      	ldrb	r2, [r2, #0]
 800904e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800905e:	b29b      	uxth	r3, r3
 8009060:	3b01      	subs	r3, #1
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009068:	e015      	b.n	8009096 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800906a:	f7fe fee5 	bl	8007e38 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d803      	bhi.n	8009082 <HAL_SPI_Transmit+0x20c>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009080:	d102      	bne.n	8009088 <HAL_SPI_Transmit+0x212>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009094:	e029      	b.n	80090ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800909a:	b29b      	uxth	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1c9      	bne.n	8009034 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 fccb 	bl	8009a40 <SPI_EndRxTxTransaction>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090be:	2300      	movs	r3, #0
 80090c0:	613b      	str	r3, [r7, #16]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	613b      	str	r3, [r7, #16]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	613b      	str	r3, [r7, #16]
 80090d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e003      	b.n	80090ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80090f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3720      	adds	r7, #32
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	4613      	mov	r3, r2
 800910a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b01      	cmp	r3, #1
 800911a:	d002      	beq.n	8009122 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800911c:	2302      	movs	r3, #2
 800911e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009120:	e0fb      	b.n	800931a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800912a:	d112      	bne.n	8009152 <HAL_SPI_Receive+0x56>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10e      	bne.n	8009152 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2204      	movs	r2, #4
 8009138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800913c:	88fa      	ldrh	r2, [r7, #6]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	4613      	mov	r3, r2
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 f8ef 	bl	800932c <HAL_SPI_TransmitReceive>
 800914e:	4603      	mov	r3, r0
 8009150:	e0e8      	b.n	8009324 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <HAL_SPI_Receive+0x64>
 800915c:	2302      	movs	r3, #2
 800915e:	e0e1      	b.n	8009324 <HAL_SPI_Receive+0x228>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009168:	f7fe fe66 	bl	8007e38 <HAL_GetTick>
 800916c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <HAL_SPI_Receive+0x7e>
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d102      	bne.n	8009180 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800917e:	e0cc      	b.n	800931a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2204      	movs	r2, #4
 8009184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	88fa      	ldrh	r2, [r7, #6]
 8009198:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	88fa      	ldrh	r2, [r7, #6]
 800919e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091c6:	d10f      	bne.n	80091e8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f2:	2b40      	cmp	r3, #64	@ 0x40
 80091f4:	d007      	beq.n	8009206 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009204:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d16a      	bne.n	80092e4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800920e:	e032      	b.n	8009276 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b01      	cmp	r3, #1
 800921c:	d115      	bne.n	800924a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f103 020c 	add.w	r2, r3, #12
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922a:	7812      	ldrb	r2, [r2, #0]
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800923e:	b29b      	uxth	r3, r3
 8009240:	3b01      	subs	r3, #1
 8009242:	b29a      	uxth	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009248:	e015      	b.n	8009276 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800924a:	f7fe fdf5 	bl	8007e38 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	429a      	cmp	r2, r3
 8009258:	d803      	bhi.n	8009262 <HAL_SPI_Receive+0x166>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009260:	d102      	bne.n	8009268 <HAL_SPI_Receive+0x16c>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009274:	e051      	b.n	800931a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927a:	b29b      	uxth	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1c7      	bne.n	8009210 <HAL_SPI_Receive+0x114>
 8009280:	e035      	b.n	80092ee <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b01      	cmp	r3, #1
 800928e:	d113      	bne.n	80092b8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929a:	b292      	uxth	r2, r2
 800929c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	1c9a      	adds	r2, r3, #2
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092b6:	e015      	b.n	80092e4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092b8:	f7fe fdbe 	bl	8007e38 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d803      	bhi.n	80092d0 <HAL_SPI_Receive+0x1d4>
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092ce:	d102      	bne.n	80092d6 <HAL_SPI_Receive+0x1da>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80092e2:	e01a      	b.n	800931a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1c9      	bne.n	8009282 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fb3e 	bl	8009974 <SPI_EndRxTransaction>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2220      	movs	r2, #32
 8009302:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	75fb      	strb	r3, [r7, #23]
 8009310:	e003      	b.n	800931a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08c      	sub	sp, #48	@ 0x30
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800933a:	2301      	movs	r3, #1
 800933c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <HAL_SPI_TransmitReceive+0x26>
 800934e:	2302      	movs	r3, #2
 8009350:	e198      	b.n	8009684 <HAL_SPI_TransmitReceive+0x358>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800935a:	f7fe fd6d 	bl	8007e38 <HAL_GetTick>
 800935e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009374:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009378:	2b01      	cmp	r3, #1
 800937a:	d00f      	beq.n	800939c <HAL_SPI_TransmitReceive+0x70>
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009382:	d107      	bne.n	8009394 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <HAL_SPI_TransmitReceive+0x68>
 800938c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009390:	2b04      	cmp	r3, #4
 8009392:	d003      	beq.n	800939c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009394:	2302      	movs	r3, #2
 8009396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800939a:	e16d      	b.n	8009678 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <HAL_SPI_TransmitReceive+0x82>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <HAL_SPI_TransmitReceive+0x82>
 80093a8:	887b      	ldrh	r3, [r7, #2]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d103      	bne.n	80093b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80093b4:	e160      	b.n	8009678 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d003      	beq.n	80093ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2205      	movs	r2, #5
 80093c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	887a      	ldrh	r2, [r7, #2]
 80093da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	887a      	ldrh	r2, [r7, #2]
 80093e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	887a      	ldrh	r2, [r7, #2]
 80093ec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	887a      	ldrh	r2, [r7, #2]
 80093f2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940a:	2b40      	cmp	r3, #64	@ 0x40
 800940c:	d007      	beq.n	800941e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800941c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009426:	d17c      	bne.n	8009522 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <HAL_SPI_TransmitReceive+0x10a>
 8009430:	8b7b      	ldrh	r3, [r7, #26]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d16a      	bne.n	800950c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943a:	881a      	ldrh	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009446:	1c9a      	adds	r2, r3, #2
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009450:	b29b      	uxth	r3, r3
 8009452:	3b01      	subs	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800945a:	e057      	b.n	800950c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b02      	cmp	r3, #2
 8009468:	d11b      	bne.n	80094a2 <HAL_SPI_TransmitReceive+0x176>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800946e:	b29b      	uxth	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d016      	beq.n	80094a2 <HAL_SPI_TransmitReceive+0x176>
 8009474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009476:	2b01      	cmp	r3, #1
 8009478:	d113      	bne.n	80094a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947e:	881a      	ldrh	r2, [r3, #0]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948a:	1c9a      	adds	r2, r3, #2
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d119      	bne.n	80094e4 <HAL_SPI_TransmitReceive+0x1b8>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d014      	beq.n	80094e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	b292      	uxth	r2, r2
 80094c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094cc:	1c9a      	adds	r2, r3, #2
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094e0:	2301      	movs	r3, #1
 80094e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80094e4:	f7fe fca8 	bl	8007e38 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d80b      	bhi.n	800950c <HAL_SPI_TransmitReceive+0x1e0>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094fa:	d007      	beq.n	800950c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800950a:	e0b5      	b.n	8009678 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009510:	b29b      	uxth	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1a2      	bne.n	800945c <HAL_SPI_TransmitReceive+0x130>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800951a:	b29b      	uxth	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d19d      	bne.n	800945c <HAL_SPI_TransmitReceive+0x130>
 8009520:	e080      	b.n	8009624 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <HAL_SPI_TransmitReceive+0x204>
 800952a:	8b7b      	ldrh	r3, [r7, #26]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d16f      	bne.n	8009610 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	330c      	adds	r3, #12
 800953a:	7812      	ldrb	r2, [r2, #0]
 800953c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800954c:	b29b      	uxth	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009556:	e05b      	b.n	8009610 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b02      	cmp	r3, #2
 8009564:	d11c      	bne.n	80095a0 <HAL_SPI_TransmitReceive+0x274>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800956a:	b29b      	uxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d017      	beq.n	80095a0 <HAL_SPI_TransmitReceive+0x274>
 8009570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009572:	2b01      	cmp	r3, #1
 8009574:	d114      	bne.n	80095a0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	7812      	ldrb	r2, [r2, #0]
 8009582:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d119      	bne.n	80095e2 <HAL_SPI_TransmitReceive+0x2b6>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d014      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095de:	2301      	movs	r3, #1
 80095e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095e2:	f7fe fc29 	bl	8007e38 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d803      	bhi.n	80095fa <HAL_SPI_TransmitReceive+0x2ce>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095f8:	d102      	bne.n	8009600 <HAL_SPI_TransmitReceive+0x2d4>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d107      	bne.n	8009610 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800960e:	e033      	b.n	8009678 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d19e      	bne.n	8009558 <HAL_SPI_TransmitReceive+0x22c>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800961e:	b29b      	uxth	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d199      	bne.n	8009558 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009626:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fa09 	bl	8009a40 <SPI_EndRxTxTransaction>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2220      	movs	r2, #32
 800963e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8009640:	e01a      	b.n	8009678 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800966e:	e003      	b.n	8009678 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009680:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009684:	4618      	mov	r0, r3
 8009686:	3730      	adds	r7, #48	@ 0x30
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009698:	4b6e      	ldr	r3, [pc, #440]	@ (8009854 <HAL_SPI_Abort+0x1c8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a6e      	ldr	r2, [pc, #440]	@ (8009858 <HAL_SPI_Abort+0x1cc>)
 800969e:	fba2 2303 	umull	r2, r3, r2, r3
 80096a2:	0a5b      	lsrs	r3, r3, #9
 80096a4:	2264      	movs	r2, #100	@ 0x64
 80096a6:	fb02 f303 	mul.w	r3, r2, r3
 80096aa:	617b      	str	r3, [r7, #20]
  count = resetcount;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 0220 	bic.w	r2, r2, #32
 80096be:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ca:	2b80      	cmp	r3, #128	@ 0x80
 80096cc:	d117      	bne.n	80096fe <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a62      	ldr	r2, [pc, #392]	@ (800985c <HAL_SPI_Abort+0x1d0>)
 80096d2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d106      	bne.n	80096e8 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80096e6:	e008      	b.n	80096fa <HAL_SPI_Abort+0x6e>
      }
      count--;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b07      	cmp	r3, #7
 80096f8:	d1ec      	bne.n	80096d4 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009708:	2b40      	cmp	r3, #64	@ 0x40
 800970a:	d117      	bne.n	800973c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a54      	ldr	r2, [pc, #336]	@ (8009860 <HAL_SPI_Abort+0x1d4>)
 8009710:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d106      	bne.n	8009726 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009724:	e008      	b.n	8009738 <HAL_SPI_Abort+0xac>
      }
      count--;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	3b01      	subs	r3, #1
 800972a:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b07      	cmp	r3, #7
 8009736:	d1ec      	bne.n	8009712 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b02      	cmp	r3, #2
 8009748:	d12e      	bne.n	80097a8 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800974e:	2b00      	cmp	r3, #0
 8009750:	d02a      	beq.n	80097a8 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009756:	2200      	movs	r2, #0
 8009758:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe fc7f 	bl	8008062 <HAL_DMA_Abort>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2240      	movs	r2, #64	@ 0x40
 800976e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0202 	bic.w	r2, r2, #2
 800977e:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	655a      	str	r2, [r3, #84]	@ 0x54
          break;
 8009792:	e009      	b.n	80097a8 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	3b01      	subs	r3, #1
 8009798:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0eb      	beq.n	8009780 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d122      	bne.n	80097fc <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01e      	beq.n	80097fc <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c2:	2200      	movs	r2, #0
 80097c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fc49 	bl	8008062 <HAL_DMA_Abort>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2240      	movs	r2, #64	@ 0x40
 80097da:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097ea:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980c:	2b40      	cmp	r3, #64	@ 0x40
 800980e:	d102      	bne.n	8009816 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	77fb      	strb	r3, [r7, #31]
 8009814:	e002      	b.n	800981c <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800981c:	2300      	movs	r3, #0
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	613b      	str	r3, [r7, #16]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	60fb      	str	r3, [r7, #12]
 800983e:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return errorcode;
 8009848:	7ffb      	ldrb	r3, [r7, #31]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3720      	adds	r7, #32
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20000000 	.word	0x20000000
 8009858:	057619f1 	.word	0x057619f1
 800985c:	08009b79 	.word	0x08009b79
 8009860:	08009ae9 	.word	0x08009ae9

08009864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009874:	f7fe fae0 	bl	8007e38 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	1a9b      	subs	r3, r3, r2
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4413      	add	r3, r2
 8009882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009884:	f7fe fad8 	bl	8007e38 <HAL_GetTick>
 8009888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800988a:	4b39      	ldr	r3, [pc, #228]	@ (8009970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	015b      	lsls	r3, r3, #5
 8009890:	0d1b      	lsrs	r3, r3, #20
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	fb02 f303 	mul.w	r3, r2, r3
 8009898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800989a:	e054      	b.n	8009946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098a2:	d050      	beq.n	8009946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098a4:	f7fe fac8 	bl	8007e38 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d902      	bls.n	80098ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d13d      	bne.n	8009936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80098c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098d2:	d111      	bne.n	80098f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098dc:	d004      	beq.n	80098e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e6:	d107      	bne.n	80098f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009900:	d10f      	bne.n	8009922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e017      	b.n	8009966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	3b01      	subs	r3, #1
 8009944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4013      	ands	r3, r2
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	429a      	cmp	r2, r3
 8009954:	bf0c      	ite	eq
 8009956:	2301      	moveq	r3, #1
 8009958:	2300      	movne	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	429a      	cmp	r2, r3
 8009962:	d19b      	bne.n	800989c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000000 	.word	0x20000000

08009974 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af02      	add	r7, sp, #8
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009988:	d111      	bne.n	80099ae <SPI_EndRxTransaction+0x3a>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009992:	d004      	beq.n	800999e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800999c:	d107      	bne.n	80099ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099b6:	d12a      	bne.n	8009a0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099c0:	d012      	beq.n	80099e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2200      	movs	r2, #0
 80099ca:	2180      	movs	r1, #128	@ 0x80
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7ff ff49 	bl	8009864 <SPI_WaitFlagStateUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d02d      	beq.n	8009a34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099dc:	f043 0220 	orr.w	r2, r3, #32
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e026      	b.n	8009a36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2200      	movs	r2, #0
 80099f0:	2101      	movs	r1, #1
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff ff36 	bl	8009864 <SPI_WaitFlagStateUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01a      	beq.n	8009a34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a02:	f043 0220 	orr.w	r2, r3, #32
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e013      	b.n	8009a36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2200      	movs	r2, #0
 8009a16:	2101      	movs	r1, #1
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f7ff ff23 	bl	8009864 <SPI_WaitFlagStateUntilTimeout>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a28:	f043 0220 	orr.w	r2, r3, #32
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e000      	b.n	8009a36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2201      	movs	r2, #1
 8009a54:	2102      	movs	r1, #2
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff ff04 	bl	8009864 <SPI_WaitFlagStateUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a66:	f043 0220 	orr.w	r2, r3, #32
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e032      	b.n	8009ad8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a72:	4b1b      	ldr	r3, [pc, #108]	@ (8009ae0 <SPI_EndRxTxTransaction+0xa0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a1b      	ldr	r2, [pc, #108]	@ (8009ae4 <SPI_EndRxTxTransaction+0xa4>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	0d5b      	lsrs	r3, r3, #21
 8009a7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a82:	fb02 f303 	mul.w	r3, r2, r3
 8009a86:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a90:	d112      	bne.n	8009ab8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2180      	movs	r1, #128	@ 0x80
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f7ff fee1 	bl	8009864 <SPI_WaitFlagStateUntilTimeout>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d016      	beq.n	8009ad6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aac:	f043 0220 	orr.w	r2, r3, #32
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e00f      	b.n	8009ad8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ace:	2b80      	cmp	r3, #128	@ 0x80
 8009ad0:	d0f2      	beq.n	8009ab8 <SPI_EndRxTxTransaction+0x78>
 8009ad2:	e000      	b.n	8009ad6 <SPI_EndRxTxTransaction+0x96>
        break;
 8009ad4:	bf00      	nop
  }

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000000 	.word	0x20000000
 8009ae4:	165e9f81 	.word	0x165e9f81

08009ae8 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009af4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b70 <SPI_AbortRx_ISR+0x88>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a1e      	ldr	r2, [pc, #120]	@ (8009b74 <SPI_AbortRx_ISR+0x8c>)
 8009afa:	fba2 2303 	umull	r2, r3, r2, r3
 8009afe:	0a5b      	lsrs	r3, r3, #9
 8009b00:	2264      	movs	r2, #100	@ 0x64
 8009b02:	fb02 f303 	mul.w	r3, r2, r3
 8009b06:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b1a:	e009      	b.n	8009b30 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0eb      	beq.n	8009b08 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b3e:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009b4e:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8009b58:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2207      	movs	r2, #7
 8009b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	20000000 	.word	0x20000000
 8009b74:	057619f1 	.word	0x057619f1

08009b78 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b8e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b9e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2207      	movs	r2, #7
 8009ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e042      	b.n	8009c4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7fd ff34 	bl	8007a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2224      	movs	r2, #36	@ 0x24
 8009be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f9d1 	bl	8009fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	691a      	ldr	r2, [r3, #16]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695a      	ldr	r2, [r3, #20]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08a      	sub	sp, #40	@ 0x28
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	4613      	mov	r3, r2
 8009c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	d175      	bne.n	8009d60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <HAL_UART_Transmit+0x2c>
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e06e      	b.n	8009d62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2221      	movs	r2, #33	@ 0x21
 8009c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c92:	f7fe f8d1 	bl	8007e38 <HAL_GetTick>
 8009c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	88fa      	ldrh	r2, [r7, #6]
 8009c9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	88fa      	ldrh	r2, [r7, #6]
 8009ca2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cac:	d108      	bne.n	8009cc0 <HAL_UART_Transmit+0x6c>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	e003      	b.n	8009cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009cc8:	e02e      	b.n	8009d28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2180      	movs	r1, #128	@ 0x80
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f86d 	bl	8009db4 <UART_WaitOnFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d005      	beq.n	8009cec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e03a      	b.n	8009d62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	3302      	adds	r3, #2
 8009d06:	61bb      	str	r3, [r7, #24]
 8009d08:	e007      	b.n	8009d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	3301      	adds	r3, #1
 8009d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1cb      	bne.n	8009cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2140      	movs	r1, #64	@ 0x40
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f839 	bl	8009db4 <UART_WaitOnFlagUntilTimeout>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e006      	b.n	8009d62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2220      	movs	r2, #32
 8009d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e000      	b.n	8009d62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009d60:	2302      	movs	r3, #2
  }
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	4613      	mov	r3, r2
 8009d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d112      	bne.n	8009daa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <HAL_UART_Receive_IT+0x26>
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e00b      	b.n	8009dac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f860 	bl	8009e66 <UART_Start_Receive_IT>
 8009da6:	4603      	mov	r3, r0
 8009da8:	e000      	b.n	8009dac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009daa:	2302      	movs	r3, #2
  }
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dc4:	e03b      	b.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dcc:	d037      	beq.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dce:	f7fe f833 	bl	8007e38 <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	6a3a      	ldr	r2, [r7, #32]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d302      	bcc.n	8009de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e03a      	b.n	8009e5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f003 0304 	and.w	r3, r3, #4
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d023      	beq.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b80      	cmp	r3, #128	@ 0x80
 8009dfa:	d020      	beq.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b40      	cmp	r3, #64	@ 0x40
 8009e00:	d01d      	beq.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d116      	bne.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009e10:	2300      	movs	r3, #0
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 f857 	bl	8009eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2208      	movs	r2, #8
 8009e30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e00f      	b.n	8009e5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4013      	ands	r3, r2
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	bf0c      	ite	eq
 8009e4e:	2301      	moveq	r3, #1
 8009e50:	2300      	movne	r3, #0
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d0b4      	beq.n	8009dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	60f8      	str	r0, [r7, #12]
 8009e6e:	60b9      	str	r1, [r7, #8]
 8009e70:	4613      	mov	r3, r2
 8009e72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	88fa      	ldrh	r2, [r7, #6]
 8009e7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	88fa      	ldrh	r2, [r7, #6]
 8009e84:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2222      	movs	r2, #34	@ 0x22
 8009e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d007      	beq.n	8009eac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009eaa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0201 	orr.w	r2, r2, #1
 8009eba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0220 	orr.w	r2, r2, #32
 8009eca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b095      	sub	sp, #84	@ 0x54
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	330c      	adds	r3, #12
 8009ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	330c      	adds	r3, #12
 8009f00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f02:	643a      	str	r2, [r7, #64]	@ 0x40
 8009f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e5      	bne.n	8009ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3314      	adds	r3, #20
 8009f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	f023 0301 	bic.w	r3, r3, #1
 8009f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3314      	adds	r3, #20
 8009f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e5      	bne.n	8009f16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d119      	bne.n	8009f86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	330c      	adds	r3, #12
 8009f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f023 0310 	bic.w	r3, r3, #16
 8009f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	330c      	adds	r3, #12
 8009f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f72:	61ba      	str	r2, [r7, #24]
 8009f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	6979      	ldr	r1, [r7, #20]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e5      	bne.n	8009f52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f94:	bf00      	nop
 8009f96:	3754      	adds	r7, #84	@ 0x54
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fa4:	b0c0      	sub	sp, #256	@ 0x100
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fbc:	68d9      	ldr	r1, [r3, #12]
 8009fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	ea40 0301 	orr.w	r3, r0, r1
 8009fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009ff8:	f021 010c 	bic.w	r1, r1, #12
 8009ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a006:	430b      	orrs	r3, r1
 800a008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a01a:	6999      	ldr	r1, [r3, #24]
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	ea40 0301 	orr.w	r3, r0, r1
 800a026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	4b8f      	ldr	r3, [pc, #572]	@ (800a26c <UART_SetConfig+0x2cc>)
 800a030:	429a      	cmp	r2, r3
 800a032:	d005      	beq.n	800a040 <UART_SetConfig+0xa0>
 800a034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4b8d      	ldr	r3, [pc, #564]	@ (800a270 <UART_SetConfig+0x2d0>)
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d104      	bne.n	800a04a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a040:	f7fe fe7c 	bl	8008d3c <HAL_RCC_GetPCLK2Freq>
 800a044:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a048:	e003      	b.n	800a052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a04a:	f7fe fe63 	bl	8008d14 <HAL_RCC_GetPCLK1Freq>
 800a04e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a05c:	f040 810c 	bne.w	800a278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a064:	2200      	movs	r2, #0
 800a066:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a06a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a06e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a072:	4622      	mov	r2, r4
 800a074:	462b      	mov	r3, r5
 800a076:	1891      	adds	r1, r2, r2
 800a078:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a07a:	415b      	adcs	r3, r3
 800a07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a07e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a082:	4621      	mov	r1, r4
 800a084:	eb12 0801 	adds.w	r8, r2, r1
 800a088:	4629      	mov	r1, r5
 800a08a:	eb43 0901 	adc.w	r9, r3, r1
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	f04f 0300 	mov.w	r3, #0
 800a096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a09a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a09e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0a2:	4690      	mov	r8, r2
 800a0a4:	4699      	mov	r9, r3
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	eb18 0303 	adds.w	r3, r8, r3
 800a0ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	eb49 0303 	adc.w	r3, r9, r3
 800a0b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a0ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	18db      	adds	r3, r3, r3
 800a0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	eb42 0303 	adc.w	r3, r2, r3
 800a0da:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a0e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a0e4:	f7f6 fdb8 	bl	8000c58 <__aeabi_uldivmod>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4b61      	ldr	r3, [pc, #388]	@ (800a274 <UART_SetConfig+0x2d4>)
 800a0ee:	fba3 2302 	umull	r2, r3, r3, r2
 800a0f2:	095b      	lsrs	r3, r3, #5
 800a0f4:	011c      	lsls	r4, r3, #4
 800a0f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a100:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	1891      	adds	r1, r2, r2
 800a10e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a110:	415b      	adcs	r3, r3
 800a112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a118:	4641      	mov	r1, r8
 800a11a:	eb12 0a01 	adds.w	sl, r2, r1
 800a11e:	4649      	mov	r1, r9
 800a120:	eb43 0b01 	adc.w	fp, r3, r1
 800a124:	f04f 0200 	mov.w	r2, #0
 800a128:	f04f 0300 	mov.w	r3, #0
 800a12c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a138:	4692      	mov	sl, r2
 800a13a:	469b      	mov	fp, r3
 800a13c:	4643      	mov	r3, r8
 800a13e:	eb1a 0303 	adds.w	r3, sl, r3
 800a142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a146:	464b      	mov	r3, r9
 800a148:	eb4b 0303 	adc.w	r3, fp, r3
 800a14c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a15c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a164:	460b      	mov	r3, r1
 800a166:	18db      	adds	r3, r3, r3
 800a168:	643b      	str	r3, [r7, #64]	@ 0x40
 800a16a:	4613      	mov	r3, r2
 800a16c:	eb42 0303 	adc.w	r3, r2, r3
 800a170:	647b      	str	r3, [r7, #68]	@ 0x44
 800a172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a17a:	f7f6 fd6d 	bl	8000c58 <__aeabi_uldivmod>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4611      	mov	r1, r2
 800a184:	4b3b      	ldr	r3, [pc, #236]	@ (800a274 <UART_SetConfig+0x2d4>)
 800a186:	fba3 2301 	umull	r2, r3, r3, r1
 800a18a:	095b      	lsrs	r3, r3, #5
 800a18c:	2264      	movs	r2, #100	@ 0x64
 800a18e:	fb02 f303 	mul.w	r3, r2, r3
 800a192:	1acb      	subs	r3, r1, r3
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a19a:	4b36      	ldr	r3, [pc, #216]	@ (800a274 <UART_SetConfig+0x2d4>)
 800a19c:	fba3 2302 	umull	r2, r3, r3, r2
 800a1a0:	095b      	lsrs	r3, r3, #5
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a1a8:	441c      	add	r4, r3
 800a1aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a1b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	1891      	adds	r1, r2, r2
 800a1c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a1c4:	415b      	adcs	r3, r3
 800a1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a1cc:	4641      	mov	r1, r8
 800a1ce:	1851      	adds	r1, r2, r1
 800a1d0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	414b      	adcs	r3, r1
 800a1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	f04f 0300 	mov.w	r3, #0
 800a1e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a1e4:	4659      	mov	r1, fp
 800a1e6:	00cb      	lsls	r3, r1, #3
 800a1e8:	4651      	mov	r1, sl
 800a1ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1ee:	4651      	mov	r1, sl
 800a1f0:	00ca      	lsls	r2, r1, #3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	189b      	adds	r3, r3, r2
 800a1fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a200:	464b      	mov	r3, r9
 800a202:	460a      	mov	r2, r1
 800a204:	eb42 0303 	adc.w	r3, r2, r3
 800a208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a218:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a21c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a220:	460b      	mov	r3, r1
 800a222:	18db      	adds	r3, r3, r3
 800a224:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a226:	4613      	mov	r3, r2
 800a228:	eb42 0303 	adc.w	r3, r2, r3
 800a22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a22e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a236:	f7f6 fd0f 	bl	8000c58 <__aeabi_uldivmod>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4b0d      	ldr	r3, [pc, #52]	@ (800a274 <UART_SetConfig+0x2d4>)
 800a240:	fba3 1302 	umull	r1, r3, r3, r2
 800a244:	095b      	lsrs	r3, r3, #5
 800a246:	2164      	movs	r1, #100	@ 0x64
 800a248:	fb01 f303 	mul.w	r3, r1, r3
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	3332      	adds	r3, #50	@ 0x32
 800a252:	4a08      	ldr	r2, [pc, #32]	@ (800a274 <UART_SetConfig+0x2d4>)
 800a254:	fba2 2303 	umull	r2, r3, r2, r3
 800a258:	095b      	lsrs	r3, r3, #5
 800a25a:	f003 0207 	and.w	r2, r3, #7
 800a25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4422      	add	r2, r4
 800a266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a268:	e106      	b.n	800a478 <UART_SetConfig+0x4d8>
 800a26a:	bf00      	nop
 800a26c:	40011000 	.word	0x40011000
 800a270:	40011400 	.word	0x40011400
 800a274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a282:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a28a:	4642      	mov	r2, r8
 800a28c:	464b      	mov	r3, r9
 800a28e:	1891      	adds	r1, r2, r2
 800a290:	6239      	str	r1, [r7, #32]
 800a292:	415b      	adcs	r3, r3
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
 800a296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a29a:	4641      	mov	r1, r8
 800a29c:	1854      	adds	r4, r2, r1
 800a29e:	4649      	mov	r1, r9
 800a2a0:	eb43 0501 	adc.w	r5, r3, r1
 800a2a4:	f04f 0200 	mov.w	r2, #0
 800a2a8:	f04f 0300 	mov.w	r3, #0
 800a2ac:	00eb      	lsls	r3, r5, #3
 800a2ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2b2:	00e2      	lsls	r2, r4, #3
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	461d      	mov	r5, r3
 800a2b8:	4643      	mov	r3, r8
 800a2ba:	18e3      	adds	r3, r4, r3
 800a2bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	eb45 0303 	adc.w	r3, r5, r3
 800a2c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a2da:	f04f 0200 	mov.w	r2, #0
 800a2de:	f04f 0300 	mov.w	r3, #0
 800a2e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	008b      	lsls	r3, r1, #2
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	008a      	lsls	r2, r1, #2
 800a2f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a2f8:	f7f6 fcae 	bl	8000c58 <__aeabi_uldivmod>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	4b60      	ldr	r3, [pc, #384]	@ (800a484 <UART_SetConfig+0x4e4>)
 800a302:	fba3 2302 	umull	r2, r3, r3, r2
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	011c      	lsls	r4, r3, #4
 800a30a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a314:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	1891      	adds	r1, r2, r2
 800a322:	61b9      	str	r1, [r7, #24]
 800a324:	415b      	adcs	r3, r3
 800a326:	61fb      	str	r3, [r7, #28]
 800a328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a32c:	4641      	mov	r1, r8
 800a32e:	1851      	adds	r1, r2, r1
 800a330:	6139      	str	r1, [r7, #16]
 800a332:	4649      	mov	r1, r9
 800a334:	414b      	adcs	r3, r1
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	f04f 0200 	mov.w	r2, #0
 800a33c:	f04f 0300 	mov.w	r3, #0
 800a340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a344:	4659      	mov	r1, fp
 800a346:	00cb      	lsls	r3, r1, #3
 800a348:	4651      	mov	r1, sl
 800a34a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a34e:	4651      	mov	r1, sl
 800a350:	00ca      	lsls	r2, r1, #3
 800a352:	4610      	mov	r0, r2
 800a354:	4619      	mov	r1, r3
 800a356:	4603      	mov	r3, r0
 800a358:	4642      	mov	r2, r8
 800a35a:	189b      	adds	r3, r3, r2
 800a35c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a360:	464b      	mov	r3, r9
 800a362:	460a      	mov	r2, r1
 800a364:	eb42 0303 	adc.w	r3, r2, r3
 800a368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a376:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a378:	f04f 0200 	mov.w	r2, #0
 800a37c:	f04f 0300 	mov.w	r3, #0
 800a380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a384:	4649      	mov	r1, r9
 800a386:	008b      	lsls	r3, r1, #2
 800a388:	4641      	mov	r1, r8
 800a38a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a38e:	4641      	mov	r1, r8
 800a390:	008a      	lsls	r2, r1, #2
 800a392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a396:	f7f6 fc5f 	bl	8000c58 <__aeabi_uldivmod>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4b38      	ldr	r3, [pc, #224]	@ (800a484 <UART_SetConfig+0x4e4>)
 800a3a2:	fba3 2301 	umull	r2, r3, r3, r1
 800a3a6:	095b      	lsrs	r3, r3, #5
 800a3a8:	2264      	movs	r2, #100	@ 0x64
 800a3aa:	fb02 f303 	mul.w	r3, r2, r3
 800a3ae:	1acb      	subs	r3, r1, r3
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	3332      	adds	r3, #50	@ 0x32
 800a3b4:	4a33      	ldr	r2, [pc, #204]	@ (800a484 <UART_SetConfig+0x4e4>)
 800a3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ba:	095b      	lsrs	r3, r3, #5
 800a3bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3c0:	441c      	add	r4, r3
 800a3c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a3ca:	677a      	str	r2, [r7, #116]	@ 0x74
 800a3cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	464b      	mov	r3, r9
 800a3d4:	1891      	adds	r1, r2, r2
 800a3d6:	60b9      	str	r1, [r7, #8]
 800a3d8:	415b      	adcs	r3, r3
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3e0:	4641      	mov	r1, r8
 800a3e2:	1851      	adds	r1, r2, r1
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	414b      	adcs	r3, r1
 800a3ea:	607b      	str	r3, [r7, #4]
 800a3ec:	f04f 0200 	mov.w	r2, #0
 800a3f0:	f04f 0300 	mov.w	r3, #0
 800a3f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3f8:	4659      	mov	r1, fp
 800a3fa:	00cb      	lsls	r3, r1, #3
 800a3fc:	4651      	mov	r1, sl
 800a3fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a402:	4651      	mov	r1, sl
 800a404:	00ca      	lsls	r2, r1, #3
 800a406:	4610      	mov	r0, r2
 800a408:	4619      	mov	r1, r3
 800a40a:	4603      	mov	r3, r0
 800a40c:	4642      	mov	r2, r8
 800a40e:	189b      	adds	r3, r3, r2
 800a410:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a412:	464b      	mov	r3, r9
 800a414:	460a      	mov	r2, r1
 800a416:	eb42 0303 	adc.w	r3, r2, r3
 800a41a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	663b      	str	r3, [r7, #96]	@ 0x60
 800a426:	667a      	str	r2, [r7, #100]	@ 0x64
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	f04f 0300 	mov.w	r3, #0
 800a430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a434:	4649      	mov	r1, r9
 800a436:	008b      	lsls	r3, r1, #2
 800a438:	4641      	mov	r1, r8
 800a43a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a43e:	4641      	mov	r1, r8
 800a440:	008a      	lsls	r2, r1, #2
 800a442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a446:	f7f6 fc07 	bl	8000c58 <__aeabi_uldivmod>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <UART_SetConfig+0x4e4>)
 800a450:	fba3 1302 	umull	r1, r3, r3, r2
 800a454:	095b      	lsrs	r3, r3, #5
 800a456:	2164      	movs	r1, #100	@ 0x64
 800a458:	fb01 f303 	mul.w	r3, r1, r3
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	3332      	adds	r3, #50	@ 0x32
 800a462:	4a08      	ldr	r2, [pc, #32]	@ (800a484 <UART_SetConfig+0x4e4>)
 800a464:	fba2 2303 	umull	r2, r3, r2, r3
 800a468:	095b      	lsrs	r3, r3, #5
 800a46a:	f003 020f 	and.w	r2, r3, #15
 800a46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4422      	add	r2, r4
 800a476:	609a      	str	r2, [r3, #8]
}
 800a478:	bf00      	nop
 800a47a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a47e:	46bd      	mov	sp, r7
 800a480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a484:	51eb851f 	.word	0x51eb851f

0800a488 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a48c:	4904      	ldr	r1, [pc, #16]	@ (800a4a0 <MX_FATFS_Init+0x18>)
 800a48e:	4805      	ldr	r0, [pc, #20]	@ (800a4a4 <MX_FATFS_Init+0x1c>)
 800a490:	f000 f8b0 	bl	800a5f4 <FATFS_LinkDriver>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	4b03      	ldr	r3, [pc, #12]	@ (800a4a8 <MX_FATFS_Init+0x20>)
 800a49a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a49c:	bf00      	nop
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20000408 	.word	0x20000408
 800a4a4:	2000000c 	.word	0x2000000c
 800a4a8:	20000404 	.word	0x20000404

0800a4ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800a4b6:	4b06      	ldr	r3, [pc, #24]	@ (800a4d0 <USER_initialize+0x24>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a4bc:	4b04      	ldr	r3, [pc, #16]	@ (800a4d0 <USER_initialize+0x24>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20000009 	.word	0x20000009

0800a4d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800a4de:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <USER_status+0x24>)
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a4e4:	4b04      	ldr	r3, [pc, #16]	@ (800a4f8 <USER_status+0x24>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	20000009 	.word	0x20000009

0800a4fc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800a50c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b085      	sub	sp, #20
 800a51e:	af00      	add	r7, sp, #0
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800a52a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	603a      	str	r2, [r7, #0]
 800a542:	71fb      	strb	r3, [r7, #7]
 800a544:	460b      	mov	r3, r1
 800a546:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
    return res;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4613      	mov	r3, r2
 800a568:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a56a:	2301      	movs	r3, #1
 800a56c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a572:	4b1f      	ldr	r3, [pc, #124]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a574:	7a5b      	ldrb	r3, [r3, #9]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d131      	bne.n	800a5e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a57c:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a57e:	7a5b      	ldrb	r3, [r3, #9]
 800a580:	b2db      	uxtb	r3, r3
 800a582:	461a      	mov	r2, r3
 800a584:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a586:	2100      	movs	r1, #0
 800a588:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a58a:	4b19      	ldr	r3, [pc, #100]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a58c:	7a5b      	ldrb	r3, [r3, #9]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	4a17      	ldr	r2, [pc, #92]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a59a:	4b15      	ldr	r3, [pc, #84]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a59c:	7a5b      	ldrb	r3, [r3, #9]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4b13      	ldr	r3, [pc, #76]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a5a4:	4413      	add	r3, r2
 800a5a6:	79fa      	ldrb	r2, [r7, #7]
 800a5a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a5aa:	4b11      	ldr	r3, [pc, #68]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a5ac:	7a5b      	ldrb	r3, [r3, #9]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	b2d1      	uxtb	r1, r2
 800a5b4:	4a0e      	ldr	r2, [pc, #56]	@ (800a5f0 <FATFS_LinkDriverEx+0x94>)
 800a5b6:	7251      	strb	r1, [r2, #9]
 800a5b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a5ba:	7dbb      	ldrb	r3, [r7, #22]
 800a5bc:	3330      	adds	r3, #48	@ 0x30
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	223a      	movs	r2, #58	@ 0x3a
 800a5ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	3302      	adds	r3, #2
 800a5d0:	222f      	movs	r2, #47	@ 0x2f
 800a5d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	3303      	adds	r3, #3
 800a5d8:	2200      	movs	r2, #0
 800a5da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	371c      	adds	r7, #28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	2000040c 	.word	0x2000040c

0800a5f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5fe:	2200      	movs	r2, #0
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff ffaa 	bl	800a55c <FATFS_LinkDriverEx>
 800a608:	4603      	mov	r3, r0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
	...

0800a614 <malloc>:
 800a614:	4b02      	ldr	r3, [pc, #8]	@ (800a620 <malloc+0xc>)
 800a616:	4601      	mov	r1, r0
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	f000 b825 	b.w	800a668 <_malloc_r>
 800a61e:	bf00      	nop
 800a620:	20000198 	.word	0x20000198

0800a624 <sbrk_aligned>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	4e0f      	ldr	r6, [pc, #60]	@ (800a664 <sbrk_aligned+0x40>)
 800a628:	460c      	mov	r4, r1
 800a62a:	6831      	ldr	r1, [r6, #0]
 800a62c:	4605      	mov	r5, r0
 800a62e:	b911      	cbnz	r1, 800a636 <sbrk_aligned+0x12>
 800a630:	f000 feea 	bl	800b408 <_sbrk_r>
 800a634:	6030      	str	r0, [r6, #0]
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 fee5 	bl	800b408 <_sbrk_r>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	d103      	bne.n	800a64a <sbrk_aligned+0x26>
 800a642:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a646:	4620      	mov	r0, r4
 800a648:	bd70      	pop	{r4, r5, r6, pc}
 800a64a:	1cc4      	adds	r4, r0, #3
 800a64c:	f024 0403 	bic.w	r4, r4, #3
 800a650:	42a0      	cmp	r0, r4
 800a652:	d0f8      	beq.n	800a646 <sbrk_aligned+0x22>
 800a654:	1a21      	subs	r1, r4, r0
 800a656:	4628      	mov	r0, r5
 800a658:	f000 fed6 	bl	800b408 <_sbrk_r>
 800a65c:	3001      	adds	r0, #1
 800a65e:	d1f2      	bne.n	800a646 <sbrk_aligned+0x22>
 800a660:	e7ef      	b.n	800a642 <sbrk_aligned+0x1e>
 800a662:	bf00      	nop
 800a664:	20000418 	.word	0x20000418

0800a668 <_malloc_r>:
 800a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a66c:	1ccd      	adds	r5, r1, #3
 800a66e:	f025 0503 	bic.w	r5, r5, #3
 800a672:	3508      	adds	r5, #8
 800a674:	2d0c      	cmp	r5, #12
 800a676:	bf38      	it	cc
 800a678:	250c      	movcc	r5, #12
 800a67a:	2d00      	cmp	r5, #0
 800a67c:	4606      	mov	r6, r0
 800a67e:	db01      	blt.n	800a684 <_malloc_r+0x1c>
 800a680:	42a9      	cmp	r1, r5
 800a682:	d904      	bls.n	800a68e <_malloc_r+0x26>
 800a684:	230c      	movs	r3, #12
 800a686:	6033      	str	r3, [r6, #0]
 800a688:	2000      	movs	r0, #0
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a764 <_malloc_r+0xfc>
 800a692:	f000 f869 	bl	800a768 <__malloc_lock>
 800a696:	f8d8 3000 	ldr.w	r3, [r8]
 800a69a:	461c      	mov	r4, r3
 800a69c:	bb44      	cbnz	r4, 800a6f0 <_malloc_r+0x88>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7ff ffbf 	bl	800a624 <sbrk_aligned>
 800a6a6:	1c43      	adds	r3, r0, #1
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	d158      	bne.n	800a75e <_malloc_r+0xf6>
 800a6ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a6b0:	4627      	mov	r7, r4
 800a6b2:	2f00      	cmp	r7, #0
 800a6b4:	d143      	bne.n	800a73e <_malloc_r+0xd6>
 800a6b6:	2c00      	cmp	r4, #0
 800a6b8:	d04b      	beq.n	800a752 <_malloc_r+0xea>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	4639      	mov	r1, r7
 800a6be:	4630      	mov	r0, r6
 800a6c0:	eb04 0903 	add.w	r9, r4, r3
 800a6c4:	f000 fea0 	bl	800b408 <_sbrk_r>
 800a6c8:	4581      	cmp	r9, r0
 800a6ca:	d142      	bne.n	800a752 <_malloc_r+0xea>
 800a6cc:	6821      	ldr	r1, [r4, #0]
 800a6ce:	1a6d      	subs	r5, r5, r1
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f7ff ffa6 	bl	800a624 <sbrk_aligned>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d03a      	beq.n	800a752 <_malloc_r+0xea>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	442b      	add	r3, r5
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	bb62      	cbnz	r2, 800a744 <_malloc_r+0xdc>
 800a6ea:	f8c8 7000 	str.w	r7, [r8]
 800a6ee:	e00f      	b.n	800a710 <_malloc_r+0xa8>
 800a6f0:	6822      	ldr	r2, [r4, #0]
 800a6f2:	1b52      	subs	r2, r2, r5
 800a6f4:	d420      	bmi.n	800a738 <_malloc_r+0xd0>
 800a6f6:	2a0b      	cmp	r2, #11
 800a6f8:	d917      	bls.n	800a72a <_malloc_r+0xc2>
 800a6fa:	1961      	adds	r1, r4, r5
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	6025      	str	r5, [r4, #0]
 800a700:	bf18      	it	ne
 800a702:	6059      	strne	r1, [r3, #4]
 800a704:	6863      	ldr	r3, [r4, #4]
 800a706:	bf08      	it	eq
 800a708:	f8c8 1000 	streq.w	r1, [r8]
 800a70c:	5162      	str	r2, [r4, r5]
 800a70e:	604b      	str	r3, [r1, #4]
 800a710:	4630      	mov	r0, r6
 800a712:	f000 f82f 	bl	800a774 <__malloc_unlock>
 800a716:	f104 000b 	add.w	r0, r4, #11
 800a71a:	1d23      	adds	r3, r4, #4
 800a71c:	f020 0007 	bic.w	r0, r0, #7
 800a720:	1ac2      	subs	r2, r0, r3
 800a722:	bf1c      	itt	ne
 800a724:	1a1b      	subne	r3, r3, r0
 800a726:	50a3      	strne	r3, [r4, r2]
 800a728:	e7af      	b.n	800a68a <_malloc_r+0x22>
 800a72a:	6862      	ldr	r2, [r4, #4]
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	bf0c      	ite	eq
 800a730:	f8c8 2000 	streq.w	r2, [r8]
 800a734:	605a      	strne	r2, [r3, #4]
 800a736:	e7eb      	b.n	800a710 <_malloc_r+0xa8>
 800a738:	4623      	mov	r3, r4
 800a73a:	6864      	ldr	r4, [r4, #4]
 800a73c:	e7ae      	b.n	800a69c <_malloc_r+0x34>
 800a73e:	463c      	mov	r4, r7
 800a740:	687f      	ldr	r7, [r7, #4]
 800a742:	e7b6      	b.n	800a6b2 <_malloc_r+0x4a>
 800a744:	461a      	mov	r2, r3
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d1fb      	bne.n	800a744 <_malloc_r+0xdc>
 800a74c:	2300      	movs	r3, #0
 800a74e:	6053      	str	r3, [r2, #4]
 800a750:	e7de      	b.n	800a710 <_malloc_r+0xa8>
 800a752:	230c      	movs	r3, #12
 800a754:	6033      	str	r3, [r6, #0]
 800a756:	4630      	mov	r0, r6
 800a758:	f000 f80c 	bl	800a774 <__malloc_unlock>
 800a75c:	e794      	b.n	800a688 <_malloc_r+0x20>
 800a75e:	6005      	str	r5, [r0, #0]
 800a760:	e7d6      	b.n	800a710 <_malloc_r+0xa8>
 800a762:	bf00      	nop
 800a764:	2000041c 	.word	0x2000041c

0800a768 <__malloc_lock>:
 800a768:	4801      	ldr	r0, [pc, #4]	@ (800a770 <__malloc_lock+0x8>)
 800a76a:	f000 be9a 	b.w	800b4a2 <__retarget_lock_acquire_recursive>
 800a76e:	bf00      	nop
 800a770:	20000560 	.word	0x20000560

0800a774 <__malloc_unlock>:
 800a774:	4801      	ldr	r0, [pc, #4]	@ (800a77c <__malloc_unlock+0x8>)
 800a776:	f000 be95 	b.w	800b4a4 <__retarget_lock_release_recursive>
 800a77a:	bf00      	nop
 800a77c:	20000560 	.word	0x20000560

0800a780 <__cvt>:
 800a780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	ec57 6b10 	vmov	r6, r7, d0
 800a788:	2f00      	cmp	r7, #0
 800a78a:	460c      	mov	r4, r1
 800a78c:	4619      	mov	r1, r3
 800a78e:	463b      	mov	r3, r7
 800a790:	bfbb      	ittet	lt
 800a792:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a796:	461f      	movlt	r7, r3
 800a798:	2300      	movge	r3, #0
 800a79a:	232d      	movlt	r3, #45	@ 0x2d
 800a79c:	700b      	strb	r3, [r1, #0]
 800a79e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a7a4:	4691      	mov	r9, r2
 800a7a6:	f023 0820 	bic.w	r8, r3, #32
 800a7aa:	bfbc      	itt	lt
 800a7ac:	4632      	movlt	r2, r6
 800a7ae:	4616      	movlt	r6, r2
 800a7b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7b4:	d005      	beq.n	800a7c2 <__cvt+0x42>
 800a7b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a7ba:	d100      	bne.n	800a7be <__cvt+0x3e>
 800a7bc:	3401      	adds	r4, #1
 800a7be:	2102      	movs	r1, #2
 800a7c0:	e000      	b.n	800a7c4 <__cvt+0x44>
 800a7c2:	2103      	movs	r1, #3
 800a7c4:	ab03      	add	r3, sp, #12
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	ab02      	add	r3, sp, #8
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	ec47 6b10 	vmov	d0, r6, r7
 800a7d0:	4653      	mov	r3, sl
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	f000 ff28 	bl	800b628 <_dtoa_r>
 800a7d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a7dc:	4605      	mov	r5, r0
 800a7de:	d119      	bne.n	800a814 <__cvt+0x94>
 800a7e0:	f019 0f01 	tst.w	r9, #1
 800a7e4:	d00e      	beq.n	800a804 <__cvt+0x84>
 800a7e6:	eb00 0904 	add.w	r9, r0, r4
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	f7f6 f971 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7f6:	b108      	cbz	r0, 800a7fc <__cvt+0x7c>
 800a7f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7fc:	2230      	movs	r2, #48	@ 0x30
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	454b      	cmp	r3, r9
 800a802:	d31e      	bcc.n	800a842 <__cvt+0xc2>
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a808:	1b5b      	subs	r3, r3, r5
 800a80a:	4628      	mov	r0, r5
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	b004      	add	sp, #16
 800a810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a818:	eb00 0904 	add.w	r9, r0, r4
 800a81c:	d1e5      	bne.n	800a7ea <__cvt+0x6a>
 800a81e:	7803      	ldrb	r3, [r0, #0]
 800a820:	2b30      	cmp	r3, #48	@ 0x30
 800a822:	d10a      	bne.n	800a83a <__cvt+0xba>
 800a824:	2200      	movs	r2, #0
 800a826:	2300      	movs	r3, #0
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 f954 	bl	8000ad8 <__aeabi_dcmpeq>
 800a830:	b918      	cbnz	r0, 800a83a <__cvt+0xba>
 800a832:	f1c4 0401 	rsb	r4, r4, #1
 800a836:	f8ca 4000 	str.w	r4, [sl]
 800a83a:	f8da 3000 	ldr.w	r3, [sl]
 800a83e:	4499      	add	r9, r3
 800a840:	e7d3      	b.n	800a7ea <__cvt+0x6a>
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	9103      	str	r1, [sp, #12]
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	e7d9      	b.n	800a7fe <__cvt+0x7e>

0800a84a <__exponent>:
 800a84a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a84c:	2900      	cmp	r1, #0
 800a84e:	bfba      	itte	lt
 800a850:	4249      	neglt	r1, r1
 800a852:	232d      	movlt	r3, #45	@ 0x2d
 800a854:	232b      	movge	r3, #43	@ 0x2b
 800a856:	2909      	cmp	r1, #9
 800a858:	7002      	strb	r2, [r0, #0]
 800a85a:	7043      	strb	r3, [r0, #1]
 800a85c:	dd29      	ble.n	800a8b2 <__exponent+0x68>
 800a85e:	f10d 0307 	add.w	r3, sp, #7
 800a862:	461d      	mov	r5, r3
 800a864:	270a      	movs	r7, #10
 800a866:	461a      	mov	r2, r3
 800a868:	fbb1 f6f7 	udiv	r6, r1, r7
 800a86c:	fb07 1416 	mls	r4, r7, r6, r1
 800a870:	3430      	adds	r4, #48	@ 0x30
 800a872:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a876:	460c      	mov	r4, r1
 800a878:	2c63      	cmp	r4, #99	@ 0x63
 800a87a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a87e:	4631      	mov	r1, r6
 800a880:	dcf1      	bgt.n	800a866 <__exponent+0x1c>
 800a882:	3130      	adds	r1, #48	@ 0x30
 800a884:	1e94      	subs	r4, r2, #2
 800a886:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a88a:	1c41      	adds	r1, r0, #1
 800a88c:	4623      	mov	r3, r4
 800a88e:	42ab      	cmp	r3, r5
 800a890:	d30a      	bcc.n	800a8a8 <__exponent+0x5e>
 800a892:	f10d 0309 	add.w	r3, sp, #9
 800a896:	1a9b      	subs	r3, r3, r2
 800a898:	42ac      	cmp	r4, r5
 800a89a:	bf88      	it	hi
 800a89c:	2300      	movhi	r3, #0
 800a89e:	3302      	adds	r3, #2
 800a8a0:	4403      	add	r3, r0
 800a8a2:	1a18      	subs	r0, r3, r0
 800a8a4:	b003      	add	sp, #12
 800a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a8ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a8b0:	e7ed      	b.n	800a88e <__exponent+0x44>
 800a8b2:	2330      	movs	r3, #48	@ 0x30
 800a8b4:	3130      	adds	r1, #48	@ 0x30
 800a8b6:	7083      	strb	r3, [r0, #2]
 800a8b8:	70c1      	strb	r1, [r0, #3]
 800a8ba:	1d03      	adds	r3, r0, #4
 800a8bc:	e7f1      	b.n	800a8a2 <__exponent+0x58>
	...

0800a8c0 <_printf_float>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	b08d      	sub	sp, #52	@ 0x34
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	461f      	mov	r7, r3
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	f000 fd61 	bl	800b398 <_localeconv_r>
 800a8d6:	6803      	ldr	r3, [r0, #0]
 800a8d8:	9304      	str	r3, [sp, #16]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f5 fcd0 	bl	8000280 <strlen>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a8e8:	9005      	str	r0, [sp, #20]
 800a8ea:	3307      	adds	r3, #7
 800a8ec:	f023 0307 	bic.w	r3, r3, #7
 800a8f0:	f103 0208 	add.w	r2, r3, #8
 800a8f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8f8:	f8d4 b000 	ldr.w	fp, [r4]
 800a8fc:	f8c8 2000 	str.w	r2, [r8]
 800a900:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a904:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a908:	9307      	str	r3, [sp, #28]
 800a90a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a90e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a916:	4b9c      	ldr	r3, [pc, #624]	@ (800ab88 <_printf_float+0x2c8>)
 800a918:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a91c:	f7f6 f90e 	bl	8000b3c <__aeabi_dcmpun>
 800a920:	bb70      	cbnz	r0, 800a980 <_printf_float+0xc0>
 800a922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a926:	4b98      	ldr	r3, [pc, #608]	@ (800ab88 <_printf_float+0x2c8>)
 800a928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a92c:	f7f6 f8e8 	bl	8000b00 <__aeabi_dcmple>
 800a930:	bb30      	cbnz	r0, 800a980 <_printf_float+0xc0>
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	4640      	mov	r0, r8
 800a938:	4649      	mov	r1, r9
 800a93a:	f7f6 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800a93e:	b110      	cbz	r0, 800a946 <_printf_float+0x86>
 800a940:	232d      	movs	r3, #45	@ 0x2d
 800a942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a946:	4a91      	ldr	r2, [pc, #580]	@ (800ab8c <_printf_float+0x2cc>)
 800a948:	4b91      	ldr	r3, [pc, #580]	@ (800ab90 <_printf_float+0x2d0>)
 800a94a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a94e:	bf94      	ite	ls
 800a950:	4690      	movls	r8, r2
 800a952:	4698      	movhi	r8, r3
 800a954:	2303      	movs	r3, #3
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	f02b 0304 	bic.w	r3, fp, #4
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	f04f 0900 	mov.w	r9, #0
 800a962:	9700      	str	r7, [sp, #0]
 800a964:	4633      	mov	r3, r6
 800a966:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a968:	4621      	mov	r1, r4
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 f9d2 	bl	800ad14 <_printf_common>
 800a970:	3001      	adds	r0, #1
 800a972:	f040 808d 	bne.w	800aa90 <_printf_float+0x1d0>
 800a976:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a97a:	b00d      	add	sp, #52	@ 0x34
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	4642      	mov	r2, r8
 800a982:	464b      	mov	r3, r9
 800a984:	4640      	mov	r0, r8
 800a986:	4649      	mov	r1, r9
 800a988:	f7f6 f8d8 	bl	8000b3c <__aeabi_dcmpun>
 800a98c:	b140      	cbz	r0, 800a9a0 <_printf_float+0xe0>
 800a98e:	464b      	mov	r3, r9
 800a990:	2b00      	cmp	r3, #0
 800a992:	bfbc      	itt	lt
 800a994:	232d      	movlt	r3, #45	@ 0x2d
 800a996:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a99a:	4a7e      	ldr	r2, [pc, #504]	@ (800ab94 <_printf_float+0x2d4>)
 800a99c:	4b7e      	ldr	r3, [pc, #504]	@ (800ab98 <_printf_float+0x2d8>)
 800a99e:	e7d4      	b.n	800a94a <_printf_float+0x8a>
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a9a6:	9206      	str	r2, [sp, #24]
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	d13b      	bne.n	800aa24 <_printf_float+0x164>
 800a9ac:	2306      	movs	r3, #6
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6022      	str	r2, [r4, #0]
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a9c0:	ab09      	add	r3, sp, #36	@ 0x24
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	6861      	ldr	r1, [r4, #4]
 800a9c6:	ec49 8b10 	vmov	d0, r8, r9
 800a9ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f7ff fed6 	bl	800a780 <__cvt>
 800a9d4:	9b06      	ldr	r3, [sp, #24]
 800a9d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9d8:	2b47      	cmp	r3, #71	@ 0x47
 800a9da:	4680      	mov	r8, r0
 800a9dc:	d129      	bne.n	800aa32 <_printf_float+0x172>
 800a9de:	1cc8      	adds	r0, r1, #3
 800a9e0:	db02      	blt.n	800a9e8 <_printf_float+0x128>
 800a9e2:	6863      	ldr	r3, [r4, #4]
 800a9e4:	4299      	cmp	r1, r3
 800a9e6:	dd41      	ble.n	800aa6c <_printf_float+0x1ac>
 800a9e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a9ec:	fa5f fa8a 	uxtb.w	sl, sl
 800a9f0:	3901      	subs	r1, #1
 800a9f2:	4652      	mov	r2, sl
 800a9f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9fa:	f7ff ff26 	bl	800a84a <__exponent>
 800a9fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa00:	1813      	adds	r3, r2, r0
 800aa02:	2a01      	cmp	r2, #1
 800aa04:	4681      	mov	r9, r0
 800aa06:	6123      	str	r3, [r4, #16]
 800aa08:	dc02      	bgt.n	800aa10 <_printf_float+0x150>
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	07d2      	lsls	r2, r2, #31
 800aa0e:	d501      	bpl.n	800aa14 <_printf_float+0x154>
 800aa10:	3301      	adds	r3, #1
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0a2      	beq.n	800a962 <_printf_float+0xa2>
 800aa1c:	232d      	movs	r3, #45	@ 0x2d
 800aa1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa22:	e79e      	b.n	800a962 <_printf_float+0xa2>
 800aa24:	9a06      	ldr	r2, [sp, #24]
 800aa26:	2a47      	cmp	r2, #71	@ 0x47
 800aa28:	d1c2      	bne.n	800a9b0 <_printf_float+0xf0>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1c0      	bne.n	800a9b0 <_printf_float+0xf0>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e7bd      	b.n	800a9ae <_printf_float+0xee>
 800aa32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa36:	d9db      	bls.n	800a9f0 <_printf_float+0x130>
 800aa38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa3c:	d118      	bne.n	800aa70 <_printf_float+0x1b0>
 800aa3e:	2900      	cmp	r1, #0
 800aa40:	6863      	ldr	r3, [r4, #4]
 800aa42:	dd0b      	ble.n	800aa5c <_printf_float+0x19c>
 800aa44:	6121      	str	r1, [r4, #16]
 800aa46:	b913      	cbnz	r3, 800aa4e <_printf_float+0x18e>
 800aa48:	6822      	ldr	r2, [r4, #0]
 800aa4a:	07d0      	lsls	r0, r2, #31
 800aa4c:	d502      	bpl.n	800aa54 <_printf_float+0x194>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	440b      	add	r3, r1
 800aa52:	6123      	str	r3, [r4, #16]
 800aa54:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa56:	f04f 0900 	mov.w	r9, #0
 800aa5a:	e7db      	b.n	800aa14 <_printf_float+0x154>
 800aa5c:	b913      	cbnz	r3, 800aa64 <_printf_float+0x1a4>
 800aa5e:	6822      	ldr	r2, [r4, #0]
 800aa60:	07d2      	lsls	r2, r2, #31
 800aa62:	d501      	bpl.n	800aa68 <_printf_float+0x1a8>
 800aa64:	3302      	adds	r3, #2
 800aa66:	e7f4      	b.n	800aa52 <_printf_float+0x192>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e7f2      	b.n	800aa52 <_printf_float+0x192>
 800aa6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa72:	4299      	cmp	r1, r3
 800aa74:	db05      	blt.n	800aa82 <_printf_float+0x1c2>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	6121      	str	r1, [r4, #16]
 800aa7a:	07d8      	lsls	r0, r3, #31
 800aa7c:	d5ea      	bpl.n	800aa54 <_printf_float+0x194>
 800aa7e:	1c4b      	adds	r3, r1, #1
 800aa80:	e7e7      	b.n	800aa52 <_printf_float+0x192>
 800aa82:	2900      	cmp	r1, #0
 800aa84:	bfd4      	ite	le
 800aa86:	f1c1 0202 	rsble	r2, r1, #2
 800aa8a:	2201      	movgt	r2, #1
 800aa8c:	4413      	add	r3, r2
 800aa8e:	e7e0      	b.n	800aa52 <_printf_float+0x192>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	055a      	lsls	r2, r3, #21
 800aa94:	d407      	bmi.n	800aaa6 <_printf_float+0x1e6>
 800aa96:	6923      	ldr	r3, [r4, #16]
 800aa98:	4642      	mov	r2, r8
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	47b8      	blx	r7
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d12b      	bne.n	800aafc <_printf_float+0x23c>
 800aaa4:	e767      	b.n	800a976 <_printf_float+0xb6>
 800aaa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aaaa:	f240 80dd 	bls.w	800ac68 <_printf_float+0x3a8>
 800aaae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aab2:	2200      	movs	r2, #0
 800aab4:	2300      	movs	r3, #0
 800aab6:	f7f6 f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d033      	beq.n	800ab26 <_printf_float+0x266>
 800aabe:	4a37      	ldr	r2, [pc, #220]	@ (800ab9c <_printf_float+0x2dc>)
 800aac0:	2301      	movs	r3, #1
 800aac2:	4631      	mov	r1, r6
 800aac4:	4628      	mov	r0, r5
 800aac6:	47b8      	blx	r7
 800aac8:	3001      	adds	r0, #1
 800aaca:	f43f af54 	beq.w	800a976 <_printf_float+0xb6>
 800aace:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aad2:	4543      	cmp	r3, r8
 800aad4:	db02      	blt.n	800aadc <_printf_float+0x21c>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	07d8      	lsls	r0, r3, #31
 800aada:	d50f      	bpl.n	800aafc <_printf_float+0x23c>
 800aadc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae0:	4631      	mov	r1, r6
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	f43f af45 	beq.w	800a976 <_printf_float+0xb6>
 800aaec:	f04f 0900 	mov.w	r9, #0
 800aaf0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aaf4:	f104 0a1a 	add.w	sl, r4, #26
 800aaf8:	45c8      	cmp	r8, r9
 800aafa:	dc09      	bgt.n	800ab10 <_printf_float+0x250>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	079b      	lsls	r3, r3, #30
 800ab00:	f100 8103 	bmi.w	800ad0a <_printf_float+0x44a>
 800ab04:	68e0      	ldr	r0, [r4, #12]
 800ab06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab08:	4298      	cmp	r0, r3
 800ab0a:	bfb8      	it	lt
 800ab0c:	4618      	movlt	r0, r3
 800ab0e:	e734      	b.n	800a97a <_printf_float+0xba>
 800ab10:	2301      	movs	r3, #1
 800ab12:	4652      	mov	r2, sl
 800ab14:	4631      	mov	r1, r6
 800ab16:	4628      	mov	r0, r5
 800ab18:	47b8      	blx	r7
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	f43f af2b 	beq.w	800a976 <_printf_float+0xb6>
 800ab20:	f109 0901 	add.w	r9, r9, #1
 800ab24:	e7e8      	b.n	800aaf8 <_printf_float+0x238>
 800ab26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	dc39      	bgt.n	800aba0 <_printf_float+0x2e0>
 800ab2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ab9c <_printf_float+0x2dc>)
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4631      	mov	r1, r6
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	f43f af1d 	beq.w	800a976 <_printf_float+0xb6>
 800ab3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab40:	ea59 0303 	orrs.w	r3, r9, r3
 800ab44:	d102      	bne.n	800ab4c <_printf_float+0x28c>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	07d9      	lsls	r1, r3, #31
 800ab4a:	d5d7      	bpl.n	800aafc <_printf_float+0x23c>
 800ab4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab50:	4631      	mov	r1, r6
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b8      	blx	r7
 800ab56:	3001      	adds	r0, #1
 800ab58:	f43f af0d 	beq.w	800a976 <_printf_float+0xb6>
 800ab5c:	f04f 0a00 	mov.w	sl, #0
 800ab60:	f104 0b1a 	add.w	fp, r4, #26
 800ab64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab66:	425b      	negs	r3, r3
 800ab68:	4553      	cmp	r3, sl
 800ab6a:	dc01      	bgt.n	800ab70 <_printf_float+0x2b0>
 800ab6c:	464b      	mov	r3, r9
 800ab6e:	e793      	b.n	800aa98 <_printf_float+0x1d8>
 800ab70:	2301      	movs	r3, #1
 800ab72:	465a      	mov	r2, fp
 800ab74:	4631      	mov	r1, r6
 800ab76:	4628      	mov	r0, r5
 800ab78:	47b8      	blx	r7
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	f43f aefb 	beq.w	800a976 <_printf_float+0xb6>
 800ab80:	f10a 0a01 	add.w	sl, sl, #1
 800ab84:	e7ee      	b.n	800ab64 <_printf_float+0x2a4>
 800ab86:	bf00      	nop
 800ab88:	7fefffff 	.word	0x7fefffff
 800ab8c:	080101ac 	.word	0x080101ac
 800ab90:	080101b0 	.word	0x080101b0
 800ab94:	080101b4 	.word	0x080101b4
 800ab98:	080101b8 	.word	0x080101b8
 800ab9c:	080101bc 	.word	0x080101bc
 800aba0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aba2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aba6:	4553      	cmp	r3, sl
 800aba8:	bfa8      	it	ge
 800abaa:	4653      	movge	r3, sl
 800abac:	2b00      	cmp	r3, #0
 800abae:	4699      	mov	r9, r3
 800abb0:	dc36      	bgt.n	800ac20 <_printf_float+0x360>
 800abb2:	f04f 0b00 	mov.w	fp, #0
 800abb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abba:	f104 021a 	add.w	r2, r4, #26
 800abbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abc0:	9306      	str	r3, [sp, #24]
 800abc2:	eba3 0309 	sub.w	r3, r3, r9
 800abc6:	455b      	cmp	r3, fp
 800abc8:	dc31      	bgt.n	800ac2e <_printf_float+0x36e>
 800abca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abcc:	459a      	cmp	sl, r3
 800abce:	dc3a      	bgt.n	800ac46 <_printf_float+0x386>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	07da      	lsls	r2, r3, #31
 800abd4:	d437      	bmi.n	800ac46 <_printf_float+0x386>
 800abd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd8:	ebaa 0903 	sub.w	r9, sl, r3
 800abdc:	9b06      	ldr	r3, [sp, #24]
 800abde:	ebaa 0303 	sub.w	r3, sl, r3
 800abe2:	4599      	cmp	r9, r3
 800abe4:	bfa8      	it	ge
 800abe6:	4699      	movge	r9, r3
 800abe8:	f1b9 0f00 	cmp.w	r9, #0
 800abec:	dc33      	bgt.n	800ac56 <_printf_float+0x396>
 800abee:	f04f 0800 	mov.w	r8, #0
 800abf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abf6:	f104 0b1a 	add.w	fp, r4, #26
 800abfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abfc:	ebaa 0303 	sub.w	r3, sl, r3
 800ac00:	eba3 0309 	sub.w	r3, r3, r9
 800ac04:	4543      	cmp	r3, r8
 800ac06:	f77f af79 	ble.w	800aafc <_printf_float+0x23c>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	465a      	mov	r2, fp
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b8      	blx	r7
 800ac14:	3001      	adds	r0, #1
 800ac16:	f43f aeae 	beq.w	800a976 <_printf_float+0xb6>
 800ac1a:	f108 0801 	add.w	r8, r8, #1
 800ac1e:	e7ec      	b.n	800abfa <_printf_float+0x33a>
 800ac20:	4642      	mov	r2, r8
 800ac22:	4631      	mov	r1, r6
 800ac24:	4628      	mov	r0, r5
 800ac26:	47b8      	blx	r7
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d1c2      	bne.n	800abb2 <_printf_float+0x2f2>
 800ac2c:	e6a3      	b.n	800a976 <_printf_float+0xb6>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4631      	mov	r1, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	9206      	str	r2, [sp, #24]
 800ac36:	47b8      	blx	r7
 800ac38:	3001      	adds	r0, #1
 800ac3a:	f43f ae9c 	beq.w	800a976 <_printf_float+0xb6>
 800ac3e:	9a06      	ldr	r2, [sp, #24]
 800ac40:	f10b 0b01 	add.w	fp, fp, #1
 800ac44:	e7bb      	b.n	800abbe <_printf_float+0x2fe>
 800ac46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	d1c0      	bne.n	800abd6 <_printf_float+0x316>
 800ac54:	e68f      	b.n	800a976 <_printf_float+0xb6>
 800ac56:	9a06      	ldr	r2, [sp, #24]
 800ac58:	464b      	mov	r3, r9
 800ac5a:	4442      	add	r2, r8
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	d1c3      	bne.n	800abee <_printf_float+0x32e>
 800ac66:	e686      	b.n	800a976 <_printf_float+0xb6>
 800ac68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac6c:	f1ba 0f01 	cmp.w	sl, #1
 800ac70:	dc01      	bgt.n	800ac76 <_printf_float+0x3b6>
 800ac72:	07db      	lsls	r3, r3, #31
 800ac74:	d536      	bpl.n	800ace4 <_printf_float+0x424>
 800ac76:	2301      	movs	r3, #1
 800ac78:	4642      	mov	r2, r8
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b8      	blx	r7
 800ac80:	3001      	adds	r0, #1
 800ac82:	f43f ae78 	beq.w	800a976 <_printf_float+0xb6>
 800ac86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	47b8      	blx	r7
 800ac90:	3001      	adds	r0, #1
 800ac92:	f43f ae70 	beq.w	800a976 <_printf_float+0xb6>
 800ac96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aca2:	f7f5 ff19 	bl	8000ad8 <__aeabi_dcmpeq>
 800aca6:	b9c0      	cbnz	r0, 800acda <_printf_float+0x41a>
 800aca8:	4653      	mov	r3, sl
 800acaa:	f108 0201 	add.w	r2, r8, #1
 800acae:	4631      	mov	r1, r6
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b8      	blx	r7
 800acb4:	3001      	adds	r0, #1
 800acb6:	d10c      	bne.n	800acd2 <_printf_float+0x412>
 800acb8:	e65d      	b.n	800a976 <_printf_float+0xb6>
 800acba:	2301      	movs	r3, #1
 800acbc:	465a      	mov	r2, fp
 800acbe:	4631      	mov	r1, r6
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b8      	blx	r7
 800acc4:	3001      	adds	r0, #1
 800acc6:	f43f ae56 	beq.w	800a976 <_printf_float+0xb6>
 800acca:	f108 0801 	add.w	r8, r8, #1
 800acce:	45d0      	cmp	r8, sl
 800acd0:	dbf3      	blt.n	800acba <_printf_float+0x3fa>
 800acd2:	464b      	mov	r3, r9
 800acd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800acd8:	e6df      	b.n	800aa9a <_printf_float+0x1da>
 800acda:	f04f 0800 	mov.w	r8, #0
 800acde:	f104 0b1a 	add.w	fp, r4, #26
 800ace2:	e7f4      	b.n	800acce <_printf_float+0x40e>
 800ace4:	2301      	movs	r3, #1
 800ace6:	4642      	mov	r2, r8
 800ace8:	e7e1      	b.n	800acae <_printf_float+0x3ee>
 800acea:	2301      	movs	r3, #1
 800acec:	464a      	mov	r2, r9
 800acee:	4631      	mov	r1, r6
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b8      	blx	r7
 800acf4:	3001      	adds	r0, #1
 800acf6:	f43f ae3e 	beq.w	800a976 <_printf_float+0xb6>
 800acfa:	f108 0801 	add.w	r8, r8, #1
 800acfe:	68e3      	ldr	r3, [r4, #12]
 800ad00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad02:	1a5b      	subs	r3, r3, r1
 800ad04:	4543      	cmp	r3, r8
 800ad06:	dcf0      	bgt.n	800acea <_printf_float+0x42a>
 800ad08:	e6fc      	b.n	800ab04 <_printf_float+0x244>
 800ad0a:	f04f 0800 	mov.w	r8, #0
 800ad0e:	f104 0919 	add.w	r9, r4, #25
 800ad12:	e7f4      	b.n	800acfe <_printf_float+0x43e>

0800ad14 <_printf_common>:
 800ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad18:	4616      	mov	r6, r2
 800ad1a:	4698      	mov	r8, r3
 800ad1c:	688a      	ldr	r2, [r1, #8]
 800ad1e:	690b      	ldr	r3, [r1, #16]
 800ad20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad24:	4293      	cmp	r3, r2
 800ad26:	bfb8      	it	lt
 800ad28:	4613      	movlt	r3, r2
 800ad2a:	6033      	str	r3, [r6, #0]
 800ad2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad30:	4607      	mov	r7, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	b10a      	cbz	r2, 800ad3a <_printf_common+0x26>
 800ad36:	3301      	adds	r3, #1
 800ad38:	6033      	str	r3, [r6, #0]
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	0699      	lsls	r1, r3, #26
 800ad3e:	bf42      	ittt	mi
 800ad40:	6833      	ldrmi	r3, [r6, #0]
 800ad42:	3302      	addmi	r3, #2
 800ad44:	6033      	strmi	r3, [r6, #0]
 800ad46:	6825      	ldr	r5, [r4, #0]
 800ad48:	f015 0506 	ands.w	r5, r5, #6
 800ad4c:	d106      	bne.n	800ad5c <_printf_common+0x48>
 800ad4e:	f104 0a19 	add.w	sl, r4, #25
 800ad52:	68e3      	ldr	r3, [r4, #12]
 800ad54:	6832      	ldr	r2, [r6, #0]
 800ad56:	1a9b      	subs	r3, r3, r2
 800ad58:	42ab      	cmp	r3, r5
 800ad5a:	dc26      	bgt.n	800adaa <_printf_common+0x96>
 800ad5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad60:	6822      	ldr	r2, [r4, #0]
 800ad62:	3b00      	subs	r3, #0
 800ad64:	bf18      	it	ne
 800ad66:	2301      	movne	r3, #1
 800ad68:	0692      	lsls	r2, r2, #26
 800ad6a:	d42b      	bmi.n	800adc4 <_printf_common+0xb0>
 800ad6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad70:	4641      	mov	r1, r8
 800ad72:	4638      	mov	r0, r7
 800ad74:	47c8      	blx	r9
 800ad76:	3001      	adds	r0, #1
 800ad78:	d01e      	beq.n	800adb8 <_printf_common+0xa4>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	6922      	ldr	r2, [r4, #16]
 800ad7e:	f003 0306 	and.w	r3, r3, #6
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	bf02      	ittt	eq
 800ad86:	68e5      	ldreq	r5, [r4, #12]
 800ad88:	6833      	ldreq	r3, [r6, #0]
 800ad8a:	1aed      	subeq	r5, r5, r3
 800ad8c:	68a3      	ldr	r3, [r4, #8]
 800ad8e:	bf0c      	ite	eq
 800ad90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad94:	2500      	movne	r5, #0
 800ad96:	4293      	cmp	r3, r2
 800ad98:	bfc4      	itt	gt
 800ad9a:	1a9b      	subgt	r3, r3, r2
 800ad9c:	18ed      	addgt	r5, r5, r3
 800ad9e:	2600      	movs	r6, #0
 800ada0:	341a      	adds	r4, #26
 800ada2:	42b5      	cmp	r5, r6
 800ada4:	d11a      	bne.n	800addc <_printf_common+0xc8>
 800ada6:	2000      	movs	r0, #0
 800ada8:	e008      	b.n	800adbc <_printf_common+0xa8>
 800adaa:	2301      	movs	r3, #1
 800adac:	4652      	mov	r2, sl
 800adae:	4641      	mov	r1, r8
 800adb0:	4638      	mov	r0, r7
 800adb2:	47c8      	blx	r9
 800adb4:	3001      	adds	r0, #1
 800adb6:	d103      	bne.n	800adc0 <_printf_common+0xac>
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc0:	3501      	adds	r5, #1
 800adc2:	e7c6      	b.n	800ad52 <_printf_common+0x3e>
 800adc4:	18e1      	adds	r1, r4, r3
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	2030      	movs	r0, #48	@ 0x30
 800adca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adce:	4422      	add	r2, r4
 800add0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800add4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800add8:	3302      	adds	r3, #2
 800adda:	e7c7      	b.n	800ad6c <_printf_common+0x58>
 800addc:	2301      	movs	r3, #1
 800adde:	4622      	mov	r2, r4
 800ade0:	4641      	mov	r1, r8
 800ade2:	4638      	mov	r0, r7
 800ade4:	47c8      	blx	r9
 800ade6:	3001      	adds	r0, #1
 800ade8:	d0e6      	beq.n	800adb8 <_printf_common+0xa4>
 800adea:	3601      	adds	r6, #1
 800adec:	e7d9      	b.n	800ada2 <_printf_common+0x8e>
	...

0800adf0 <_printf_i>:
 800adf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adf4:	7e0f      	ldrb	r7, [r1, #24]
 800adf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adf8:	2f78      	cmp	r7, #120	@ 0x78
 800adfa:	4691      	mov	r9, r2
 800adfc:	4680      	mov	r8, r0
 800adfe:	460c      	mov	r4, r1
 800ae00:	469a      	mov	sl, r3
 800ae02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae06:	d807      	bhi.n	800ae18 <_printf_i+0x28>
 800ae08:	2f62      	cmp	r7, #98	@ 0x62
 800ae0a:	d80a      	bhi.n	800ae22 <_printf_i+0x32>
 800ae0c:	2f00      	cmp	r7, #0
 800ae0e:	f000 80d2 	beq.w	800afb6 <_printf_i+0x1c6>
 800ae12:	2f58      	cmp	r7, #88	@ 0x58
 800ae14:	f000 80b9 	beq.w	800af8a <_printf_i+0x19a>
 800ae18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae20:	e03a      	b.n	800ae98 <_printf_i+0xa8>
 800ae22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae26:	2b15      	cmp	r3, #21
 800ae28:	d8f6      	bhi.n	800ae18 <_printf_i+0x28>
 800ae2a:	a101      	add	r1, pc, #4	@ (adr r1, 800ae30 <_printf_i+0x40>)
 800ae2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae30:	0800ae89 	.word	0x0800ae89
 800ae34:	0800ae9d 	.word	0x0800ae9d
 800ae38:	0800ae19 	.word	0x0800ae19
 800ae3c:	0800ae19 	.word	0x0800ae19
 800ae40:	0800ae19 	.word	0x0800ae19
 800ae44:	0800ae19 	.word	0x0800ae19
 800ae48:	0800ae9d 	.word	0x0800ae9d
 800ae4c:	0800ae19 	.word	0x0800ae19
 800ae50:	0800ae19 	.word	0x0800ae19
 800ae54:	0800ae19 	.word	0x0800ae19
 800ae58:	0800ae19 	.word	0x0800ae19
 800ae5c:	0800af9d 	.word	0x0800af9d
 800ae60:	0800aec7 	.word	0x0800aec7
 800ae64:	0800af57 	.word	0x0800af57
 800ae68:	0800ae19 	.word	0x0800ae19
 800ae6c:	0800ae19 	.word	0x0800ae19
 800ae70:	0800afbf 	.word	0x0800afbf
 800ae74:	0800ae19 	.word	0x0800ae19
 800ae78:	0800aec7 	.word	0x0800aec7
 800ae7c:	0800ae19 	.word	0x0800ae19
 800ae80:	0800ae19 	.word	0x0800ae19
 800ae84:	0800af5f 	.word	0x0800af5f
 800ae88:	6833      	ldr	r3, [r6, #0]
 800ae8a:	1d1a      	adds	r2, r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6032      	str	r2, [r6, #0]
 800ae90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e09d      	b.n	800afd8 <_printf_i+0x1e8>
 800ae9c:	6833      	ldr	r3, [r6, #0]
 800ae9e:	6820      	ldr	r0, [r4, #0]
 800aea0:	1d19      	adds	r1, r3, #4
 800aea2:	6031      	str	r1, [r6, #0]
 800aea4:	0606      	lsls	r6, r0, #24
 800aea6:	d501      	bpl.n	800aeac <_printf_i+0xbc>
 800aea8:	681d      	ldr	r5, [r3, #0]
 800aeaa:	e003      	b.n	800aeb4 <_printf_i+0xc4>
 800aeac:	0645      	lsls	r5, r0, #25
 800aeae:	d5fb      	bpl.n	800aea8 <_printf_i+0xb8>
 800aeb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aeb4:	2d00      	cmp	r5, #0
 800aeb6:	da03      	bge.n	800aec0 <_printf_i+0xd0>
 800aeb8:	232d      	movs	r3, #45	@ 0x2d
 800aeba:	426d      	negs	r5, r5
 800aebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aec0:	4859      	ldr	r0, [pc, #356]	@ (800b028 <_printf_i+0x238>)
 800aec2:	230a      	movs	r3, #10
 800aec4:	e011      	b.n	800aeea <_printf_i+0xfa>
 800aec6:	6821      	ldr	r1, [r4, #0]
 800aec8:	6833      	ldr	r3, [r6, #0]
 800aeca:	0608      	lsls	r0, r1, #24
 800aecc:	f853 5b04 	ldr.w	r5, [r3], #4
 800aed0:	d402      	bmi.n	800aed8 <_printf_i+0xe8>
 800aed2:	0649      	lsls	r1, r1, #25
 800aed4:	bf48      	it	mi
 800aed6:	b2ad      	uxthmi	r5, r5
 800aed8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeda:	4853      	ldr	r0, [pc, #332]	@ (800b028 <_printf_i+0x238>)
 800aedc:	6033      	str	r3, [r6, #0]
 800aede:	bf14      	ite	ne
 800aee0:	230a      	movne	r3, #10
 800aee2:	2308      	moveq	r3, #8
 800aee4:	2100      	movs	r1, #0
 800aee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeea:	6866      	ldr	r6, [r4, #4]
 800aeec:	60a6      	str	r6, [r4, #8]
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	bfa2      	ittt	ge
 800aef2:	6821      	ldrge	r1, [r4, #0]
 800aef4:	f021 0104 	bicge.w	r1, r1, #4
 800aef8:	6021      	strge	r1, [r4, #0]
 800aefa:	b90d      	cbnz	r5, 800af00 <_printf_i+0x110>
 800aefc:	2e00      	cmp	r6, #0
 800aefe:	d04b      	beq.n	800af98 <_printf_i+0x1a8>
 800af00:	4616      	mov	r6, r2
 800af02:	fbb5 f1f3 	udiv	r1, r5, r3
 800af06:	fb03 5711 	mls	r7, r3, r1, r5
 800af0a:	5dc7      	ldrb	r7, [r0, r7]
 800af0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af10:	462f      	mov	r7, r5
 800af12:	42bb      	cmp	r3, r7
 800af14:	460d      	mov	r5, r1
 800af16:	d9f4      	bls.n	800af02 <_printf_i+0x112>
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d10b      	bne.n	800af34 <_printf_i+0x144>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	07df      	lsls	r7, r3, #31
 800af20:	d508      	bpl.n	800af34 <_printf_i+0x144>
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	6861      	ldr	r1, [r4, #4]
 800af26:	4299      	cmp	r1, r3
 800af28:	bfde      	ittt	le
 800af2a:	2330      	movle	r3, #48	@ 0x30
 800af2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af30:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800af34:	1b92      	subs	r2, r2, r6
 800af36:	6122      	str	r2, [r4, #16]
 800af38:	f8cd a000 	str.w	sl, [sp]
 800af3c:	464b      	mov	r3, r9
 800af3e:	aa03      	add	r2, sp, #12
 800af40:	4621      	mov	r1, r4
 800af42:	4640      	mov	r0, r8
 800af44:	f7ff fee6 	bl	800ad14 <_printf_common>
 800af48:	3001      	adds	r0, #1
 800af4a:	d14a      	bne.n	800afe2 <_printf_i+0x1f2>
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af50:	b004      	add	sp, #16
 800af52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	f043 0320 	orr.w	r3, r3, #32
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	4833      	ldr	r0, [pc, #204]	@ (800b02c <_printf_i+0x23c>)
 800af60:	2778      	movs	r7, #120	@ 0x78
 800af62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	6831      	ldr	r1, [r6, #0]
 800af6a:	061f      	lsls	r7, r3, #24
 800af6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800af70:	d402      	bmi.n	800af78 <_printf_i+0x188>
 800af72:	065f      	lsls	r7, r3, #25
 800af74:	bf48      	it	mi
 800af76:	b2ad      	uxthmi	r5, r5
 800af78:	6031      	str	r1, [r6, #0]
 800af7a:	07d9      	lsls	r1, r3, #31
 800af7c:	bf44      	itt	mi
 800af7e:	f043 0320 	orrmi.w	r3, r3, #32
 800af82:	6023      	strmi	r3, [r4, #0]
 800af84:	b11d      	cbz	r5, 800af8e <_printf_i+0x19e>
 800af86:	2310      	movs	r3, #16
 800af88:	e7ac      	b.n	800aee4 <_printf_i+0xf4>
 800af8a:	4827      	ldr	r0, [pc, #156]	@ (800b028 <_printf_i+0x238>)
 800af8c:	e7e9      	b.n	800af62 <_printf_i+0x172>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	f023 0320 	bic.w	r3, r3, #32
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	e7f6      	b.n	800af86 <_printf_i+0x196>
 800af98:	4616      	mov	r6, r2
 800af9a:	e7bd      	b.n	800af18 <_printf_i+0x128>
 800af9c:	6833      	ldr	r3, [r6, #0]
 800af9e:	6825      	ldr	r5, [r4, #0]
 800afa0:	6961      	ldr	r1, [r4, #20]
 800afa2:	1d18      	adds	r0, r3, #4
 800afa4:	6030      	str	r0, [r6, #0]
 800afa6:	062e      	lsls	r6, r5, #24
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	d501      	bpl.n	800afb0 <_printf_i+0x1c0>
 800afac:	6019      	str	r1, [r3, #0]
 800afae:	e002      	b.n	800afb6 <_printf_i+0x1c6>
 800afb0:	0668      	lsls	r0, r5, #25
 800afb2:	d5fb      	bpl.n	800afac <_printf_i+0x1bc>
 800afb4:	8019      	strh	r1, [r3, #0]
 800afb6:	2300      	movs	r3, #0
 800afb8:	6123      	str	r3, [r4, #16]
 800afba:	4616      	mov	r6, r2
 800afbc:	e7bc      	b.n	800af38 <_printf_i+0x148>
 800afbe:	6833      	ldr	r3, [r6, #0]
 800afc0:	1d1a      	adds	r2, r3, #4
 800afc2:	6032      	str	r2, [r6, #0]
 800afc4:	681e      	ldr	r6, [r3, #0]
 800afc6:	6862      	ldr	r2, [r4, #4]
 800afc8:	2100      	movs	r1, #0
 800afca:	4630      	mov	r0, r6
 800afcc:	f7f5 f908 	bl	80001e0 <memchr>
 800afd0:	b108      	cbz	r0, 800afd6 <_printf_i+0x1e6>
 800afd2:	1b80      	subs	r0, r0, r6
 800afd4:	6060      	str	r0, [r4, #4]
 800afd6:	6863      	ldr	r3, [r4, #4]
 800afd8:	6123      	str	r3, [r4, #16]
 800afda:	2300      	movs	r3, #0
 800afdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe0:	e7aa      	b.n	800af38 <_printf_i+0x148>
 800afe2:	6923      	ldr	r3, [r4, #16]
 800afe4:	4632      	mov	r2, r6
 800afe6:	4649      	mov	r1, r9
 800afe8:	4640      	mov	r0, r8
 800afea:	47d0      	blx	sl
 800afec:	3001      	adds	r0, #1
 800afee:	d0ad      	beq.n	800af4c <_printf_i+0x15c>
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	079b      	lsls	r3, r3, #30
 800aff4:	d413      	bmi.n	800b01e <_printf_i+0x22e>
 800aff6:	68e0      	ldr	r0, [r4, #12]
 800aff8:	9b03      	ldr	r3, [sp, #12]
 800affa:	4298      	cmp	r0, r3
 800affc:	bfb8      	it	lt
 800affe:	4618      	movlt	r0, r3
 800b000:	e7a6      	b.n	800af50 <_printf_i+0x160>
 800b002:	2301      	movs	r3, #1
 800b004:	4632      	mov	r2, r6
 800b006:	4649      	mov	r1, r9
 800b008:	4640      	mov	r0, r8
 800b00a:	47d0      	blx	sl
 800b00c:	3001      	adds	r0, #1
 800b00e:	d09d      	beq.n	800af4c <_printf_i+0x15c>
 800b010:	3501      	adds	r5, #1
 800b012:	68e3      	ldr	r3, [r4, #12]
 800b014:	9903      	ldr	r1, [sp, #12]
 800b016:	1a5b      	subs	r3, r3, r1
 800b018:	42ab      	cmp	r3, r5
 800b01a:	dcf2      	bgt.n	800b002 <_printf_i+0x212>
 800b01c:	e7eb      	b.n	800aff6 <_printf_i+0x206>
 800b01e:	2500      	movs	r5, #0
 800b020:	f104 0619 	add.w	r6, r4, #25
 800b024:	e7f5      	b.n	800b012 <_printf_i+0x222>
 800b026:	bf00      	nop
 800b028:	080101be 	.word	0x080101be
 800b02c:	080101cf 	.word	0x080101cf

0800b030 <std>:
 800b030:	2300      	movs	r3, #0
 800b032:	b510      	push	{r4, lr}
 800b034:	4604      	mov	r4, r0
 800b036:	e9c0 3300 	strd	r3, r3, [r0]
 800b03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b03e:	6083      	str	r3, [r0, #8]
 800b040:	8181      	strh	r1, [r0, #12]
 800b042:	6643      	str	r3, [r0, #100]	@ 0x64
 800b044:	81c2      	strh	r2, [r0, #14]
 800b046:	6183      	str	r3, [r0, #24]
 800b048:	4619      	mov	r1, r3
 800b04a:	2208      	movs	r2, #8
 800b04c:	305c      	adds	r0, #92	@ 0x5c
 800b04e:	f000 f99b 	bl	800b388 <memset>
 800b052:	4b0d      	ldr	r3, [pc, #52]	@ (800b088 <std+0x58>)
 800b054:	6263      	str	r3, [r4, #36]	@ 0x24
 800b056:	4b0d      	ldr	r3, [pc, #52]	@ (800b08c <std+0x5c>)
 800b058:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b05a:	4b0d      	ldr	r3, [pc, #52]	@ (800b090 <std+0x60>)
 800b05c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b05e:	4b0d      	ldr	r3, [pc, #52]	@ (800b094 <std+0x64>)
 800b060:	6323      	str	r3, [r4, #48]	@ 0x30
 800b062:	4b0d      	ldr	r3, [pc, #52]	@ (800b098 <std+0x68>)
 800b064:	6224      	str	r4, [r4, #32]
 800b066:	429c      	cmp	r4, r3
 800b068:	d006      	beq.n	800b078 <std+0x48>
 800b06a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b06e:	4294      	cmp	r4, r2
 800b070:	d002      	beq.n	800b078 <std+0x48>
 800b072:	33d0      	adds	r3, #208	@ 0xd0
 800b074:	429c      	cmp	r4, r3
 800b076:	d105      	bne.n	800b084 <std+0x54>
 800b078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b080:	f000 ba0e 	b.w	800b4a0 <__retarget_lock_init_recursive>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	bf00      	nop
 800b088:	0800b1d9 	.word	0x0800b1d9
 800b08c:	0800b1fb 	.word	0x0800b1fb
 800b090:	0800b233 	.word	0x0800b233
 800b094:	0800b257 	.word	0x0800b257
 800b098:	20000420 	.word	0x20000420

0800b09c <stdio_exit_handler>:
 800b09c:	4a02      	ldr	r2, [pc, #8]	@ (800b0a8 <stdio_exit_handler+0xc>)
 800b09e:	4903      	ldr	r1, [pc, #12]	@ (800b0ac <stdio_exit_handler+0x10>)
 800b0a0:	4803      	ldr	r0, [pc, #12]	@ (800b0b0 <stdio_exit_handler+0x14>)
 800b0a2:	f000 b869 	b.w	800b178 <_fwalk_sglue>
 800b0a6:	bf00      	nop
 800b0a8:	20000020 	.word	0x20000020
 800b0ac:	0800cd11 	.word	0x0800cd11
 800b0b0:	2000019c 	.word	0x2000019c

0800b0b4 <cleanup_stdio>:
 800b0b4:	6841      	ldr	r1, [r0, #4]
 800b0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e8 <cleanup_stdio+0x34>)
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	b510      	push	{r4, lr}
 800b0bc:	4604      	mov	r4, r0
 800b0be:	d001      	beq.n	800b0c4 <cleanup_stdio+0x10>
 800b0c0:	f001 fe26 	bl	800cd10 <_fflush_r>
 800b0c4:	68a1      	ldr	r1, [r4, #8]
 800b0c6:	4b09      	ldr	r3, [pc, #36]	@ (800b0ec <cleanup_stdio+0x38>)
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <cleanup_stdio+0x1e>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f001 fe1f 	bl	800cd10 <_fflush_r>
 800b0d2:	68e1      	ldr	r1, [r4, #12]
 800b0d4:	4b06      	ldr	r3, [pc, #24]	@ (800b0f0 <cleanup_stdio+0x3c>)
 800b0d6:	4299      	cmp	r1, r3
 800b0d8:	d004      	beq.n	800b0e4 <cleanup_stdio+0x30>
 800b0da:	4620      	mov	r0, r4
 800b0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0e0:	f001 be16 	b.w	800cd10 <_fflush_r>
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000420 	.word	0x20000420
 800b0ec:	20000488 	.word	0x20000488
 800b0f0:	200004f0 	.word	0x200004f0

0800b0f4 <global_stdio_init.part.0>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b124 <global_stdio_init.part.0+0x30>)
 800b0f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b128 <global_stdio_init.part.0+0x34>)
 800b0fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b12c <global_stdio_init.part.0+0x38>)
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	4620      	mov	r0, r4
 800b100:	2200      	movs	r2, #0
 800b102:	2104      	movs	r1, #4
 800b104:	f7ff ff94 	bl	800b030 <std>
 800b108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b10c:	2201      	movs	r2, #1
 800b10e:	2109      	movs	r1, #9
 800b110:	f7ff ff8e 	bl	800b030 <std>
 800b114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b118:	2202      	movs	r2, #2
 800b11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b11e:	2112      	movs	r1, #18
 800b120:	f7ff bf86 	b.w	800b030 <std>
 800b124:	20000558 	.word	0x20000558
 800b128:	20000420 	.word	0x20000420
 800b12c:	0800b09d 	.word	0x0800b09d

0800b130 <__sfp_lock_acquire>:
 800b130:	4801      	ldr	r0, [pc, #4]	@ (800b138 <__sfp_lock_acquire+0x8>)
 800b132:	f000 b9b6 	b.w	800b4a2 <__retarget_lock_acquire_recursive>
 800b136:	bf00      	nop
 800b138:	20000561 	.word	0x20000561

0800b13c <__sfp_lock_release>:
 800b13c:	4801      	ldr	r0, [pc, #4]	@ (800b144 <__sfp_lock_release+0x8>)
 800b13e:	f000 b9b1 	b.w	800b4a4 <__retarget_lock_release_recursive>
 800b142:	bf00      	nop
 800b144:	20000561 	.word	0x20000561

0800b148 <__sinit>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	4604      	mov	r4, r0
 800b14c:	f7ff fff0 	bl	800b130 <__sfp_lock_acquire>
 800b150:	6a23      	ldr	r3, [r4, #32]
 800b152:	b11b      	cbz	r3, 800b15c <__sinit+0x14>
 800b154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b158:	f7ff bff0 	b.w	800b13c <__sfp_lock_release>
 800b15c:	4b04      	ldr	r3, [pc, #16]	@ (800b170 <__sinit+0x28>)
 800b15e:	6223      	str	r3, [r4, #32]
 800b160:	4b04      	ldr	r3, [pc, #16]	@ (800b174 <__sinit+0x2c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1f5      	bne.n	800b154 <__sinit+0xc>
 800b168:	f7ff ffc4 	bl	800b0f4 <global_stdio_init.part.0>
 800b16c:	e7f2      	b.n	800b154 <__sinit+0xc>
 800b16e:	bf00      	nop
 800b170:	0800b0b5 	.word	0x0800b0b5
 800b174:	20000558 	.word	0x20000558

0800b178 <_fwalk_sglue>:
 800b178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b17c:	4607      	mov	r7, r0
 800b17e:	4688      	mov	r8, r1
 800b180:	4614      	mov	r4, r2
 800b182:	2600      	movs	r6, #0
 800b184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b188:	f1b9 0901 	subs.w	r9, r9, #1
 800b18c:	d505      	bpl.n	800b19a <_fwalk_sglue+0x22>
 800b18e:	6824      	ldr	r4, [r4, #0]
 800b190:	2c00      	cmp	r4, #0
 800b192:	d1f7      	bne.n	800b184 <_fwalk_sglue+0xc>
 800b194:	4630      	mov	r0, r6
 800b196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d907      	bls.n	800b1b0 <_fwalk_sglue+0x38>
 800b1a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	d003      	beq.n	800b1b0 <_fwalk_sglue+0x38>
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	47c0      	blx	r8
 800b1ae:	4306      	orrs	r6, r0
 800b1b0:	3568      	adds	r5, #104	@ 0x68
 800b1b2:	e7e9      	b.n	800b188 <_fwalk_sglue+0x10>

0800b1b4 <iprintf>:
 800b1b4:	b40f      	push	{r0, r1, r2, r3}
 800b1b6:	b507      	push	{r0, r1, r2, lr}
 800b1b8:	4906      	ldr	r1, [pc, #24]	@ (800b1d4 <iprintf+0x20>)
 800b1ba:	ab04      	add	r3, sp, #16
 800b1bc:	6808      	ldr	r0, [r1, #0]
 800b1be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c2:	6881      	ldr	r1, [r0, #8]
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	f001 fc07 	bl	800c9d8 <_vfiprintf_r>
 800b1ca:	b003      	add	sp, #12
 800b1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1d0:	b004      	add	sp, #16
 800b1d2:	4770      	bx	lr
 800b1d4:	20000198 	.word	0x20000198

0800b1d8 <__sread>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	f000 f900 	bl	800b3e4 <_read_r>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	bfab      	itete	ge
 800b1e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b1ec:	181b      	addge	r3, r3, r0
 800b1ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1f2:	bfac      	ite	ge
 800b1f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1f6:	81a3      	strhlt	r3, [r4, #12]
 800b1f8:	bd10      	pop	{r4, pc}

0800b1fa <__swrite>:
 800b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	461f      	mov	r7, r3
 800b200:	898b      	ldrh	r3, [r1, #12]
 800b202:	05db      	lsls	r3, r3, #23
 800b204:	4605      	mov	r5, r0
 800b206:	460c      	mov	r4, r1
 800b208:	4616      	mov	r6, r2
 800b20a:	d505      	bpl.n	800b218 <__swrite+0x1e>
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	2302      	movs	r3, #2
 800b212:	2200      	movs	r2, #0
 800b214:	f000 f8d4 	bl	800b3c0 <_lseek_r>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b21e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	4632      	mov	r2, r6
 800b226:	463b      	mov	r3, r7
 800b228:	4628      	mov	r0, r5
 800b22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	f000 b8fb 	b.w	800b428 <_write_r>

0800b232 <__sseek>:
 800b232:	b510      	push	{r4, lr}
 800b234:	460c      	mov	r4, r1
 800b236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23a:	f000 f8c1 	bl	800b3c0 <_lseek_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	bf15      	itete	ne
 800b244:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b24a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b24e:	81a3      	strheq	r3, [r4, #12]
 800b250:	bf18      	it	ne
 800b252:	81a3      	strhne	r3, [r4, #12]
 800b254:	bd10      	pop	{r4, pc}

0800b256 <__sclose>:
 800b256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25a:	f000 b8a1 	b.w	800b3a0 <_close_r>

0800b25e <__swbuf_r>:
 800b25e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b260:	460e      	mov	r6, r1
 800b262:	4614      	mov	r4, r2
 800b264:	4605      	mov	r5, r0
 800b266:	b118      	cbz	r0, 800b270 <__swbuf_r+0x12>
 800b268:	6a03      	ldr	r3, [r0, #32]
 800b26a:	b90b      	cbnz	r3, 800b270 <__swbuf_r+0x12>
 800b26c:	f7ff ff6c 	bl	800b148 <__sinit>
 800b270:	69a3      	ldr	r3, [r4, #24]
 800b272:	60a3      	str	r3, [r4, #8]
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	071a      	lsls	r2, r3, #28
 800b278:	d501      	bpl.n	800b27e <__swbuf_r+0x20>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	b943      	cbnz	r3, 800b290 <__swbuf_r+0x32>
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 f82b 	bl	800b2dc <__swsetup_r>
 800b286:	b118      	cbz	r0, 800b290 <__swbuf_r+0x32>
 800b288:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b28c:	4638      	mov	r0, r7
 800b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	6922      	ldr	r2, [r4, #16]
 800b294:	1a98      	subs	r0, r3, r2
 800b296:	6963      	ldr	r3, [r4, #20]
 800b298:	b2f6      	uxtb	r6, r6
 800b29a:	4283      	cmp	r3, r0
 800b29c:	4637      	mov	r7, r6
 800b29e:	dc05      	bgt.n	800b2ac <__swbuf_r+0x4e>
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f001 fd34 	bl	800cd10 <_fflush_r>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d1ed      	bne.n	800b288 <__swbuf_r+0x2a>
 800b2ac:	68a3      	ldr	r3, [r4, #8]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	60a3      	str	r3, [r4, #8]
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	1c5a      	adds	r2, r3, #1
 800b2b6:	6022      	str	r2, [r4, #0]
 800b2b8:	701e      	strb	r6, [r3, #0]
 800b2ba:	6962      	ldr	r2, [r4, #20]
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d004      	beq.n	800b2cc <__swbuf_r+0x6e>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	07db      	lsls	r3, r3, #31
 800b2c6:	d5e1      	bpl.n	800b28c <__swbuf_r+0x2e>
 800b2c8:	2e0a      	cmp	r6, #10
 800b2ca:	d1df      	bne.n	800b28c <__swbuf_r+0x2e>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f001 fd1e 	bl	800cd10 <_fflush_r>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d0d9      	beq.n	800b28c <__swbuf_r+0x2e>
 800b2d8:	e7d6      	b.n	800b288 <__swbuf_r+0x2a>
	...

0800b2dc <__swsetup_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4b29      	ldr	r3, [pc, #164]	@ (800b384 <__swsetup_r+0xa8>)
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	b118      	cbz	r0, 800b2f0 <__swsetup_r+0x14>
 800b2e8:	6a03      	ldr	r3, [r0, #32]
 800b2ea:	b90b      	cbnz	r3, 800b2f0 <__swsetup_r+0x14>
 800b2ec:	f7ff ff2c 	bl	800b148 <__sinit>
 800b2f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f4:	0719      	lsls	r1, r3, #28
 800b2f6:	d422      	bmi.n	800b33e <__swsetup_r+0x62>
 800b2f8:	06da      	lsls	r2, r3, #27
 800b2fa:	d407      	bmi.n	800b30c <__swsetup_r+0x30>
 800b2fc:	2209      	movs	r2, #9
 800b2fe:	602a      	str	r2, [r5, #0]
 800b300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b304:	81a3      	strh	r3, [r4, #12]
 800b306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b30a:	e033      	b.n	800b374 <__swsetup_r+0x98>
 800b30c:	0758      	lsls	r0, r3, #29
 800b30e:	d512      	bpl.n	800b336 <__swsetup_r+0x5a>
 800b310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b312:	b141      	cbz	r1, 800b326 <__swsetup_r+0x4a>
 800b314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b318:	4299      	cmp	r1, r3
 800b31a:	d002      	beq.n	800b322 <__swsetup_r+0x46>
 800b31c:	4628      	mov	r0, r5
 800b31e:	f000 ff47 	bl	800c1b0 <_free_r>
 800b322:	2300      	movs	r3, #0
 800b324:	6363      	str	r3, [r4, #52]	@ 0x34
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	2300      	movs	r3, #0
 800b330:	6063      	str	r3, [r4, #4]
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	f043 0308 	orr.w	r3, r3, #8
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	6923      	ldr	r3, [r4, #16]
 800b340:	b94b      	cbnz	r3, 800b356 <__swsetup_r+0x7a>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b34c:	d003      	beq.n	800b356 <__swsetup_r+0x7a>
 800b34e:	4621      	mov	r1, r4
 800b350:	4628      	mov	r0, r5
 800b352:	f001 fd3d 	bl	800cdd0 <__smakebuf_r>
 800b356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35a:	f013 0201 	ands.w	r2, r3, #1
 800b35e:	d00a      	beq.n	800b376 <__swsetup_r+0x9a>
 800b360:	2200      	movs	r2, #0
 800b362:	60a2      	str	r2, [r4, #8]
 800b364:	6962      	ldr	r2, [r4, #20]
 800b366:	4252      	negs	r2, r2
 800b368:	61a2      	str	r2, [r4, #24]
 800b36a:	6922      	ldr	r2, [r4, #16]
 800b36c:	b942      	cbnz	r2, 800b380 <__swsetup_r+0xa4>
 800b36e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b372:	d1c5      	bne.n	800b300 <__swsetup_r+0x24>
 800b374:	bd38      	pop	{r3, r4, r5, pc}
 800b376:	0799      	lsls	r1, r3, #30
 800b378:	bf58      	it	pl
 800b37a:	6962      	ldrpl	r2, [r4, #20]
 800b37c:	60a2      	str	r2, [r4, #8]
 800b37e:	e7f4      	b.n	800b36a <__swsetup_r+0x8e>
 800b380:	2000      	movs	r0, #0
 800b382:	e7f7      	b.n	800b374 <__swsetup_r+0x98>
 800b384:	20000198 	.word	0x20000198

0800b388 <memset>:
 800b388:	4402      	add	r2, r0
 800b38a:	4603      	mov	r3, r0
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d100      	bne.n	800b392 <memset+0xa>
 800b390:	4770      	bx	lr
 800b392:	f803 1b01 	strb.w	r1, [r3], #1
 800b396:	e7f9      	b.n	800b38c <memset+0x4>

0800b398 <_localeconv_r>:
 800b398:	4800      	ldr	r0, [pc, #0]	@ (800b39c <_localeconv_r+0x4>)
 800b39a:	4770      	bx	lr
 800b39c:	2000011c 	.word	0x2000011c

0800b3a0 <_close_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4d06      	ldr	r5, [pc, #24]	@ (800b3bc <_close_r+0x1c>)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7fc fc37 	bl	8007c1e <_close>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_close_r+0x1a>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_close_r+0x1a>
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	2000055c 	.word	0x2000055c

0800b3c0 <_lseek_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d07      	ldr	r5, [pc, #28]	@ (800b3e0 <_lseek_r+0x20>)
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	4608      	mov	r0, r1
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	602a      	str	r2, [r5, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f7fc fc4c 	bl	8007c6c <_lseek>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_lseek_r+0x1e>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_lseek_r+0x1e>
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	2000055c 	.word	0x2000055c

0800b3e4 <_read_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d07      	ldr	r5, [pc, #28]	@ (800b404 <_read_r+0x20>)
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	4608      	mov	r0, r1
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	602a      	str	r2, [r5, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	f7fc fbf6 	bl	8007be4 <_read>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_read_r+0x1e>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_read_r+0x1e>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	2000055c 	.word	0x2000055c

0800b408 <_sbrk_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	4d06      	ldr	r5, [pc, #24]	@ (800b424 <_sbrk_r+0x1c>)
 800b40c:	2300      	movs	r3, #0
 800b40e:	4604      	mov	r4, r0
 800b410:	4608      	mov	r0, r1
 800b412:	602b      	str	r3, [r5, #0]
 800b414:	f7fc fc38 	bl	8007c88 <_sbrk>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_sbrk_r+0x1a>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_sbrk_r+0x1a>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	2000055c 	.word	0x2000055c

0800b428 <_write_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4d07      	ldr	r5, [pc, #28]	@ (800b448 <_write_r+0x20>)
 800b42c:	4604      	mov	r4, r0
 800b42e:	4608      	mov	r0, r1
 800b430:	4611      	mov	r1, r2
 800b432:	2200      	movs	r2, #0
 800b434:	602a      	str	r2, [r5, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	f7fb feb6 	bl	80071a8 <_write>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d102      	bne.n	800b446 <_write_r+0x1e>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	b103      	cbz	r3, 800b446 <_write_r+0x1e>
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	2000055c 	.word	0x2000055c

0800b44c <__errno>:
 800b44c:	4b01      	ldr	r3, [pc, #4]	@ (800b454 <__errno+0x8>)
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20000198 	.word	0x20000198

0800b458 <__libc_init_array>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	4d0d      	ldr	r5, [pc, #52]	@ (800b490 <__libc_init_array+0x38>)
 800b45c:	4c0d      	ldr	r4, [pc, #52]	@ (800b494 <__libc_init_array+0x3c>)
 800b45e:	1b64      	subs	r4, r4, r5
 800b460:	10a4      	asrs	r4, r4, #2
 800b462:	2600      	movs	r6, #0
 800b464:	42a6      	cmp	r6, r4
 800b466:	d109      	bne.n	800b47c <__libc_init_array+0x24>
 800b468:	4d0b      	ldr	r5, [pc, #44]	@ (800b498 <__libc_init_array+0x40>)
 800b46a:	4c0c      	ldr	r4, [pc, #48]	@ (800b49c <__libc_init_array+0x44>)
 800b46c:	f004 fbe8 	bl	800fc40 <_init>
 800b470:	1b64      	subs	r4, r4, r5
 800b472:	10a4      	asrs	r4, r4, #2
 800b474:	2600      	movs	r6, #0
 800b476:	42a6      	cmp	r6, r4
 800b478:	d105      	bne.n	800b486 <__libc_init_array+0x2e>
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
 800b47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b480:	4798      	blx	r3
 800b482:	3601      	adds	r6, #1
 800b484:	e7ee      	b.n	800b464 <__libc_init_array+0xc>
 800b486:	f855 3b04 	ldr.w	r3, [r5], #4
 800b48a:	4798      	blx	r3
 800b48c:	3601      	adds	r6, #1
 800b48e:	e7f2      	b.n	800b476 <__libc_init_array+0x1e>
 800b490:	080107a0 	.word	0x080107a0
 800b494:	080107a0 	.word	0x080107a0
 800b498:	080107a0 	.word	0x080107a0
 800b49c:	080107a4 	.word	0x080107a4

0800b4a0 <__retarget_lock_init_recursive>:
 800b4a0:	4770      	bx	lr

0800b4a2 <__retarget_lock_acquire_recursive>:
 800b4a2:	4770      	bx	lr

0800b4a4 <__retarget_lock_release_recursive>:
 800b4a4:	4770      	bx	lr

0800b4a6 <memcpy>:
 800b4a6:	440a      	add	r2, r1
 800b4a8:	4291      	cmp	r1, r2
 800b4aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b4ae:	d100      	bne.n	800b4b2 <memcpy+0xc>
 800b4b0:	4770      	bx	lr
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4bc:	4291      	cmp	r1, r2
 800b4be:	d1f9      	bne.n	800b4b4 <memcpy+0xe>
 800b4c0:	bd10      	pop	{r4, pc}
 800b4c2:	0000      	movs	r0, r0
 800b4c4:	0000      	movs	r0, r0
	...

0800b4c8 <nan>:
 800b4c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b4d0 <nan+0x8>
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	00000000 	.word	0x00000000
 800b4d4:	7ff80000 	.word	0x7ff80000

0800b4d8 <__assert_func>:
 800b4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4da:	4614      	mov	r4, r2
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <__assert_func+0x2c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	68d8      	ldr	r0, [r3, #12]
 800b4e6:	b954      	cbnz	r4, 800b4fe <__assert_func+0x26>
 800b4e8:	4b07      	ldr	r3, [pc, #28]	@ (800b508 <__assert_func+0x30>)
 800b4ea:	461c      	mov	r4, r3
 800b4ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4f0:	9100      	str	r1, [sp, #0]
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	4905      	ldr	r1, [pc, #20]	@ (800b50c <__assert_func+0x34>)
 800b4f6:	f001 fc33 	bl	800cd60 <fiprintf>
 800b4fa:	f001 fcc7 	bl	800ce8c <abort>
 800b4fe:	4b04      	ldr	r3, [pc, #16]	@ (800b510 <__assert_func+0x38>)
 800b500:	e7f4      	b.n	800b4ec <__assert_func+0x14>
 800b502:	bf00      	nop
 800b504:	20000198 	.word	0x20000198
 800b508:	08010225 	.word	0x08010225
 800b50c:	080101f7 	.word	0x080101f7
 800b510:	080101ea 	.word	0x080101ea

0800b514 <quorem>:
 800b514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	6903      	ldr	r3, [r0, #16]
 800b51a:	690c      	ldr	r4, [r1, #16]
 800b51c:	42a3      	cmp	r3, r4
 800b51e:	4607      	mov	r7, r0
 800b520:	db7e      	blt.n	800b620 <quorem+0x10c>
 800b522:	3c01      	subs	r4, #1
 800b524:	f101 0814 	add.w	r8, r1, #20
 800b528:	00a3      	lsls	r3, r4, #2
 800b52a:	f100 0514 	add.w	r5, r0, #20
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b53a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b53e:	3301      	adds	r3, #1
 800b540:	429a      	cmp	r2, r3
 800b542:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b546:	fbb2 f6f3 	udiv	r6, r2, r3
 800b54a:	d32e      	bcc.n	800b5aa <quorem+0x96>
 800b54c:	f04f 0a00 	mov.w	sl, #0
 800b550:	46c4      	mov	ip, r8
 800b552:	46ae      	mov	lr, r5
 800b554:	46d3      	mov	fp, sl
 800b556:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b55a:	b298      	uxth	r0, r3
 800b55c:	fb06 a000 	mla	r0, r6, r0, sl
 800b560:	0c02      	lsrs	r2, r0, #16
 800b562:	0c1b      	lsrs	r3, r3, #16
 800b564:	fb06 2303 	mla	r3, r6, r3, r2
 800b568:	f8de 2000 	ldr.w	r2, [lr]
 800b56c:	b280      	uxth	r0, r0
 800b56e:	b292      	uxth	r2, r2
 800b570:	1a12      	subs	r2, r2, r0
 800b572:	445a      	add	r2, fp
 800b574:	f8de 0000 	ldr.w	r0, [lr]
 800b578:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b582:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b586:	b292      	uxth	r2, r2
 800b588:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b58c:	45e1      	cmp	r9, ip
 800b58e:	f84e 2b04 	str.w	r2, [lr], #4
 800b592:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b596:	d2de      	bcs.n	800b556 <quorem+0x42>
 800b598:	9b00      	ldr	r3, [sp, #0]
 800b59a:	58eb      	ldr	r3, [r5, r3]
 800b59c:	b92b      	cbnz	r3, 800b5aa <quorem+0x96>
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	3b04      	subs	r3, #4
 800b5a2:	429d      	cmp	r5, r3
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	d32f      	bcc.n	800b608 <quorem+0xf4>
 800b5a8:	613c      	str	r4, [r7, #16]
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	f001 f8d6 	bl	800c75c <__mcmp>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	db25      	blt.n	800b600 <quorem+0xec>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5bc:	f8d1 c000 	ldr.w	ip, [r1]
 800b5c0:	fa1f fe82 	uxth.w	lr, r2
 800b5c4:	fa1f f38c 	uxth.w	r3, ip
 800b5c8:	eba3 030e 	sub.w	r3, r3, lr
 800b5cc:	4403      	add	r3, r0
 800b5ce:	0c12      	lsrs	r2, r2, #16
 800b5d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b5d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5de:	45c1      	cmp	r9, r8
 800b5e0:	f841 3b04 	str.w	r3, [r1], #4
 800b5e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b5e8:	d2e6      	bcs.n	800b5b8 <quorem+0xa4>
 800b5ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5f2:	b922      	cbnz	r2, 800b5fe <quorem+0xea>
 800b5f4:	3b04      	subs	r3, #4
 800b5f6:	429d      	cmp	r5, r3
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	d30b      	bcc.n	800b614 <quorem+0x100>
 800b5fc:	613c      	str	r4, [r7, #16]
 800b5fe:	3601      	adds	r6, #1
 800b600:	4630      	mov	r0, r6
 800b602:	b003      	add	sp, #12
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b608:	6812      	ldr	r2, [r2, #0]
 800b60a:	3b04      	subs	r3, #4
 800b60c:	2a00      	cmp	r2, #0
 800b60e:	d1cb      	bne.n	800b5a8 <quorem+0x94>
 800b610:	3c01      	subs	r4, #1
 800b612:	e7c6      	b.n	800b5a2 <quorem+0x8e>
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	3b04      	subs	r3, #4
 800b618:	2a00      	cmp	r2, #0
 800b61a:	d1ef      	bne.n	800b5fc <quorem+0xe8>
 800b61c:	3c01      	subs	r4, #1
 800b61e:	e7ea      	b.n	800b5f6 <quorem+0xe2>
 800b620:	2000      	movs	r0, #0
 800b622:	e7ee      	b.n	800b602 <quorem+0xee>
 800b624:	0000      	movs	r0, r0
	...

0800b628 <_dtoa_r>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	69c7      	ldr	r7, [r0, #28]
 800b62e:	b099      	sub	sp, #100	@ 0x64
 800b630:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b634:	ec55 4b10 	vmov	r4, r5, d0
 800b638:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b63a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b63c:	4683      	mov	fp, r0
 800b63e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b640:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b642:	b97f      	cbnz	r7, 800b664 <_dtoa_r+0x3c>
 800b644:	2010      	movs	r0, #16
 800b646:	f7fe ffe5 	bl	800a614 <malloc>
 800b64a:	4602      	mov	r2, r0
 800b64c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b650:	b920      	cbnz	r0, 800b65c <_dtoa_r+0x34>
 800b652:	4ba7      	ldr	r3, [pc, #668]	@ (800b8f0 <_dtoa_r+0x2c8>)
 800b654:	21ef      	movs	r1, #239	@ 0xef
 800b656:	48a7      	ldr	r0, [pc, #668]	@ (800b8f4 <_dtoa_r+0x2cc>)
 800b658:	f7ff ff3e 	bl	800b4d8 <__assert_func>
 800b65c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b660:	6007      	str	r7, [r0, #0]
 800b662:	60c7      	str	r7, [r0, #12]
 800b664:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b668:	6819      	ldr	r1, [r3, #0]
 800b66a:	b159      	cbz	r1, 800b684 <_dtoa_r+0x5c>
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	604a      	str	r2, [r1, #4]
 800b670:	2301      	movs	r3, #1
 800b672:	4093      	lsls	r3, r2
 800b674:	608b      	str	r3, [r1, #8]
 800b676:	4658      	mov	r0, fp
 800b678:	f000 fe36 	bl	800c2e8 <_Bfree>
 800b67c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	1e2b      	subs	r3, r5, #0
 800b686:	bfb9      	ittee	lt
 800b688:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b68c:	9303      	strlt	r3, [sp, #12]
 800b68e:	2300      	movge	r3, #0
 800b690:	6033      	strge	r3, [r6, #0]
 800b692:	9f03      	ldr	r7, [sp, #12]
 800b694:	4b98      	ldr	r3, [pc, #608]	@ (800b8f8 <_dtoa_r+0x2d0>)
 800b696:	bfbc      	itt	lt
 800b698:	2201      	movlt	r2, #1
 800b69a:	6032      	strlt	r2, [r6, #0]
 800b69c:	43bb      	bics	r3, r7
 800b69e:	d112      	bne.n	800b6c6 <_dtoa_r+0x9e>
 800b6a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6ac:	4323      	orrs	r3, r4
 800b6ae:	f000 854d 	beq.w	800c14c <_dtoa_r+0xb24>
 800b6b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b90c <_dtoa_r+0x2e4>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 854f 	beq.w	800c15c <_dtoa_r+0xb34>
 800b6be:	f10a 0303 	add.w	r3, sl, #3
 800b6c2:	f000 bd49 	b.w	800c158 <_dtoa_r+0xb30>
 800b6c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	ec51 0b17 	vmov	r0, r1, d7
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b6d6:	f7f5 f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6da:	4680      	mov	r8, r0
 800b6dc:	b158      	cbz	r0, 800b6f6 <_dtoa_r+0xce>
 800b6de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6e6:	b113      	cbz	r3, 800b6ee <_dtoa_r+0xc6>
 800b6e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b6ea:	4b84      	ldr	r3, [pc, #528]	@ (800b8fc <_dtoa_r+0x2d4>)
 800b6ec:	6013      	str	r3, [r2, #0]
 800b6ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b910 <_dtoa_r+0x2e8>
 800b6f2:	f000 bd33 	b.w	800c15c <_dtoa_r+0xb34>
 800b6f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b6fa:	aa16      	add	r2, sp, #88	@ 0x58
 800b6fc:	a917      	add	r1, sp, #92	@ 0x5c
 800b6fe:	4658      	mov	r0, fp
 800b700:	f001 f8dc 	bl	800c8bc <__d2b>
 800b704:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b708:	4681      	mov	r9, r0
 800b70a:	2e00      	cmp	r6, #0
 800b70c:	d077      	beq.n	800b7fe <_dtoa_r+0x1d6>
 800b70e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b710:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b71c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b720:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b724:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b728:	4619      	mov	r1, r3
 800b72a:	2200      	movs	r2, #0
 800b72c:	4b74      	ldr	r3, [pc, #464]	@ (800b900 <_dtoa_r+0x2d8>)
 800b72e:	f7f4 fdb3 	bl	8000298 <__aeabi_dsub>
 800b732:	a369      	add	r3, pc, #420	@ (adr r3, 800b8d8 <_dtoa_r+0x2b0>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 ff66 	bl	8000608 <__aeabi_dmul>
 800b73c:	a368      	add	r3, pc, #416	@ (adr r3, 800b8e0 <_dtoa_r+0x2b8>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	f7f4 fdab 	bl	800029c <__adddf3>
 800b746:	4604      	mov	r4, r0
 800b748:	4630      	mov	r0, r6
 800b74a:	460d      	mov	r5, r1
 800b74c:	f7f4 fef2 	bl	8000534 <__aeabi_i2d>
 800b750:	a365      	add	r3, pc, #404	@ (adr r3, 800b8e8 <_dtoa_r+0x2c0>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	f7f4 ff57 	bl	8000608 <__aeabi_dmul>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4620      	mov	r0, r4
 800b760:	4629      	mov	r1, r5
 800b762:	f7f4 fd9b 	bl	800029c <__adddf3>
 800b766:	4604      	mov	r4, r0
 800b768:	460d      	mov	r5, r1
 800b76a:	f7f5 f9fd 	bl	8000b68 <__aeabi_d2iz>
 800b76e:	2200      	movs	r2, #0
 800b770:	4607      	mov	r7, r0
 800b772:	2300      	movs	r3, #0
 800b774:	4620      	mov	r0, r4
 800b776:	4629      	mov	r1, r5
 800b778:	f7f5 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800b77c:	b140      	cbz	r0, 800b790 <_dtoa_r+0x168>
 800b77e:	4638      	mov	r0, r7
 800b780:	f7f4 fed8 	bl	8000534 <__aeabi_i2d>
 800b784:	4622      	mov	r2, r4
 800b786:	462b      	mov	r3, r5
 800b788:	f7f5 f9a6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b78c:	b900      	cbnz	r0, 800b790 <_dtoa_r+0x168>
 800b78e:	3f01      	subs	r7, #1
 800b790:	2f16      	cmp	r7, #22
 800b792:	d851      	bhi.n	800b838 <_dtoa_r+0x210>
 800b794:	4b5b      	ldr	r3, [pc, #364]	@ (800b904 <_dtoa_r+0x2dc>)
 800b796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7a2:	f7f5 f9a3 	bl	8000aec <__aeabi_dcmplt>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d048      	beq.n	800b83c <_dtoa_r+0x214>
 800b7aa:	3f01      	subs	r7, #1
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800b7b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7b2:	1b9b      	subs	r3, r3, r6
 800b7b4:	1e5a      	subs	r2, r3, #1
 800b7b6:	bf44      	itt	mi
 800b7b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b7bc:	2300      	movmi	r3, #0
 800b7be:	9208      	str	r2, [sp, #32]
 800b7c0:	bf54      	ite	pl
 800b7c2:	f04f 0800 	movpl.w	r8, #0
 800b7c6:	9308      	strmi	r3, [sp, #32]
 800b7c8:	2f00      	cmp	r7, #0
 800b7ca:	db39      	blt.n	800b840 <_dtoa_r+0x218>
 800b7cc:	9b08      	ldr	r3, [sp, #32]
 800b7ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b7d0:	443b      	add	r3, r7
 800b7d2:	9308      	str	r3, [sp, #32]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7da:	2b09      	cmp	r3, #9
 800b7dc:	d864      	bhi.n	800b8a8 <_dtoa_r+0x280>
 800b7de:	2b05      	cmp	r3, #5
 800b7e0:	bfc4      	itt	gt
 800b7e2:	3b04      	subgt	r3, #4
 800b7e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e8:	f1a3 0302 	sub.w	r3, r3, #2
 800b7ec:	bfcc      	ite	gt
 800b7ee:	2400      	movgt	r4, #0
 800b7f0:	2401      	movle	r4, #1
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d863      	bhi.n	800b8be <_dtoa_r+0x296>
 800b7f6:	e8df f003 	tbb	[pc, r3]
 800b7fa:	372a      	.short	0x372a
 800b7fc:	5535      	.short	0x5535
 800b7fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b802:	441e      	add	r6, r3
 800b804:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b808:	2b20      	cmp	r3, #32
 800b80a:	bfc1      	itttt	gt
 800b80c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b810:	409f      	lslgt	r7, r3
 800b812:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b816:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b81a:	bfd6      	itet	le
 800b81c:	f1c3 0320 	rsble	r3, r3, #32
 800b820:	ea47 0003 	orrgt.w	r0, r7, r3
 800b824:	fa04 f003 	lslle.w	r0, r4, r3
 800b828:	f7f4 fe74 	bl	8000514 <__aeabi_ui2d>
 800b82c:	2201      	movs	r2, #1
 800b82e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b832:	3e01      	subs	r6, #1
 800b834:	9214      	str	r2, [sp, #80]	@ 0x50
 800b836:	e777      	b.n	800b728 <_dtoa_r+0x100>
 800b838:	2301      	movs	r3, #1
 800b83a:	e7b8      	b.n	800b7ae <_dtoa_r+0x186>
 800b83c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b83e:	e7b7      	b.n	800b7b0 <_dtoa_r+0x188>
 800b840:	427b      	negs	r3, r7
 800b842:	930a      	str	r3, [sp, #40]	@ 0x28
 800b844:	2300      	movs	r3, #0
 800b846:	eba8 0807 	sub.w	r8, r8, r7
 800b84a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b84c:	e7c4      	b.n	800b7d8 <_dtoa_r+0x1b0>
 800b84e:	2300      	movs	r3, #0
 800b850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b854:	2b00      	cmp	r3, #0
 800b856:	dc35      	bgt.n	800b8c4 <_dtoa_r+0x29c>
 800b858:	2301      	movs	r3, #1
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	9307      	str	r3, [sp, #28]
 800b85e:	461a      	mov	r2, r3
 800b860:	920e      	str	r2, [sp, #56]	@ 0x38
 800b862:	e00b      	b.n	800b87c <_dtoa_r+0x254>
 800b864:	2301      	movs	r3, #1
 800b866:	e7f3      	b.n	800b850 <_dtoa_r+0x228>
 800b868:	2300      	movs	r3, #0
 800b86a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b86c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b86e:	18fb      	adds	r3, r7, r3
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	3301      	adds	r3, #1
 800b874:	2b01      	cmp	r3, #1
 800b876:	9307      	str	r3, [sp, #28]
 800b878:	bfb8      	it	lt
 800b87a:	2301      	movlt	r3, #1
 800b87c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b880:	2100      	movs	r1, #0
 800b882:	2204      	movs	r2, #4
 800b884:	f102 0514 	add.w	r5, r2, #20
 800b888:	429d      	cmp	r5, r3
 800b88a:	d91f      	bls.n	800b8cc <_dtoa_r+0x2a4>
 800b88c:	6041      	str	r1, [r0, #4]
 800b88e:	4658      	mov	r0, fp
 800b890:	f000 fcea 	bl	800c268 <_Balloc>
 800b894:	4682      	mov	sl, r0
 800b896:	2800      	cmp	r0, #0
 800b898:	d13c      	bne.n	800b914 <_dtoa_r+0x2ec>
 800b89a:	4b1b      	ldr	r3, [pc, #108]	@ (800b908 <_dtoa_r+0x2e0>)
 800b89c:	4602      	mov	r2, r0
 800b89e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b8a2:	e6d8      	b.n	800b656 <_dtoa_r+0x2e>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e7e0      	b.n	800b86a <_dtoa_r+0x242>
 800b8a8:	2401      	movs	r4, #1
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b8b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	9307      	str	r3, [sp, #28]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2312      	movs	r3, #18
 800b8bc:	e7d0      	b.n	800b860 <_dtoa_r+0x238>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8c2:	e7f5      	b.n	800b8b0 <_dtoa_r+0x288>
 800b8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	9307      	str	r3, [sp, #28]
 800b8ca:	e7d7      	b.n	800b87c <_dtoa_r+0x254>
 800b8cc:	3101      	adds	r1, #1
 800b8ce:	0052      	lsls	r2, r2, #1
 800b8d0:	e7d8      	b.n	800b884 <_dtoa_r+0x25c>
 800b8d2:	bf00      	nop
 800b8d4:	f3af 8000 	nop.w
 800b8d8:	636f4361 	.word	0x636f4361
 800b8dc:	3fd287a7 	.word	0x3fd287a7
 800b8e0:	8b60c8b3 	.word	0x8b60c8b3
 800b8e4:	3fc68a28 	.word	0x3fc68a28
 800b8e8:	509f79fb 	.word	0x509f79fb
 800b8ec:	3fd34413 	.word	0x3fd34413
 800b8f0:	08010233 	.word	0x08010233
 800b8f4:	0801024a 	.word	0x0801024a
 800b8f8:	7ff00000 	.word	0x7ff00000
 800b8fc:	080101bd 	.word	0x080101bd
 800b900:	3ff80000 	.word	0x3ff80000
 800b904:	08010340 	.word	0x08010340
 800b908:	080102a2 	.word	0x080102a2
 800b90c:	0801022f 	.word	0x0801022f
 800b910:	080101bc 	.word	0x080101bc
 800b914:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b918:	6018      	str	r0, [r3, #0]
 800b91a:	9b07      	ldr	r3, [sp, #28]
 800b91c:	2b0e      	cmp	r3, #14
 800b91e:	f200 80a4 	bhi.w	800ba6a <_dtoa_r+0x442>
 800b922:	2c00      	cmp	r4, #0
 800b924:	f000 80a1 	beq.w	800ba6a <_dtoa_r+0x442>
 800b928:	2f00      	cmp	r7, #0
 800b92a:	dd33      	ble.n	800b994 <_dtoa_r+0x36c>
 800b92c:	4bad      	ldr	r3, [pc, #692]	@ (800bbe4 <_dtoa_r+0x5bc>)
 800b92e:	f007 020f 	and.w	r2, r7, #15
 800b932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b936:	ed93 7b00 	vldr	d7, [r3]
 800b93a:	05f8      	lsls	r0, r7, #23
 800b93c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b940:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b944:	d516      	bpl.n	800b974 <_dtoa_r+0x34c>
 800b946:	4ba8      	ldr	r3, [pc, #672]	@ (800bbe8 <_dtoa_r+0x5c0>)
 800b948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b94c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b950:	f7f4 ff84 	bl	800085c <__aeabi_ddiv>
 800b954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b958:	f004 040f 	and.w	r4, r4, #15
 800b95c:	2603      	movs	r6, #3
 800b95e:	4da2      	ldr	r5, [pc, #648]	@ (800bbe8 <_dtoa_r+0x5c0>)
 800b960:	b954      	cbnz	r4, 800b978 <_dtoa_r+0x350>
 800b962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b96a:	f7f4 ff77 	bl	800085c <__aeabi_ddiv>
 800b96e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b972:	e028      	b.n	800b9c6 <_dtoa_r+0x39e>
 800b974:	2602      	movs	r6, #2
 800b976:	e7f2      	b.n	800b95e <_dtoa_r+0x336>
 800b978:	07e1      	lsls	r1, r4, #31
 800b97a:	d508      	bpl.n	800b98e <_dtoa_r+0x366>
 800b97c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b980:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b984:	f7f4 fe40 	bl	8000608 <__aeabi_dmul>
 800b988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b98c:	3601      	adds	r6, #1
 800b98e:	1064      	asrs	r4, r4, #1
 800b990:	3508      	adds	r5, #8
 800b992:	e7e5      	b.n	800b960 <_dtoa_r+0x338>
 800b994:	f000 80d2 	beq.w	800bb3c <_dtoa_r+0x514>
 800b998:	427c      	negs	r4, r7
 800b99a:	4b92      	ldr	r3, [pc, #584]	@ (800bbe4 <_dtoa_r+0x5bc>)
 800b99c:	4d92      	ldr	r5, [pc, #584]	@ (800bbe8 <_dtoa_r+0x5c0>)
 800b99e:	f004 020f 	and.w	r2, r4, #15
 800b9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9ae:	f7f4 fe2b 	bl	8000608 <__aeabi_dmul>
 800b9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9b6:	1124      	asrs	r4, r4, #4
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	2602      	movs	r6, #2
 800b9bc:	2c00      	cmp	r4, #0
 800b9be:	f040 80b2 	bne.w	800bb26 <_dtoa_r+0x4fe>
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1d3      	bne.n	800b96e <_dtoa_r+0x346>
 800b9c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 80b7 	beq.w	800bb40 <_dtoa_r+0x518>
 800b9d2:	4b86      	ldr	r3, [pc, #536]	@ (800bbec <_dtoa_r+0x5c4>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7f5 f887 	bl	8000aec <__aeabi_dcmplt>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f000 80ae 	beq.w	800bb40 <_dtoa_r+0x518>
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 80aa 	beq.w	800bb40 <_dtoa_r+0x518>
 800b9ec:	9b00      	ldr	r3, [sp, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	dd37      	ble.n	800ba62 <_dtoa_r+0x43a>
 800b9f2:	1e7b      	subs	r3, r7, #1
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4b7d      	ldr	r3, [pc, #500]	@ (800bbf0 <_dtoa_r+0x5c8>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	f7f4 fe03 	bl	8000608 <__aeabi_dmul>
 800ba02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba06:	9c00      	ldr	r4, [sp, #0]
 800ba08:	3601      	adds	r6, #1
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7f4 fd92 	bl	8000534 <__aeabi_i2d>
 800ba10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba14:	f7f4 fdf8 	bl	8000608 <__aeabi_dmul>
 800ba18:	4b76      	ldr	r3, [pc, #472]	@ (800bbf4 <_dtoa_r+0x5cc>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f7f4 fc3e 	bl	800029c <__adddf3>
 800ba20:	4605      	mov	r5, r0
 800ba22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	f040 808d 	bne.w	800bb46 <_dtoa_r+0x51e>
 800ba2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba30:	4b71      	ldr	r3, [pc, #452]	@ (800bbf8 <_dtoa_r+0x5d0>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	f7f4 fc30 	bl	8000298 <__aeabi_dsub>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba40:	462a      	mov	r2, r5
 800ba42:	4633      	mov	r3, r6
 800ba44:	f7f5 f870 	bl	8000b28 <__aeabi_dcmpgt>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	f040 828b 	bne.w	800bf64 <_dtoa_r+0x93c>
 800ba4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba52:	462a      	mov	r2, r5
 800ba54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba58:	f7f5 f848 	bl	8000aec <__aeabi_dcmplt>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	f040 8128 	bne.w	800bcb2 <_dtoa_r+0x68a>
 800ba62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ba66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f2c0 815a 	blt.w	800bd26 <_dtoa_r+0x6fe>
 800ba72:	2f0e      	cmp	r7, #14
 800ba74:	f300 8157 	bgt.w	800bd26 <_dtoa_r+0x6fe>
 800ba78:	4b5a      	ldr	r3, [pc, #360]	@ (800bbe4 <_dtoa_r+0x5bc>)
 800ba7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba7e:	ed93 7b00 	vldr	d7, [r3]
 800ba82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	ed8d 7b00 	vstr	d7, [sp]
 800ba8a:	da03      	bge.n	800ba94 <_dtoa_r+0x46c>
 800ba8c:	9b07      	ldr	r3, [sp, #28]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f340 8101 	ble.w	800bc96 <_dtoa_r+0x66e>
 800ba94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba98:	4656      	mov	r6, sl
 800ba9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	4629      	mov	r1, r5
 800baa2:	f7f4 fedb 	bl	800085c <__aeabi_ddiv>
 800baa6:	f7f5 f85f 	bl	8000b68 <__aeabi_d2iz>
 800baaa:	4680      	mov	r8, r0
 800baac:	f7f4 fd42 	bl	8000534 <__aeabi_i2d>
 800bab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bab4:	f7f4 fda8 	bl	8000608 <__aeabi_dmul>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	4620      	mov	r0, r4
 800babe:	4629      	mov	r1, r5
 800bac0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bac4:	f7f4 fbe8 	bl	8000298 <__aeabi_dsub>
 800bac8:	f806 4b01 	strb.w	r4, [r6], #1
 800bacc:	9d07      	ldr	r5, [sp, #28]
 800bace:	eba6 040a 	sub.w	r4, r6, sl
 800bad2:	42a5      	cmp	r5, r4
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	f040 8117 	bne.w	800bd0a <_dtoa_r+0x6e2>
 800badc:	f7f4 fbde 	bl	800029c <__adddf3>
 800bae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bae4:	4604      	mov	r4, r0
 800bae6:	460d      	mov	r5, r1
 800bae8:	f7f5 f81e 	bl	8000b28 <__aeabi_dcmpgt>
 800baec:	2800      	cmp	r0, #0
 800baee:	f040 80f9 	bne.w	800bce4 <_dtoa_r+0x6bc>
 800baf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 ffed 	bl	8000ad8 <__aeabi_dcmpeq>
 800bafe:	b118      	cbz	r0, 800bb08 <_dtoa_r+0x4e0>
 800bb00:	f018 0f01 	tst.w	r8, #1
 800bb04:	f040 80ee 	bne.w	800bce4 <_dtoa_r+0x6bc>
 800bb08:	4649      	mov	r1, r9
 800bb0a:	4658      	mov	r0, fp
 800bb0c:	f000 fbec 	bl	800c2e8 <_Bfree>
 800bb10:	2300      	movs	r3, #0
 800bb12:	7033      	strb	r3, [r6, #0]
 800bb14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb16:	3701      	adds	r7, #1
 800bb18:	601f      	str	r7, [r3, #0]
 800bb1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 831d 	beq.w	800c15c <_dtoa_r+0xb34>
 800bb22:	601e      	str	r6, [r3, #0]
 800bb24:	e31a      	b.n	800c15c <_dtoa_r+0xb34>
 800bb26:	07e2      	lsls	r2, r4, #31
 800bb28:	d505      	bpl.n	800bb36 <_dtoa_r+0x50e>
 800bb2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb2e:	f7f4 fd6b 	bl	8000608 <__aeabi_dmul>
 800bb32:	3601      	adds	r6, #1
 800bb34:	2301      	movs	r3, #1
 800bb36:	1064      	asrs	r4, r4, #1
 800bb38:	3508      	adds	r5, #8
 800bb3a:	e73f      	b.n	800b9bc <_dtoa_r+0x394>
 800bb3c:	2602      	movs	r6, #2
 800bb3e:	e742      	b.n	800b9c6 <_dtoa_r+0x39e>
 800bb40:	9c07      	ldr	r4, [sp, #28]
 800bb42:	9704      	str	r7, [sp, #16]
 800bb44:	e761      	b.n	800ba0a <_dtoa_r+0x3e2>
 800bb46:	4b27      	ldr	r3, [pc, #156]	@ (800bbe4 <_dtoa_r+0x5bc>)
 800bb48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb52:	4454      	add	r4, sl
 800bb54:	2900      	cmp	r1, #0
 800bb56:	d053      	beq.n	800bc00 <_dtoa_r+0x5d8>
 800bb58:	4928      	ldr	r1, [pc, #160]	@ (800bbfc <_dtoa_r+0x5d4>)
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	f7f4 fe7e 	bl	800085c <__aeabi_ddiv>
 800bb60:	4633      	mov	r3, r6
 800bb62:	462a      	mov	r2, r5
 800bb64:	f7f4 fb98 	bl	8000298 <__aeabi_dsub>
 800bb68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb6c:	4656      	mov	r6, sl
 800bb6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb72:	f7f4 fff9 	bl	8000b68 <__aeabi_d2iz>
 800bb76:	4605      	mov	r5, r0
 800bb78:	f7f4 fcdc 	bl	8000534 <__aeabi_i2d>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb84:	f7f4 fb88 	bl	8000298 <__aeabi_dsub>
 800bb88:	3530      	adds	r5, #48	@ 0x30
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb92:	f806 5b01 	strb.w	r5, [r6], #1
 800bb96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb9a:	f7f4 ffa7 	bl	8000aec <__aeabi_dcmplt>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d171      	bne.n	800bc86 <_dtoa_r+0x65e>
 800bba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bba6:	4911      	ldr	r1, [pc, #68]	@ (800bbec <_dtoa_r+0x5c4>)
 800bba8:	2000      	movs	r0, #0
 800bbaa:	f7f4 fb75 	bl	8000298 <__aeabi_dsub>
 800bbae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbb2:	f7f4 ff9b 	bl	8000aec <__aeabi_dcmplt>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f040 8095 	bne.w	800bce6 <_dtoa_r+0x6be>
 800bbbc:	42a6      	cmp	r6, r4
 800bbbe:	f43f af50 	beq.w	800ba62 <_dtoa_r+0x43a>
 800bbc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf0 <_dtoa_r+0x5c8>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f7f4 fd1d 	bl	8000608 <__aeabi_dmul>
 800bbce:	4b08      	ldr	r3, [pc, #32]	@ (800bbf0 <_dtoa_r+0x5c8>)
 800bbd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbda:	f7f4 fd15 	bl	8000608 <__aeabi_dmul>
 800bbde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbe2:	e7c4      	b.n	800bb6e <_dtoa_r+0x546>
 800bbe4:	08010340 	.word	0x08010340
 800bbe8:	08010318 	.word	0x08010318
 800bbec:	3ff00000 	.word	0x3ff00000
 800bbf0:	40240000 	.word	0x40240000
 800bbf4:	401c0000 	.word	0x401c0000
 800bbf8:	40140000 	.word	0x40140000
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	4631      	mov	r1, r6
 800bc02:	4628      	mov	r0, r5
 800bc04:	f7f4 fd00 	bl	8000608 <__aeabi_dmul>
 800bc08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc0c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bc0e:	4656      	mov	r6, sl
 800bc10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc14:	f7f4 ffa8 	bl	8000b68 <__aeabi_d2iz>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	f7f4 fc8b 	bl	8000534 <__aeabi_i2d>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc26:	f7f4 fb37 	bl	8000298 <__aeabi_dsub>
 800bc2a:	3530      	adds	r5, #48	@ 0x30
 800bc2c:	f806 5b01 	strb.w	r5, [r6], #1
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	42a6      	cmp	r6, r4
 800bc36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc3a:	f04f 0200 	mov.w	r2, #0
 800bc3e:	d124      	bne.n	800bc8a <_dtoa_r+0x662>
 800bc40:	4bac      	ldr	r3, [pc, #688]	@ (800bef4 <_dtoa_r+0x8cc>)
 800bc42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc46:	f7f4 fb29 	bl	800029c <__adddf3>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc52:	f7f4 ff69 	bl	8000b28 <__aeabi_dcmpgt>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d145      	bne.n	800bce6 <_dtoa_r+0x6be>
 800bc5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc5e:	49a5      	ldr	r1, [pc, #660]	@ (800bef4 <_dtoa_r+0x8cc>)
 800bc60:	2000      	movs	r0, #0
 800bc62:	f7f4 fb19 	bl	8000298 <__aeabi_dsub>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc6e:	f7f4 ff3d 	bl	8000aec <__aeabi_dcmplt>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f43f aef5 	beq.w	800ba62 <_dtoa_r+0x43a>
 800bc78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bc7a:	1e73      	subs	r3, r6, #1
 800bc7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc82:	2b30      	cmp	r3, #48	@ 0x30
 800bc84:	d0f8      	beq.n	800bc78 <_dtoa_r+0x650>
 800bc86:	9f04      	ldr	r7, [sp, #16]
 800bc88:	e73e      	b.n	800bb08 <_dtoa_r+0x4e0>
 800bc8a:	4b9b      	ldr	r3, [pc, #620]	@ (800bef8 <_dtoa_r+0x8d0>)
 800bc8c:	f7f4 fcbc 	bl	8000608 <__aeabi_dmul>
 800bc90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc94:	e7bc      	b.n	800bc10 <_dtoa_r+0x5e8>
 800bc96:	d10c      	bne.n	800bcb2 <_dtoa_r+0x68a>
 800bc98:	4b98      	ldr	r3, [pc, #608]	@ (800befc <_dtoa_r+0x8d4>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bca0:	f7f4 fcb2 	bl	8000608 <__aeabi_dmul>
 800bca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bca8:	f7f4 ff34 	bl	8000b14 <__aeabi_dcmpge>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	f000 8157 	beq.w	800bf60 <_dtoa_r+0x938>
 800bcb2:	2400      	movs	r4, #0
 800bcb4:	4625      	mov	r5, r4
 800bcb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcb8:	43db      	mvns	r3, r3
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	4656      	mov	r6, sl
 800bcbe:	2700      	movs	r7, #0
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4658      	mov	r0, fp
 800bcc4:	f000 fb10 	bl	800c2e8 <_Bfree>
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	d0dc      	beq.n	800bc86 <_dtoa_r+0x65e>
 800bccc:	b12f      	cbz	r7, 800bcda <_dtoa_r+0x6b2>
 800bcce:	42af      	cmp	r7, r5
 800bcd0:	d003      	beq.n	800bcda <_dtoa_r+0x6b2>
 800bcd2:	4639      	mov	r1, r7
 800bcd4:	4658      	mov	r0, fp
 800bcd6:	f000 fb07 	bl	800c2e8 <_Bfree>
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4658      	mov	r0, fp
 800bcde:	f000 fb03 	bl	800c2e8 <_Bfree>
 800bce2:	e7d0      	b.n	800bc86 <_dtoa_r+0x65e>
 800bce4:	9704      	str	r7, [sp, #16]
 800bce6:	4633      	mov	r3, r6
 800bce8:	461e      	mov	r6, r3
 800bcea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcee:	2a39      	cmp	r2, #57	@ 0x39
 800bcf0:	d107      	bne.n	800bd02 <_dtoa_r+0x6da>
 800bcf2:	459a      	cmp	sl, r3
 800bcf4:	d1f8      	bne.n	800bce8 <_dtoa_r+0x6c0>
 800bcf6:	9a04      	ldr	r2, [sp, #16]
 800bcf8:	3201      	adds	r2, #1
 800bcfa:	9204      	str	r2, [sp, #16]
 800bcfc:	2230      	movs	r2, #48	@ 0x30
 800bcfe:	f88a 2000 	strb.w	r2, [sl]
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	3201      	adds	r2, #1
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	e7bd      	b.n	800bc86 <_dtoa_r+0x65e>
 800bd0a:	4b7b      	ldr	r3, [pc, #492]	@ (800bef8 <_dtoa_r+0x8d0>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f7f4 fc7b 	bl	8000608 <__aeabi_dmul>
 800bd12:	2200      	movs	r2, #0
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	460d      	mov	r5, r1
 800bd1a:	f7f4 fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f43f aebb 	beq.w	800ba9a <_dtoa_r+0x472>
 800bd24:	e6f0      	b.n	800bb08 <_dtoa_r+0x4e0>
 800bd26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd28:	2a00      	cmp	r2, #0
 800bd2a:	f000 80db 	beq.w	800bee4 <_dtoa_r+0x8bc>
 800bd2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd30:	2a01      	cmp	r2, #1
 800bd32:	f300 80bf 	bgt.w	800beb4 <_dtoa_r+0x88c>
 800bd36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	f000 80b7 	beq.w	800beac <_dtoa_r+0x884>
 800bd3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd44:	4646      	mov	r6, r8
 800bd46:	9a08      	ldr	r2, [sp, #32]
 800bd48:	2101      	movs	r1, #1
 800bd4a:	441a      	add	r2, r3
 800bd4c:	4658      	mov	r0, fp
 800bd4e:	4498      	add	r8, r3
 800bd50:	9208      	str	r2, [sp, #32]
 800bd52:	f000 fb7d 	bl	800c450 <__i2b>
 800bd56:	4605      	mov	r5, r0
 800bd58:	b15e      	cbz	r6, 800bd72 <_dtoa_r+0x74a>
 800bd5a:	9b08      	ldr	r3, [sp, #32]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	dd08      	ble.n	800bd72 <_dtoa_r+0x74a>
 800bd60:	42b3      	cmp	r3, r6
 800bd62:	9a08      	ldr	r2, [sp, #32]
 800bd64:	bfa8      	it	ge
 800bd66:	4633      	movge	r3, r6
 800bd68:	eba8 0803 	sub.w	r8, r8, r3
 800bd6c:	1af6      	subs	r6, r6, r3
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	9308      	str	r3, [sp, #32]
 800bd72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd74:	b1f3      	cbz	r3, 800bdb4 <_dtoa_r+0x78c>
 800bd76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 80b7 	beq.w	800beec <_dtoa_r+0x8c4>
 800bd7e:	b18c      	cbz	r4, 800bda4 <_dtoa_r+0x77c>
 800bd80:	4629      	mov	r1, r5
 800bd82:	4622      	mov	r2, r4
 800bd84:	4658      	mov	r0, fp
 800bd86:	f000 fc23 	bl	800c5d0 <__pow5mult>
 800bd8a:	464a      	mov	r2, r9
 800bd8c:	4601      	mov	r1, r0
 800bd8e:	4605      	mov	r5, r0
 800bd90:	4658      	mov	r0, fp
 800bd92:	f000 fb73 	bl	800c47c <__multiply>
 800bd96:	4649      	mov	r1, r9
 800bd98:	9004      	str	r0, [sp, #16]
 800bd9a:	4658      	mov	r0, fp
 800bd9c:	f000 faa4 	bl	800c2e8 <_Bfree>
 800bda0:	9b04      	ldr	r3, [sp, #16]
 800bda2:	4699      	mov	r9, r3
 800bda4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bda6:	1b1a      	subs	r2, r3, r4
 800bda8:	d004      	beq.n	800bdb4 <_dtoa_r+0x78c>
 800bdaa:	4649      	mov	r1, r9
 800bdac:	4658      	mov	r0, fp
 800bdae:	f000 fc0f 	bl	800c5d0 <__pow5mult>
 800bdb2:	4681      	mov	r9, r0
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	4658      	mov	r0, fp
 800bdb8:	f000 fb4a 	bl	800c450 <__i2b>
 800bdbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 81cf 	beq.w	800c164 <_dtoa_r+0xb3c>
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4601      	mov	r1, r0
 800bdca:	4658      	mov	r0, fp
 800bdcc:	f000 fc00 	bl	800c5d0 <__pow5mult>
 800bdd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	f300 8095 	bgt.w	800bf04 <_dtoa_r+0x8dc>
 800bdda:	9b02      	ldr	r3, [sp, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 8087 	bne.w	800bef0 <_dtoa_r+0x8c8>
 800bde2:	9b03      	ldr	r3, [sp, #12]
 800bde4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f040 8089 	bne.w	800bf00 <_dtoa_r+0x8d8>
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bdf4:	0d1b      	lsrs	r3, r3, #20
 800bdf6:	051b      	lsls	r3, r3, #20
 800bdf8:	b12b      	cbz	r3, 800be06 <_dtoa_r+0x7de>
 800bdfa:	9b08      	ldr	r3, [sp, #32]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	9308      	str	r3, [sp, #32]
 800be00:	f108 0801 	add.w	r8, r8, #1
 800be04:	2301      	movs	r3, #1
 800be06:	930a      	str	r3, [sp, #40]	@ 0x28
 800be08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 81b0 	beq.w	800c170 <_dtoa_r+0xb48>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be16:	6918      	ldr	r0, [r3, #16]
 800be18:	f000 face 	bl	800c3b8 <__hi0bits>
 800be1c:	f1c0 0020 	rsb	r0, r0, #32
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	4418      	add	r0, r3
 800be24:	f010 001f 	ands.w	r0, r0, #31
 800be28:	d077      	beq.n	800bf1a <_dtoa_r+0x8f2>
 800be2a:	f1c0 0320 	rsb	r3, r0, #32
 800be2e:	2b04      	cmp	r3, #4
 800be30:	dd6b      	ble.n	800bf0a <_dtoa_r+0x8e2>
 800be32:	9b08      	ldr	r3, [sp, #32]
 800be34:	f1c0 001c 	rsb	r0, r0, #28
 800be38:	4403      	add	r3, r0
 800be3a:	4480      	add	r8, r0
 800be3c:	4406      	add	r6, r0
 800be3e:	9308      	str	r3, [sp, #32]
 800be40:	f1b8 0f00 	cmp.w	r8, #0
 800be44:	dd05      	ble.n	800be52 <_dtoa_r+0x82a>
 800be46:	4649      	mov	r1, r9
 800be48:	4642      	mov	r2, r8
 800be4a:	4658      	mov	r0, fp
 800be4c:	f000 fc1a 	bl	800c684 <__lshift>
 800be50:	4681      	mov	r9, r0
 800be52:	9b08      	ldr	r3, [sp, #32]
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd05      	ble.n	800be64 <_dtoa_r+0x83c>
 800be58:	4621      	mov	r1, r4
 800be5a:	461a      	mov	r2, r3
 800be5c:	4658      	mov	r0, fp
 800be5e:	f000 fc11 	bl	800c684 <__lshift>
 800be62:	4604      	mov	r4, r0
 800be64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be66:	2b00      	cmp	r3, #0
 800be68:	d059      	beq.n	800bf1e <_dtoa_r+0x8f6>
 800be6a:	4621      	mov	r1, r4
 800be6c:	4648      	mov	r0, r9
 800be6e:	f000 fc75 	bl	800c75c <__mcmp>
 800be72:	2800      	cmp	r0, #0
 800be74:	da53      	bge.n	800bf1e <_dtoa_r+0x8f6>
 800be76:	1e7b      	subs	r3, r7, #1
 800be78:	9304      	str	r3, [sp, #16]
 800be7a:	4649      	mov	r1, r9
 800be7c:	2300      	movs	r3, #0
 800be7e:	220a      	movs	r2, #10
 800be80:	4658      	mov	r0, fp
 800be82:	f000 fa53 	bl	800c32c <__multadd>
 800be86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be88:	4681      	mov	r9, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 8172 	beq.w	800c174 <_dtoa_r+0xb4c>
 800be90:	2300      	movs	r3, #0
 800be92:	4629      	mov	r1, r5
 800be94:	220a      	movs	r2, #10
 800be96:	4658      	mov	r0, fp
 800be98:	f000 fa48 	bl	800c32c <__multadd>
 800be9c:	9b00      	ldr	r3, [sp, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	4605      	mov	r5, r0
 800bea2:	dc67      	bgt.n	800bf74 <_dtoa_r+0x94c>
 800bea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	dc41      	bgt.n	800bf2e <_dtoa_r+0x906>
 800beaa:	e063      	b.n	800bf74 <_dtoa_r+0x94c>
 800beac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800beae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800beb2:	e746      	b.n	800bd42 <_dtoa_r+0x71a>
 800beb4:	9b07      	ldr	r3, [sp, #28]
 800beb6:	1e5c      	subs	r4, r3, #1
 800beb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beba:	42a3      	cmp	r3, r4
 800bebc:	bfbf      	itttt	lt
 800bebe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bec0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bec2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bec4:	1ae3      	sublt	r3, r4, r3
 800bec6:	bfb4      	ite	lt
 800bec8:	18d2      	addlt	r2, r2, r3
 800beca:	1b1c      	subge	r4, r3, r4
 800becc:	9b07      	ldr	r3, [sp, #28]
 800bece:	bfbc      	itt	lt
 800bed0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bed2:	2400      	movlt	r4, #0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	bfb5      	itete	lt
 800bed8:	eba8 0603 	sublt.w	r6, r8, r3
 800bedc:	9b07      	ldrge	r3, [sp, #28]
 800bede:	2300      	movlt	r3, #0
 800bee0:	4646      	movge	r6, r8
 800bee2:	e730      	b.n	800bd46 <_dtoa_r+0x71e>
 800bee4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bee6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bee8:	4646      	mov	r6, r8
 800beea:	e735      	b.n	800bd58 <_dtoa_r+0x730>
 800beec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800beee:	e75c      	b.n	800bdaa <_dtoa_r+0x782>
 800bef0:	2300      	movs	r3, #0
 800bef2:	e788      	b.n	800be06 <_dtoa_r+0x7de>
 800bef4:	3fe00000 	.word	0x3fe00000
 800bef8:	40240000 	.word	0x40240000
 800befc:	40140000 	.word	0x40140000
 800bf00:	9b02      	ldr	r3, [sp, #8]
 800bf02:	e780      	b.n	800be06 <_dtoa_r+0x7de>
 800bf04:	2300      	movs	r3, #0
 800bf06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf08:	e782      	b.n	800be10 <_dtoa_r+0x7e8>
 800bf0a:	d099      	beq.n	800be40 <_dtoa_r+0x818>
 800bf0c:	9a08      	ldr	r2, [sp, #32]
 800bf0e:	331c      	adds	r3, #28
 800bf10:	441a      	add	r2, r3
 800bf12:	4498      	add	r8, r3
 800bf14:	441e      	add	r6, r3
 800bf16:	9208      	str	r2, [sp, #32]
 800bf18:	e792      	b.n	800be40 <_dtoa_r+0x818>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	e7f6      	b.n	800bf0c <_dtoa_r+0x8e4>
 800bf1e:	9b07      	ldr	r3, [sp, #28]
 800bf20:	9704      	str	r7, [sp, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dc20      	bgt.n	800bf68 <_dtoa_r+0x940>
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	dd1e      	ble.n	800bf6c <_dtoa_r+0x944>
 800bf2e:	9b00      	ldr	r3, [sp, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f47f aec0 	bne.w	800bcb6 <_dtoa_r+0x68e>
 800bf36:	4621      	mov	r1, r4
 800bf38:	2205      	movs	r2, #5
 800bf3a:	4658      	mov	r0, fp
 800bf3c:	f000 f9f6 	bl	800c32c <__multadd>
 800bf40:	4601      	mov	r1, r0
 800bf42:	4604      	mov	r4, r0
 800bf44:	4648      	mov	r0, r9
 800bf46:	f000 fc09 	bl	800c75c <__mcmp>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f77f aeb3 	ble.w	800bcb6 <_dtoa_r+0x68e>
 800bf50:	4656      	mov	r6, sl
 800bf52:	2331      	movs	r3, #49	@ 0x31
 800bf54:	f806 3b01 	strb.w	r3, [r6], #1
 800bf58:	9b04      	ldr	r3, [sp, #16]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	9304      	str	r3, [sp, #16]
 800bf5e:	e6ae      	b.n	800bcbe <_dtoa_r+0x696>
 800bf60:	9c07      	ldr	r4, [sp, #28]
 800bf62:	9704      	str	r7, [sp, #16]
 800bf64:	4625      	mov	r5, r4
 800bf66:	e7f3      	b.n	800bf50 <_dtoa_r+0x928>
 800bf68:	9b07      	ldr	r3, [sp, #28]
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 8104 	beq.w	800c17c <_dtoa_r+0xb54>
 800bf74:	2e00      	cmp	r6, #0
 800bf76:	dd05      	ble.n	800bf84 <_dtoa_r+0x95c>
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4632      	mov	r2, r6
 800bf7c:	4658      	mov	r0, fp
 800bf7e:	f000 fb81 	bl	800c684 <__lshift>
 800bf82:	4605      	mov	r5, r0
 800bf84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d05a      	beq.n	800c040 <_dtoa_r+0xa18>
 800bf8a:	6869      	ldr	r1, [r5, #4]
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	f000 f96b 	bl	800c268 <_Balloc>
 800bf92:	4606      	mov	r6, r0
 800bf94:	b928      	cbnz	r0, 800bfa2 <_dtoa_r+0x97a>
 800bf96:	4b84      	ldr	r3, [pc, #528]	@ (800c1a8 <_dtoa_r+0xb80>)
 800bf98:	4602      	mov	r2, r0
 800bf9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf9e:	f7ff bb5a 	b.w	800b656 <_dtoa_r+0x2e>
 800bfa2:	692a      	ldr	r2, [r5, #16]
 800bfa4:	3202      	adds	r2, #2
 800bfa6:	0092      	lsls	r2, r2, #2
 800bfa8:	f105 010c 	add.w	r1, r5, #12
 800bfac:	300c      	adds	r0, #12
 800bfae:	f7ff fa7a 	bl	800b4a6 <memcpy>
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	4658      	mov	r0, fp
 800bfb8:	f000 fb64 	bl	800c684 <__lshift>
 800bfbc:	f10a 0301 	add.w	r3, sl, #1
 800bfc0:	9307      	str	r3, [sp, #28]
 800bfc2:	9b00      	ldr	r3, [sp, #0]
 800bfc4:	4453      	add	r3, sl
 800bfc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfc8:	9b02      	ldr	r3, [sp, #8]
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	462f      	mov	r7, r5
 800bfd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	9b07      	ldr	r3, [sp, #28]
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	4648      	mov	r0, r9
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	f7ff fa99 	bl	800b514 <quorem>
 800bfe2:	4639      	mov	r1, r7
 800bfe4:	9002      	str	r0, [sp, #8]
 800bfe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bfea:	4648      	mov	r0, r9
 800bfec:	f000 fbb6 	bl	800c75c <__mcmp>
 800bff0:	462a      	mov	r2, r5
 800bff2:	9008      	str	r0, [sp, #32]
 800bff4:	4621      	mov	r1, r4
 800bff6:	4658      	mov	r0, fp
 800bff8:	f000 fbcc 	bl	800c794 <__mdiff>
 800bffc:	68c2      	ldr	r2, [r0, #12]
 800bffe:	4606      	mov	r6, r0
 800c000:	bb02      	cbnz	r2, 800c044 <_dtoa_r+0xa1c>
 800c002:	4601      	mov	r1, r0
 800c004:	4648      	mov	r0, r9
 800c006:	f000 fba9 	bl	800c75c <__mcmp>
 800c00a:	4602      	mov	r2, r0
 800c00c:	4631      	mov	r1, r6
 800c00e:	4658      	mov	r0, fp
 800c010:	920e      	str	r2, [sp, #56]	@ 0x38
 800c012:	f000 f969 	bl	800c2e8 <_Bfree>
 800c016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c018:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c01a:	9e07      	ldr	r6, [sp, #28]
 800c01c:	ea43 0102 	orr.w	r1, r3, r2
 800c020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c022:	4319      	orrs	r1, r3
 800c024:	d110      	bne.n	800c048 <_dtoa_r+0xa20>
 800c026:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c02a:	d029      	beq.n	800c080 <_dtoa_r+0xa58>
 800c02c:	9b08      	ldr	r3, [sp, #32]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	dd02      	ble.n	800c038 <_dtoa_r+0xa10>
 800c032:	9b02      	ldr	r3, [sp, #8]
 800c034:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c038:	9b00      	ldr	r3, [sp, #0]
 800c03a:	f883 8000 	strb.w	r8, [r3]
 800c03e:	e63f      	b.n	800bcc0 <_dtoa_r+0x698>
 800c040:	4628      	mov	r0, r5
 800c042:	e7bb      	b.n	800bfbc <_dtoa_r+0x994>
 800c044:	2201      	movs	r2, #1
 800c046:	e7e1      	b.n	800c00c <_dtoa_r+0x9e4>
 800c048:	9b08      	ldr	r3, [sp, #32]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	db04      	blt.n	800c058 <_dtoa_r+0xa30>
 800c04e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c050:	430b      	orrs	r3, r1
 800c052:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c054:	430b      	orrs	r3, r1
 800c056:	d120      	bne.n	800c09a <_dtoa_r+0xa72>
 800c058:	2a00      	cmp	r2, #0
 800c05a:	dded      	ble.n	800c038 <_dtoa_r+0xa10>
 800c05c:	4649      	mov	r1, r9
 800c05e:	2201      	movs	r2, #1
 800c060:	4658      	mov	r0, fp
 800c062:	f000 fb0f 	bl	800c684 <__lshift>
 800c066:	4621      	mov	r1, r4
 800c068:	4681      	mov	r9, r0
 800c06a:	f000 fb77 	bl	800c75c <__mcmp>
 800c06e:	2800      	cmp	r0, #0
 800c070:	dc03      	bgt.n	800c07a <_dtoa_r+0xa52>
 800c072:	d1e1      	bne.n	800c038 <_dtoa_r+0xa10>
 800c074:	f018 0f01 	tst.w	r8, #1
 800c078:	d0de      	beq.n	800c038 <_dtoa_r+0xa10>
 800c07a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c07e:	d1d8      	bne.n	800c032 <_dtoa_r+0xa0a>
 800c080:	9a00      	ldr	r2, [sp, #0]
 800c082:	2339      	movs	r3, #57	@ 0x39
 800c084:	7013      	strb	r3, [r2, #0]
 800c086:	4633      	mov	r3, r6
 800c088:	461e      	mov	r6, r3
 800c08a:	3b01      	subs	r3, #1
 800c08c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c090:	2a39      	cmp	r2, #57	@ 0x39
 800c092:	d052      	beq.n	800c13a <_dtoa_r+0xb12>
 800c094:	3201      	adds	r2, #1
 800c096:	701a      	strb	r2, [r3, #0]
 800c098:	e612      	b.n	800bcc0 <_dtoa_r+0x698>
 800c09a:	2a00      	cmp	r2, #0
 800c09c:	dd07      	ble.n	800c0ae <_dtoa_r+0xa86>
 800c09e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0a2:	d0ed      	beq.n	800c080 <_dtoa_r+0xa58>
 800c0a4:	9a00      	ldr	r2, [sp, #0]
 800c0a6:	f108 0301 	add.w	r3, r8, #1
 800c0aa:	7013      	strb	r3, [r2, #0]
 800c0ac:	e608      	b.n	800bcc0 <_dtoa_r+0x698>
 800c0ae:	9b07      	ldr	r3, [sp, #28]
 800c0b0:	9a07      	ldr	r2, [sp, #28]
 800c0b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c0b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d028      	beq.n	800c10e <_dtoa_r+0xae6>
 800c0bc:	4649      	mov	r1, r9
 800c0be:	2300      	movs	r3, #0
 800c0c0:	220a      	movs	r2, #10
 800c0c2:	4658      	mov	r0, fp
 800c0c4:	f000 f932 	bl	800c32c <__multadd>
 800c0c8:	42af      	cmp	r7, r5
 800c0ca:	4681      	mov	r9, r0
 800c0cc:	f04f 0300 	mov.w	r3, #0
 800c0d0:	f04f 020a 	mov.w	r2, #10
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	4658      	mov	r0, fp
 800c0d8:	d107      	bne.n	800c0ea <_dtoa_r+0xac2>
 800c0da:	f000 f927 	bl	800c32c <__multadd>
 800c0de:	4607      	mov	r7, r0
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	9b07      	ldr	r3, [sp, #28]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	9307      	str	r3, [sp, #28]
 800c0e8:	e774      	b.n	800bfd4 <_dtoa_r+0x9ac>
 800c0ea:	f000 f91f 	bl	800c32c <__multadd>
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	220a      	movs	r2, #10
 800c0f6:	4658      	mov	r0, fp
 800c0f8:	f000 f918 	bl	800c32c <__multadd>
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	e7f0      	b.n	800c0e2 <_dtoa_r+0xaba>
 800c100:	9b00      	ldr	r3, [sp, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	bfcc      	ite	gt
 800c106:	461e      	movgt	r6, r3
 800c108:	2601      	movle	r6, #1
 800c10a:	4456      	add	r6, sl
 800c10c:	2700      	movs	r7, #0
 800c10e:	4649      	mov	r1, r9
 800c110:	2201      	movs	r2, #1
 800c112:	4658      	mov	r0, fp
 800c114:	f000 fab6 	bl	800c684 <__lshift>
 800c118:	4621      	mov	r1, r4
 800c11a:	4681      	mov	r9, r0
 800c11c:	f000 fb1e 	bl	800c75c <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	dcb0      	bgt.n	800c086 <_dtoa_r+0xa5e>
 800c124:	d102      	bne.n	800c12c <_dtoa_r+0xb04>
 800c126:	f018 0f01 	tst.w	r8, #1
 800c12a:	d1ac      	bne.n	800c086 <_dtoa_r+0xa5e>
 800c12c:	4633      	mov	r3, r6
 800c12e:	461e      	mov	r6, r3
 800c130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c134:	2a30      	cmp	r2, #48	@ 0x30
 800c136:	d0fa      	beq.n	800c12e <_dtoa_r+0xb06>
 800c138:	e5c2      	b.n	800bcc0 <_dtoa_r+0x698>
 800c13a:	459a      	cmp	sl, r3
 800c13c:	d1a4      	bne.n	800c088 <_dtoa_r+0xa60>
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	3301      	adds	r3, #1
 800c142:	9304      	str	r3, [sp, #16]
 800c144:	2331      	movs	r3, #49	@ 0x31
 800c146:	f88a 3000 	strb.w	r3, [sl]
 800c14a:	e5b9      	b.n	800bcc0 <_dtoa_r+0x698>
 800c14c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c14e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c1ac <_dtoa_r+0xb84>
 800c152:	b11b      	cbz	r3, 800c15c <_dtoa_r+0xb34>
 800c154:	f10a 0308 	add.w	r3, sl, #8
 800c158:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	4650      	mov	r0, sl
 800c15e:	b019      	add	sp, #100	@ 0x64
 800c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c166:	2b01      	cmp	r3, #1
 800c168:	f77f ae37 	ble.w	800bdda <_dtoa_r+0x7b2>
 800c16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c170:	2001      	movs	r0, #1
 800c172:	e655      	b.n	800be20 <_dtoa_r+0x7f8>
 800c174:	9b00      	ldr	r3, [sp, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	f77f aed6 	ble.w	800bf28 <_dtoa_r+0x900>
 800c17c:	4656      	mov	r6, sl
 800c17e:	4621      	mov	r1, r4
 800c180:	4648      	mov	r0, r9
 800c182:	f7ff f9c7 	bl	800b514 <quorem>
 800c186:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c18a:	f806 8b01 	strb.w	r8, [r6], #1
 800c18e:	9b00      	ldr	r3, [sp, #0]
 800c190:	eba6 020a 	sub.w	r2, r6, sl
 800c194:	4293      	cmp	r3, r2
 800c196:	ddb3      	ble.n	800c100 <_dtoa_r+0xad8>
 800c198:	4649      	mov	r1, r9
 800c19a:	2300      	movs	r3, #0
 800c19c:	220a      	movs	r2, #10
 800c19e:	4658      	mov	r0, fp
 800c1a0:	f000 f8c4 	bl	800c32c <__multadd>
 800c1a4:	4681      	mov	r9, r0
 800c1a6:	e7ea      	b.n	800c17e <_dtoa_r+0xb56>
 800c1a8:	080102a2 	.word	0x080102a2
 800c1ac:	08010226 	.word	0x08010226

0800c1b0 <_free_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	2900      	cmp	r1, #0
 800c1b6:	d041      	beq.n	800c23c <_free_r+0x8c>
 800c1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1bc:	1f0c      	subs	r4, r1, #4
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	bfb8      	it	lt
 800c1c2:	18e4      	addlt	r4, r4, r3
 800c1c4:	f7fe fad0 	bl	800a768 <__malloc_lock>
 800c1c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c240 <_free_r+0x90>)
 800c1ca:	6813      	ldr	r3, [r2, #0]
 800c1cc:	b933      	cbnz	r3, 800c1dc <_free_r+0x2c>
 800c1ce:	6063      	str	r3, [r4, #4]
 800c1d0:	6014      	str	r4, [r2, #0]
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1d8:	f7fe bacc 	b.w	800a774 <__malloc_unlock>
 800c1dc:	42a3      	cmp	r3, r4
 800c1de:	d908      	bls.n	800c1f2 <_free_r+0x42>
 800c1e0:	6820      	ldr	r0, [r4, #0]
 800c1e2:	1821      	adds	r1, r4, r0
 800c1e4:	428b      	cmp	r3, r1
 800c1e6:	bf01      	itttt	eq
 800c1e8:	6819      	ldreq	r1, [r3, #0]
 800c1ea:	685b      	ldreq	r3, [r3, #4]
 800c1ec:	1809      	addeq	r1, r1, r0
 800c1ee:	6021      	streq	r1, [r4, #0]
 800c1f0:	e7ed      	b.n	800c1ce <_free_r+0x1e>
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	b10b      	cbz	r3, 800c1fc <_free_r+0x4c>
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	d9fa      	bls.n	800c1f2 <_free_r+0x42>
 800c1fc:	6811      	ldr	r1, [r2, #0]
 800c1fe:	1850      	adds	r0, r2, r1
 800c200:	42a0      	cmp	r0, r4
 800c202:	d10b      	bne.n	800c21c <_free_r+0x6c>
 800c204:	6820      	ldr	r0, [r4, #0]
 800c206:	4401      	add	r1, r0
 800c208:	1850      	adds	r0, r2, r1
 800c20a:	4283      	cmp	r3, r0
 800c20c:	6011      	str	r1, [r2, #0]
 800c20e:	d1e0      	bne.n	800c1d2 <_free_r+0x22>
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	6053      	str	r3, [r2, #4]
 800c216:	4408      	add	r0, r1
 800c218:	6010      	str	r0, [r2, #0]
 800c21a:	e7da      	b.n	800c1d2 <_free_r+0x22>
 800c21c:	d902      	bls.n	800c224 <_free_r+0x74>
 800c21e:	230c      	movs	r3, #12
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	e7d6      	b.n	800c1d2 <_free_r+0x22>
 800c224:	6820      	ldr	r0, [r4, #0]
 800c226:	1821      	adds	r1, r4, r0
 800c228:	428b      	cmp	r3, r1
 800c22a:	bf04      	itt	eq
 800c22c:	6819      	ldreq	r1, [r3, #0]
 800c22e:	685b      	ldreq	r3, [r3, #4]
 800c230:	6063      	str	r3, [r4, #4]
 800c232:	bf04      	itt	eq
 800c234:	1809      	addeq	r1, r1, r0
 800c236:	6021      	streq	r1, [r4, #0]
 800c238:	6054      	str	r4, [r2, #4]
 800c23a:	e7ca      	b.n	800c1d2 <_free_r+0x22>
 800c23c:	bd38      	pop	{r3, r4, r5, pc}
 800c23e:	bf00      	nop
 800c240:	2000041c 	.word	0x2000041c

0800c244 <__ascii_mbtowc>:
 800c244:	b082      	sub	sp, #8
 800c246:	b901      	cbnz	r1, 800c24a <__ascii_mbtowc+0x6>
 800c248:	a901      	add	r1, sp, #4
 800c24a:	b142      	cbz	r2, 800c25e <__ascii_mbtowc+0x1a>
 800c24c:	b14b      	cbz	r3, 800c262 <__ascii_mbtowc+0x1e>
 800c24e:	7813      	ldrb	r3, [r2, #0]
 800c250:	600b      	str	r3, [r1, #0]
 800c252:	7812      	ldrb	r2, [r2, #0]
 800c254:	1e10      	subs	r0, r2, #0
 800c256:	bf18      	it	ne
 800c258:	2001      	movne	r0, #1
 800c25a:	b002      	add	sp, #8
 800c25c:	4770      	bx	lr
 800c25e:	4610      	mov	r0, r2
 800c260:	e7fb      	b.n	800c25a <__ascii_mbtowc+0x16>
 800c262:	f06f 0001 	mvn.w	r0, #1
 800c266:	e7f8      	b.n	800c25a <__ascii_mbtowc+0x16>

0800c268 <_Balloc>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	69c6      	ldr	r6, [r0, #28]
 800c26c:	4604      	mov	r4, r0
 800c26e:	460d      	mov	r5, r1
 800c270:	b976      	cbnz	r6, 800c290 <_Balloc+0x28>
 800c272:	2010      	movs	r0, #16
 800c274:	f7fe f9ce 	bl	800a614 <malloc>
 800c278:	4602      	mov	r2, r0
 800c27a:	61e0      	str	r0, [r4, #28]
 800c27c:	b920      	cbnz	r0, 800c288 <_Balloc+0x20>
 800c27e:	4b18      	ldr	r3, [pc, #96]	@ (800c2e0 <_Balloc+0x78>)
 800c280:	4818      	ldr	r0, [pc, #96]	@ (800c2e4 <_Balloc+0x7c>)
 800c282:	216b      	movs	r1, #107	@ 0x6b
 800c284:	f7ff f928 	bl	800b4d8 <__assert_func>
 800c288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c28c:	6006      	str	r6, [r0, #0]
 800c28e:	60c6      	str	r6, [r0, #12]
 800c290:	69e6      	ldr	r6, [r4, #28]
 800c292:	68f3      	ldr	r3, [r6, #12]
 800c294:	b183      	cbz	r3, 800c2b8 <_Balloc+0x50>
 800c296:	69e3      	ldr	r3, [r4, #28]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c29e:	b9b8      	cbnz	r0, 800c2d0 <_Balloc+0x68>
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c2a6:	1d72      	adds	r2, r6, #5
 800c2a8:	0092      	lsls	r2, r2, #2
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fdf5 	bl	800ce9a <_calloc_r>
 800c2b0:	b160      	cbz	r0, 800c2cc <_Balloc+0x64>
 800c2b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2b6:	e00e      	b.n	800c2d6 <_Balloc+0x6e>
 800c2b8:	2221      	movs	r2, #33	@ 0x21
 800c2ba:	2104      	movs	r1, #4
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fdec 	bl	800ce9a <_calloc_r>
 800c2c2:	69e3      	ldr	r3, [r4, #28]
 800c2c4:	60f0      	str	r0, [r6, #12]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1e4      	bne.n	800c296 <_Balloc+0x2e>
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	6802      	ldr	r2, [r0, #0]
 800c2d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2dc:	e7f7      	b.n	800c2ce <_Balloc+0x66>
 800c2de:	bf00      	nop
 800c2e0:	08010233 	.word	0x08010233
 800c2e4:	080102b3 	.word	0x080102b3

0800c2e8 <_Bfree>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	69c6      	ldr	r6, [r0, #28]
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	b976      	cbnz	r6, 800c310 <_Bfree+0x28>
 800c2f2:	2010      	movs	r0, #16
 800c2f4:	f7fe f98e 	bl	800a614 <malloc>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	61e8      	str	r0, [r5, #28]
 800c2fc:	b920      	cbnz	r0, 800c308 <_Bfree+0x20>
 800c2fe:	4b09      	ldr	r3, [pc, #36]	@ (800c324 <_Bfree+0x3c>)
 800c300:	4809      	ldr	r0, [pc, #36]	@ (800c328 <_Bfree+0x40>)
 800c302:	218f      	movs	r1, #143	@ 0x8f
 800c304:	f7ff f8e8 	bl	800b4d8 <__assert_func>
 800c308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c30c:	6006      	str	r6, [r0, #0]
 800c30e:	60c6      	str	r6, [r0, #12]
 800c310:	b13c      	cbz	r4, 800c322 <_Bfree+0x3a>
 800c312:	69eb      	ldr	r3, [r5, #28]
 800c314:	6862      	ldr	r2, [r4, #4]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c31c:	6021      	str	r1, [r4, #0]
 800c31e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	08010233 	.word	0x08010233
 800c328:	080102b3 	.word	0x080102b3

0800c32c <__multadd>:
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	690d      	ldr	r5, [r1, #16]
 800c332:	4607      	mov	r7, r0
 800c334:	460c      	mov	r4, r1
 800c336:	461e      	mov	r6, r3
 800c338:	f101 0c14 	add.w	ip, r1, #20
 800c33c:	2000      	movs	r0, #0
 800c33e:	f8dc 3000 	ldr.w	r3, [ip]
 800c342:	b299      	uxth	r1, r3
 800c344:	fb02 6101 	mla	r1, r2, r1, r6
 800c348:	0c1e      	lsrs	r6, r3, #16
 800c34a:	0c0b      	lsrs	r3, r1, #16
 800c34c:	fb02 3306 	mla	r3, r2, r6, r3
 800c350:	b289      	uxth	r1, r1
 800c352:	3001      	adds	r0, #1
 800c354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c358:	4285      	cmp	r5, r0
 800c35a:	f84c 1b04 	str.w	r1, [ip], #4
 800c35e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c362:	dcec      	bgt.n	800c33e <__multadd+0x12>
 800c364:	b30e      	cbz	r6, 800c3aa <__multadd+0x7e>
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	42ab      	cmp	r3, r5
 800c36a:	dc19      	bgt.n	800c3a0 <__multadd+0x74>
 800c36c:	6861      	ldr	r1, [r4, #4]
 800c36e:	4638      	mov	r0, r7
 800c370:	3101      	adds	r1, #1
 800c372:	f7ff ff79 	bl	800c268 <_Balloc>
 800c376:	4680      	mov	r8, r0
 800c378:	b928      	cbnz	r0, 800c386 <__multadd+0x5a>
 800c37a:	4602      	mov	r2, r0
 800c37c:	4b0c      	ldr	r3, [pc, #48]	@ (800c3b0 <__multadd+0x84>)
 800c37e:	480d      	ldr	r0, [pc, #52]	@ (800c3b4 <__multadd+0x88>)
 800c380:	21ba      	movs	r1, #186	@ 0xba
 800c382:	f7ff f8a9 	bl	800b4d8 <__assert_func>
 800c386:	6922      	ldr	r2, [r4, #16]
 800c388:	3202      	adds	r2, #2
 800c38a:	f104 010c 	add.w	r1, r4, #12
 800c38e:	0092      	lsls	r2, r2, #2
 800c390:	300c      	adds	r0, #12
 800c392:	f7ff f888 	bl	800b4a6 <memcpy>
 800c396:	4621      	mov	r1, r4
 800c398:	4638      	mov	r0, r7
 800c39a:	f7ff ffa5 	bl	800c2e8 <_Bfree>
 800c39e:	4644      	mov	r4, r8
 800c3a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	615e      	str	r6, [r3, #20]
 800c3a8:	6125      	str	r5, [r4, #16]
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b0:	080102a2 	.word	0x080102a2
 800c3b4:	080102b3 	.word	0x080102b3

0800c3b8 <__hi0bits>:
 800c3b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c3bc:	4603      	mov	r3, r0
 800c3be:	bf36      	itet	cc
 800c3c0:	0403      	lslcc	r3, r0, #16
 800c3c2:	2000      	movcs	r0, #0
 800c3c4:	2010      	movcc	r0, #16
 800c3c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3ca:	bf3c      	itt	cc
 800c3cc:	021b      	lslcc	r3, r3, #8
 800c3ce:	3008      	addcc	r0, #8
 800c3d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3d4:	bf3c      	itt	cc
 800c3d6:	011b      	lslcc	r3, r3, #4
 800c3d8:	3004      	addcc	r0, #4
 800c3da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3de:	bf3c      	itt	cc
 800c3e0:	009b      	lslcc	r3, r3, #2
 800c3e2:	3002      	addcc	r0, #2
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	db05      	blt.n	800c3f4 <__hi0bits+0x3c>
 800c3e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c3ec:	f100 0001 	add.w	r0, r0, #1
 800c3f0:	bf08      	it	eq
 800c3f2:	2020      	moveq	r0, #32
 800c3f4:	4770      	bx	lr

0800c3f6 <__lo0bits>:
 800c3f6:	6803      	ldr	r3, [r0, #0]
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	f013 0007 	ands.w	r0, r3, #7
 800c3fe:	d00b      	beq.n	800c418 <__lo0bits+0x22>
 800c400:	07d9      	lsls	r1, r3, #31
 800c402:	d421      	bmi.n	800c448 <__lo0bits+0x52>
 800c404:	0798      	lsls	r0, r3, #30
 800c406:	bf49      	itett	mi
 800c408:	085b      	lsrmi	r3, r3, #1
 800c40a:	089b      	lsrpl	r3, r3, #2
 800c40c:	2001      	movmi	r0, #1
 800c40e:	6013      	strmi	r3, [r2, #0]
 800c410:	bf5c      	itt	pl
 800c412:	6013      	strpl	r3, [r2, #0]
 800c414:	2002      	movpl	r0, #2
 800c416:	4770      	bx	lr
 800c418:	b299      	uxth	r1, r3
 800c41a:	b909      	cbnz	r1, 800c420 <__lo0bits+0x2a>
 800c41c:	0c1b      	lsrs	r3, r3, #16
 800c41e:	2010      	movs	r0, #16
 800c420:	b2d9      	uxtb	r1, r3
 800c422:	b909      	cbnz	r1, 800c428 <__lo0bits+0x32>
 800c424:	3008      	adds	r0, #8
 800c426:	0a1b      	lsrs	r3, r3, #8
 800c428:	0719      	lsls	r1, r3, #28
 800c42a:	bf04      	itt	eq
 800c42c:	091b      	lsreq	r3, r3, #4
 800c42e:	3004      	addeq	r0, #4
 800c430:	0799      	lsls	r1, r3, #30
 800c432:	bf04      	itt	eq
 800c434:	089b      	lsreq	r3, r3, #2
 800c436:	3002      	addeq	r0, #2
 800c438:	07d9      	lsls	r1, r3, #31
 800c43a:	d403      	bmi.n	800c444 <__lo0bits+0x4e>
 800c43c:	085b      	lsrs	r3, r3, #1
 800c43e:	f100 0001 	add.w	r0, r0, #1
 800c442:	d003      	beq.n	800c44c <__lo0bits+0x56>
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	4770      	bx	lr
 800c448:	2000      	movs	r0, #0
 800c44a:	4770      	bx	lr
 800c44c:	2020      	movs	r0, #32
 800c44e:	4770      	bx	lr

0800c450 <__i2b>:
 800c450:	b510      	push	{r4, lr}
 800c452:	460c      	mov	r4, r1
 800c454:	2101      	movs	r1, #1
 800c456:	f7ff ff07 	bl	800c268 <_Balloc>
 800c45a:	4602      	mov	r2, r0
 800c45c:	b928      	cbnz	r0, 800c46a <__i2b+0x1a>
 800c45e:	4b05      	ldr	r3, [pc, #20]	@ (800c474 <__i2b+0x24>)
 800c460:	4805      	ldr	r0, [pc, #20]	@ (800c478 <__i2b+0x28>)
 800c462:	f240 1145 	movw	r1, #325	@ 0x145
 800c466:	f7ff f837 	bl	800b4d8 <__assert_func>
 800c46a:	2301      	movs	r3, #1
 800c46c:	6144      	str	r4, [r0, #20]
 800c46e:	6103      	str	r3, [r0, #16]
 800c470:	bd10      	pop	{r4, pc}
 800c472:	bf00      	nop
 800c474:	080102a2 	.word	0x080102a2
 800c478:	080102b3 	.word	0x080102b3

0800c47c <__multiply>:
 800c47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c480:	4614      	mov	r4, r2
 800c482:	690a      	ldr	r2, [r1, #16]
 800c484:	6923      	ldr	r3, [r4, #16]
 800c486:	429a      	cmp	r2, r3
 800c488:	bfa8      	it	ge
 800c48a:	4623      	movge	r3, r4
 800c48c:	460f      	mov	r7, r1
 800c48e:	bfa4      	itt	ge
 800c490:	460c      	movge	r4, r1
 800c492:	461f      	movge	r7, r3
 800c494:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c498:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c49c:	68a3      	ldr	r3, [r4, #8]
 800c49e:	6861      	ldr	r1, [r4, #4]
 800c4a0:	eb0a 0609 	add.w	r6, sl, r9
 800c4a4:	42b3      	cmp	r3, r6
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	bfb8      	it	lt
 800c4aa:	3101      	addlt	r1, #1
 800c4ac:	f7ff fedc 	bl	800c268 <_Balloc>
 800c4b0:	b930      	cbnz	r0, 800c4c0 <__multiply+0x44>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	4b44      	ldr	r3, [pc, #272]	@ (800c5c8 <__multiply+0x14c>)
 800c4b6:	4845      	ldr	r0, [pc, #276]	@ (800c5cc <__multiply+0x150>)
 800c4b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c4bc:	f7ff f80c 	bl	800b4d8 <__assert_func>
 800c4c0:	f100 0514 	add.w	r5, r0, #20
 800c4c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	4543      	cmp	r3, r8
 800c4ce:	d321      	bcc.n	800c514 <__multiply+0x98>
 800c4d0:	f107 0114 	add.w	r1, r7, #20
 800c4d4:	f104 0214 	add.w	r2, r4, #20
 800c4d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c4dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c4e0:	9302      	str	r3, [sp, #8]
 800c4e2:	1b13      	subs	r3, r2, r4
 800c4e4:	3b15      	subs	r3, #21
 800c4e6:	f023 0303 	bic.w	r3, r3, #3
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	f104 0715 	add.w	r7, r4, #21
 800c4f0:	42ba      	cmp	r2, r7
 800c4f2:	bf38      	it	cc
 800c4f4:	2304      	movcc	r3, #4
 800c4f6:	9301      	str	r3, [sp, #4]
 800c4f8:	9b02      	ldr	r3, [sp, #8]
 800c4fa:	9103      	str	r1, [sp, #12]
 800c4fc:	428b      	cmp	r3, r1
 800c4fe:	d80c      	bhi.n	800c51a <__multiply+0x9e>
 800c500:	2e00      	cmp	r6, #0
 800c502:	dd03      	ble.n	800c50c <__multiply+0x90>
 800c504:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d05b      	beq.n	800c5c4 <__multiply+0x148>
 800c50c:	6106      	str	r6, [r0, #16]
 800c50e:	b005      	add	sp, #20
 800c510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c514:	f843 2b04 	str.w	r2, [r3], #4
 800c518:	e7d8      	b.n	800c4cc <__multiply+0x50>
 800c51a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c51e:	f1ba 0f00 	cmp.w	sl, #0
 800c522:	d024      	beq.n	800c56e <__multiply+0xf2>
 800c524:	f104 0e14 	add.w	lr, r4, #20
 800c528:	46a9      	mov	r9, r5
 800c52a:	f04f 0c00 	mov.w	ip, #0
 800c52e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c532:	f8d9 3000 	ldr.w	r3, [r9]
 800c536:	fa1f fb87 	uxth.w	fp, r7
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c540:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c544:	f8d9 7000 	ldr.w	r7, [r9]
 800c548:	4463      	add	r3, ip
 800c54a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c54e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c552:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c556:	b29b      	uxth	r3, r3
 800c558:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c55c:	4572      	cmp	r2, lr
 800c55e:	f849 3b04 	str.w	r3, [r9], #4
 800c562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c566:	d8e2      	bhi.n	800c52e <__multiply+0xb2>
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	f845 c003 	str.w	ip, [r5, r3]
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c574:	3104      	adds	r1, #4
 800c576:	f1b9 0f00 	cmp.w	r9, #0
 800c57a:	d021      	beq.n	800c5c0 <__multiply+0x144>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	f104 0c14 	add.w	ip, r4, #20
 800c582:	46ae      	mov	lr, r5
 800c584:	f04f 0a00 	mov.w	sl, #0
 800c588:	f8bc b000 	ldrh.w	fp, [ip]
 800c58c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c590:	fb09 770b 	mla	r7, r9, fp, r7
 800c594:	4457      	add	r7, sl
 800c596:	b29b      	uxth	r3, r3
 800c598:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c59c:	f84e 3b04 	str.w	r3, [lr], #4
 800c5a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5a8:	f8be 3000 	ldrh.w	r3, [lr]
 800c5ac:	fb09 330a 	mla	r3, r9, sl, r3
 800c5b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c5b4:	4562      	cmp	r2, ip
 800c5b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5ba:	d8e5      	bhi.n	800c588 <__multiply+0x10c>
 800c5bc:	9f01      	ldr	r7, [sp, #4]
 800c5be:	51eb      	str	r3, [r5, r7]
 800c5c0:	3504      	adds	r5, #4
 800c5c2:	e799      	b.n	800c4f8 <__multiply+0x7c>
 800c5c4:	3e01      	subs	r6, #1
 800c5c6:	e79b      	b.n	800c500 <__multiply+0x84>
 800c5c8:	080102a2 	.word	0x080102a2
 800c5cc:	080102b3 	.word	0x080102b3

0800c5d0 <__pow5mult>:
 800c5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d4:	4615      	mov	r5, r2
 800c5d6:	f012 0203 	ands.w	r2, r2, #3
 800c5da:	4607      	mov	r7, r0
 800c5dc:	460e      	mov	r6, r1
 800c5de:	d007      	beq.n	800c5f0 <__pow5mult+0x20>
 800c5e0:	4c25      	ldr	r4, [pc, #148]	@ (800c678 <__pow5mult+0xa8>)
 800c5e2:	3a01      	subs	r2, #1
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5ea:	f7ff fe9f 	bl	800c32c <__multadd>
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	10ad      	asrs	r5, r5, #2
 800c5f2:	d03d      	beq.n	800c670 <__pow5mult+0xa0>
 800c5f4:	69fc      	ldr	r4, [r7, #28]
 800c5f6:	b97c      	cbnz	r4, 800c618 <__pow5mult+0x48>
 800c5f8:	2010      	movs	r0, #16
 800c5fa:	f7fe f80b 	bl	800a614 <malloc>
 800c5fe:	4602      	mov	r2, r0
 800c600:	61f8      	str	r0, [r7, #28]
 800c602:	b928      	cbnz	r0, 800c610 <__pow5mult+0x40>
 800c604:	4b1d      	ldr	r3, [pc, #116]	@ (800c67c <__pow5mult+0xac>)
 800c606:	481e      	ldr	r0, [pc, #120]	@ (800c680 <__pow5mult+0xb0>)
 800c608:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c60c:	f7fe ff64 	bl	800b4d8 <__assert_func>
 800c610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c614:	6004      	str	r4, [r0, #0]
 800c616:	60c4      	str	r4, [r0, #12]
 800c618:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c61c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c620:	b94c      	cbnz	r4, 800c636 <__pow5mult+0x66>
 800c622:	f240 2171 	movw	r1, #625	@ 0x271
 800c626:	4638      	mov	r0, r7
 800c628:	f7ff ff12 	bl	800c450 <__i2b>
 800c62c:	2300      	movs	r3, #0
 800c62e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c632:	4604      	mov	r4, r0
 800c634:	6003      	str	r3, [r0, #0]
 800c636:	f04f 0900 	mov.w	r9, #0
 800c63a:	07eb      	lsls	r3, r5, #31
 800c63c:	d50a      	bpl.n	800c654 <__pow5mult+0x84>
 800c63e:	4631      	mov	r1, r6
 800c640:	4622      	mov	r2, r4
 800c642:	4638      	mov	r0, r7
 800c644:	f7ff ff1a 	bl	800c47c <__multiply>
 800c648:	4631      	mov	r1, r6
 800c64a:	4680      	mov	r8, r0
 800c64c:	4638      	mov	r0, r7
 800c64e:	f7ff fe4b 	bl	800c2e8 <_Bfree>
 800c652:	4646      	mov	r6, r8
 800c654:	106d      	asrs	r5, r5, #1
 800c656:	d00b      	beq.n	800c670 <__pow5mult+0xa0>
 800c658:	6820      	ldr	r0, [r4, #0]
 800c65a:	b938      	cbnz	r0, 800c66c <__pow5mult+0x9c>
 800c65c:	4622      	mov	r2, r4
 800c65e:	4621      	mov	r1, r4
 800c660:	4638      	mov	r0, r7
 800c662:	f7ff ff0b 	bl	800c47c <__multiply>
 800c666:	6020      	str	r0, [r4, #0]
 800c668:	f8c0 9000 	str.w	r9, [r0]
 800c66c:	4604      	mov	r4, r0
 800c66e:	e7e4      	b.n	800c63a <__pow5mult+0x6a>
 800c670:	4630      	mov	r0, r6
 800c672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c676:	bf00      	nop
 800c678:	0801030c 	.word	0x0801030c
 800c67c:	08010233 	.word	0x08010233
 800c680:	080102b3 	.word	0x080102b3

0800c684 <__lshift>:
 800c684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c688:	460c      	mov	r4, r1
 800c68a:	6849      	ldr	r1, [r1, #4]
 800c68c:	6923      	ldr	r3, [r4, #16]
 800c68e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	4607      	mov	r7, r0
 800c696:	4691      	mov	r9, r2
 800c698:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c69c:	f108 0601 	add.w	r6, r8, #1
 800c6a0:	42b3      	cmp	r3, r6
 800c6a2:	db0b      	blt.n	800c6bc <__lshift+0x38>
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	f7ff fddf 	bl	800c268 <_Balloc>
 800c6aa:	4605      	mov	r5, r0
 800c6ac:	b948      	cbnz	r0, 800c6c2 <__lshift+0x3e>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	4b28      	ldr	r3, [pc, #160]	@ (800c754 <__lshift+0xd0>)
 800c6b2:	4829      	ldr	r0, [pc, #164]	@ (800c758 <__lshift+0xd4>)
 800c6b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c6b8:	f7fe ff0e 	bl	800b4d8 <__assert_func>
 800c6bc:	3101      	adds	r1, #1
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	e7ee      	b.n	800c6a0 <__lshift+0x1c>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f100 0114 	add.w	r1, r0, #20
 800c6c8:	f100 0210 	add.w	r2, r0, #16
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	4553      	cmp	r3, sl
 800c6d0:	db33      	blt.n	800c73a <__lshift+0xb6>
 800c6d2:	6920      	ldr	r0, [r4, #16]
 800c6d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6d8:	f104 0314 	add.w	r3, r4, #20
 800c6dc:	f019 091f 	ands.w	r9, r9, #31
 800c6e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6e8:	d02b      	beq.n	800c742 <__lshift+0xbe>
 800c6ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c6ee:	468a      	mov	sl, r1
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	6818      	ldr	r0, [r3, #0]
 800c6f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c6f8:	4310      	orrs	r0, r2
 800c6fa:	f84a 0b04 	str.w	r0, [sl], #4
 800c6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c702:	459c      	cmp	ip, r3
 800c704:	fa22 f20e 	lsr.w	r2, r2, lr
 800c708:	d8f3      	bhi.n	800c6f2 <__lshift+0x6e>
 800c70a:	ebac 0304 	sub.w	r3, ip, r4
 800c70e:	3b15      	subs	r3, #21
 800c710:	f023 0303 	bic.w	r3, r3, #3
 800c714:	3304      	adds	r3, #4
 800c716:	f104 0015 	add.w	r0, r4, #21
 800c71a:	4584      	cmp	ip, r0
 800c71c:	bf38      	it	cc
 800c71e:	2304      	movcc	r3, #4
 800c720:	50ca      	str	r2, [r1, r3]
 800c722:	b10a      	cbz	r2, 800c728 <__lshift+0xa4>
 800c724:	f108 0602 	add.w	r6, r8, #2
 800c728:	3e01      	subs	r6, #1
 800c72a:	4638      	mov	r0, r7
 800c72c:	612e      	str	r6, [r5, #16]
 800c72e:	4621      	mov	r1, r4
 800c730:	f7ff fdda 	bl	800c2e8 <_Bfree>
 800c734:	4628      	mov	r0, r5
 800c736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c73e:	3301      	adds	r3, #1
 800c740:	e7c5      	b.n	800c6ce <__lshift+0x4a>
 800c742:	3904      	subs	r1, #4
 800c744:	f853 2b04 	ldr.w	r2, [r3], #4
 800c748:	f841 2f04 	str.w	r2, [r1, #4]!
 800c74c:	459c      	cmp	ip, r3
 800c74e:	d8f9      	bhi.n	800c744 <__lshift+0xc0>
 800c750:	e7ea      	b.n	800c728 <__lshift+0xa4>
 800c752:	bf00      	nop
 800c754:	080102a2 	.word	0x080102a2
 800c758:	080102b3 	.word	0x080102b3

0800c75c <__mcmp>:
 800c75c:	690a      	ldr	r2, [r1, #16]
 800c75e:	4603      	mov	r3, r0
 800c760:	6900      	ldr	r0, [r0, #16]
 800c762:	1a80      	subs	r0, r0, r2
 800c764:	b530      	push	{r4, r5, lr}
 800c766:	d10e      	bne.n	800c786 <__mcmp+0x2a>
 800c768:	3314      	adds	r3, #20
 800c76a:	3114      	adds	r1, #20
 800c76c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c770:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c774:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c778:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c77c:	4295      	cmp	r5, r2
 800c77e:	d003      	beq.n	800c788 <__mcmp+0x2c>
 800c780:	d205      	bcs.n	800c78e <__mcmp+0x32>
 800c782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c786:	bd30      	pop	{r4, r5, pc}
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d3f3      	bcc.n	800c774 <__mcmp+0x18>
 800c78c:	e7fb      	b.n	800c786 <__mcmp+0x2a>
 800c78e:	2001      	movs	r0, #1
 800c790:	e7f9      	b.n	800c786 <__mcmp+0x2a>
	...

0800c794 <__mdiff>:
 800c794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c798:	4689      	mov	r9, r1
 800c79a:	4606      	mov	r6, r0
 800c79c:	4611      	mov	r1, r2
 800c79e:	4648      	mov	r0, r9
 800c7a0:	4614      	mov	r4, r2
 800c7a2:	f7ff ffdb 	bl	800c75c <__mcmp>
 800c7a6:	1e05      	subs	r5, r0, #0
 800c7a8:	d112      	bne.n	800c7d0 <__mdiff+0x3c>
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f7ff fd5b 	bl	800c268 <_Balloc>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	b928      	cbnz	r0, 800c7c2 <__mdiff+0x2e>
 800c7b6:	4b3f      	ldr	r3, [pc, #252]	@ (800c8b4 <__mdiff+0x120>)
 800c7b8:	f240 2137 	movw	r1, #567	@ 0x237
 800c7bc:	483e      	ldr	r0, [pc, #248]	@ (800c8b8 <__mdiff+0x124>)
 800c7be:	f7fe fe8b 	bl	800b4d8 <__assert_func>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	b003      	add	sp, #12
 800c7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d0:	bfbc      	itt	lt
 800c7d2:	464b      	movlt	r3, r9
 800c7d4:	46a1      	movlt	r9, r4
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c7dc:	bfba      	itte	lt
 800c7de:	461c      	movlt	r4, r3
 800c7e0:	2501      	movlt	r5, #1
 800c7e2:	2500      	movge	r5, #0
 800c7e4:	f7ff fd40 	bl	800c268 <_Balloc>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	b918      	cbnz	r0, 800c7f4 <__mdiff+0x60>
 800c7ec:	4b31      	ldr	r3, [pc, #196]	@ (800c8b4 <__mdiff+0x120>)
 800c7ee:	f240 2145 	movw	r1, #581	@ 0x245
 800c7f2:	e7e3      	b.n	800c7bc <__mdiff+0x28>
 800c7f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7f8:	6926      	ldr	r6, [r4, #16]
 800c7fa:	60c5      	str	r5, [r0, #12]
 800c7fc:	f109 0310 	add.w	r3, r9, #16
 800c800:	f109 0514 	add.w	r5, r9, #20
 800c804:	f104 0e14 	add.w	lr, r4, #20
 800c808:	f100 0b14 	add.w	fp, r0, #20
 800c80c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c810:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	46d9      	mov	r9, fp
 800c818:	f04f 0c00 	mov.w	ip, #0
 800c81c:	9b01      	ldr	r3, [sp, #4]
 800c81e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c822:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	fa1f f38a 	uxth.w	r3, sl
 800c82c:	4619      	mov	r1, r3
 800c82e:	b283      	uxth	r3, r0
 800c830:	1acb      	subs	r3, r1, r3
 800c832:	0c00      	lsrs	r0, r0, #16
 800c834:	4463      	add	r3, ip
 800c836:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c83a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c83e:	b29b      	uxth	r3, r3
 800c840:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c844:	4576      	cmp	r6, lr
 800c846:	f849 3b04 	str.w	r3, [r9], #4
 800c84a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c84e:	d8e5      	bhi.n	800c81c <__mdiff+0x88>
 800c850:	1b33      	subs	r3, r6, r4
 800c852:	3b15      	subs	r3, #21
 800c854:	f023 0303 	bic.w	r3, r3, #3
 800c858:	3415      	adds	r4, #21
 800c85a:	3304      	adds	r3, #4
 800c85c:	42a6      	cmp	r6, r4
 800c85e:	bf38      	it	cc
 800c860:	2304      	movcc	r3, #4
 800c862:	441d      	add	r5, r3
 800c864:	445b      	add	r3, fp
 800c866:	461e      	mov	r6, r3
 800c868:	462c      	mov	r4, r5
 800c86a:	4544      	cmp	r4, r8
 800c86c:	d30e      	bcc.n	800c88c <__mdiff+0xf8>
 800c86e:	f108 0103 	add.w	r1, r8, #3
 800c872:	1b49      	subs	r1, r1, r5
 800c874:	f021 0103 	bic.w	r1, r1, #3
 800c878:	3d03      	subs	r5, #3
 800c87a:	45a8      	cmp	r8, r5
 800c87c:	bf38      	it	cc
 800c87e:	2100      	movcc	r1, #0
 800c880:	440b      	add	r3, r1
 800c882:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c886:	b191      	cbz	r1, 800c8ae <__mdiff+0x11a>
 800c888:	6117      	str	r7, [r2, #16]
 800c88a:	e79d      	b.n	800c7c8 <__mdiff+0x34>
 800c88c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c890:	46e6      	mov	lr, ip
 800c892:	0c08      	lsrs	r0, r1, #16
 800c894:	fa1c fc81 	uxtah	ip, ip, r1
 800c898:	4471      	add	r1, lr
 800c89a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c89e:	b289      	uxth	r1, r1
 800c8a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c8a4:	f846 1b04 	str.w	r1, [r6], #4
 800c8a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8ac:	e7dd      	b.n	800c86a <__mdiff+0xd6>
 800c8ae:	3f01      	subs	r7, #1
 800c8b0:	e7e7      	b.n	800c882 <__mdiff+0xee>
 800c8b2:	bf00      	nop
 800c8b4:	080102a2 	.word	0x080102a2
 800c8b8:	080102b3 	.word	0x080102b3

0800c8bc <__d2b>:
 800c8bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	ec59 8b10 	vmov	r8, r9, d0
 800c8c8:	4616      	mov	r6, r2
 800c8ca:	f7ff fccd 	bl	800c268 <_Balloc>
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	b930      	cbnz	r0, 800c8e0 <__d2b+0x24>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	4b23      	ldr	r3, [pc, #140]	@ (800c964 <__d2b+0xa8>)
 800c8d6:	4824      	ldr	r0, [pc, #144]	@ (800c968 <__d2b+0xac>)
 800c8d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8dc:	f7fe fdfc 	bl	800b4d8 <__assert_func>
 800c8e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8e8:	b10d      	cbz	r5, 800c8ee <__d2b+0x32>
 800c8ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800c8f4:	d023      	beq.n	800c93e <__d2b+0x82>
 800c8f6:	4668      	mov	r0, sp
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	f7ff fd7c 	bl	800c3f6 <__lo0bits>
 800c8fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c902:	b1d0      	cbz	r0, 800c93a <__d2b+0x7e>
 800c904:	f1c0 0320 	rsb	r3, r0, #32
 800c908:	fa02 f303 	lsl.w	r3, r2, r3
 800c90c:	430b      	orrs	r3, r1
 800c90e:	40c2      	lsrs	r2, r0
 800c910:	6163      	str	r3, [r4, #20]
 800c912:	9201      	str	r2, [sp, #4]
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	61a3      	str	r3, [r4, #24]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bf0c      	ite	eq
 800c91c:	2201      	moveq	r2, #1
 800c91e:	2202      	movne	r2, #2
 800c920:	6122      	str	r2, [r4, #16]
 800c922:	b1a5      	cbz	r5, 800c94e <__d2b+0x92>
 800c924:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c928:	4405      	add	r5, r0
 800c92a:	603d      	str	r5, [r7, #0]
 800c92c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c930:	6030      	str	r0, [r6, #0]
 800c932:	4620      	mov	r0, r4
 800c934:	b003      	add	sp, #12
 800c936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c93a:	6161      	str	r1, [r4, #20]
 800c93c:	e7ea      	b.n	800c914 <__d2b+0x58>
 800c93e:	a801      	add	r0, sp, #4
 800c940:	f7ff fd59 	bl	800c3f6 <__lo0bits>
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	6163      	str	r3, [r4, #20]
 800c948:	3020      	adds	r0, #32
 800c94a:	2201      	movs	r2, #1
 800c94c:	e7e8      	b.n	800c920 <__d2b+0x64>
 800c94e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c952:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c956:	6038      	str	r0, [r7, #0]
 800c958:	6918      	ldr	r0, [r3, #16]
 800c95a:	f7ff fd2d 	bl	800c3b8 <__hi0bits>
 800c95e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c962:	e7e5      	b.n	800c930 <__d2b+0x74>
 800c964:	080102a2 	.word	0x080102a2
 800c968:	080102b3 	.word	0x080102b3

0800c96c <__ascii_wctomb>:
 800c96c:	4603      	mov	r3, r0
 800c96e:	4608      	mov	r0, r1
 800c970:	b141      	cbz	r1, 800c984 <__ascii_wctomb+0x18>
 800c972:	2aff      	cmp	r2, #255	@ 0xff
 800c974:	d904      	bls.n	800c980 <__ascii_wctomb+0x14>
 800c976:	228a      	movs	r2, #138	@ 0x8a
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c97e:	4770      	bx	lr
 800c980:	700a      	strb	r2, [r1, #0]
 800c982:	2001      	movs	r0, #1
 800c984:	4770      	bx	lr

0800c986 <__sfputc_r>:
 800c986:	6893      	ldr	r3, [r2, #8]
 800c988:	3b01      	subs	r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	b410      	push	{r4}
 800c98e:	6093      	str	r3, [r2, #8]
 800c990:	da08      	bge.n	800c9a4 <__sfputc_r+0x1e>
 800c992:	6994      	ldr	r4, [r2, #24]
 800c994:	42a3      	cmp	r3, r4
 800c996:	db01      	blt.n	800c99c <__sfputc_r+0x16>
 800c998:	290a      	cmp	r1, #10
 800c99a:	d103      	bne.n	800c9a4 <__sfputc_r+0x1e>
 800c99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a0:	f7fe bc5d 	b.w	800b25e <__swbuf_r>
 800c9a4:	6813      	ldr	r3, [r2, #0]
 800c9a6:	1c58      	adds	r0, r3, #1
 800c9a8:	6010      	str	r0, [r2, #0]
 800c9aa:	7019      	strb	r1, [r3, #0]
 800c9ac:	4608      	mov	r0, r1
 800c9ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <__sfputs_r>:
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	460f      	mov	r7, r1
 800c9ba:	4614      	mov	r4, r2
 800c9bc:	18d5      	adds	r5, r2, r3
 800c9be:	42ac      	cmp	r4, r5
 800c9c0:	d101      	bne.n	800c9c6 <__sfputs_r+0x12>
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	e007      	b.n	800c9d6 <__sfputs_r+0x22>
 800c9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ca:	463a      	mov	r2, r7
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7ff ffda 	bl	800c986 <__sfputc_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d1f3      	bne.n	800c9be <__sfputs_r+0xa>
 800c9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9d8 <_vfiprintf_r>:
 800c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9dc:	460d      	mov	r5, r1
 800c9de:	b09d      	sub	sp, #116	@ 0x74
 800c9e0:	4614      	mov	r4, r2
 800c9e2:	4698      	mov	r8, r3
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	b118      	cbz	r0, 800c9f0 <_vfiprintf_r+0x18>
 800c9e8:	6a03      	ldr	r3, [r0, #32]
 800c9ea:	b90b      	cbnz	r3, 800c9f0 <_vfiprintf_r+0x18>
 800c9ec:	f7fe fbac 	bl	800b148 <__sinit>
 800c9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9f2:	07d9      	lsls	r1, r3, #31
 800c9f4:	d405      	bmi.n	800ca02 <_vfiprintf_r+0x2a>
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	059a      	lsls	r2, r3, #22
 800c9fa:	d402      	bmi.n	800ca02 <_vfiprintf_r+0x2a>
 800c9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9fe:	f7fe fd50 	bl	800b4a2 <__retarget_lock_acquire_recursive>
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	071b      	lsls	r3, r3, #28
 800ca06:	d501      	bpl.n	800ca0c <_vfiprintf_r+0x34>
 800ca08:	692b      	ldr	r3, [r5, #16]
 800ca0a:	b99b      	cbnz	r3, 800ca34 <_vfiprintf_r+0x5c>
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7fe fc64 	bl	800b2dc <__swsetup_r>
 800ca14:	b170      	cbz	r0, 800ca34 <_vfiprintf_r+0x5c>
 800ca16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca18:	07dc      	lsls	r4, r3, #31
 800ca1a:	d504      	bpl.n	800ca26 <_vfiprintf_r+0x4e>
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca20:	b01d      	add	sp, #116	@ 0x74
 800ca22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca26:	89ab      	ldrh	r3, [r5, #12]
 800ca28:	0598      	lsls	r0, r3, #22
 800ca2a:	d4f7      	bmi.n	800ca1c <_vfiprintf_r+0x44>
 800ca2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca2e:	f7fe fd39 	bl	800b4a4 <__retarget_lock_release_recursive>
 800ca32:	e7f3      	b.n	800ca1c <_vfiprintf_r+0x44>
 800ca34:	2300      	movs	r3, #0
 800ca36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca38:	2320      	movs	r3, #32
 800ca3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca42:	2330      	movs	r3, #48	@ 0x30
 800ca44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbf4 <_vfiprintf_r+0x21c>
 800ca48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca4c:	f04f 0901 	mov.w	r9, #1
 800ca50:	4623      	mov	r3, r4
 800ca52:	469a      	mov	sl, r3
 800ca54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca58:	b10a      	cbz	r2, 800ca5e <_vfiprintf_r+0x86>
 800ca5a:	2a25      	cmp	r2, #37	@ 0x25
 800ca5c:	d1f9      	bne.n	800ca52 <_vfiprintf_r+0x7a>
 800ca5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca62:	d00b      	beq.n	800ca7c <_vfiprintf_r+0xa4>
 800ca64:	465b      	mov	r3, fp
 800ca66:	4622      	mov	r2, r4
 800ca68:	4629      	mov	r1, r5
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7ff ffa2 	bl	800c9b4 <__sfputs_r>
 800ca70:	3001      	adds	r0, #1
 800ca72:	f000 80a7 	beq.w	800cbc4 <_vfiprintf_r+0x1ec>
 800ca76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca78:	445a      	add	r2, fp
 800ca7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 809f 	beq.w	800cbc4 <_vfiprintf_r+0x1ec>
 800ca86:	2300      	movs	r3, #0
 800ca88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca90:	f10a 0a01 	add.w	sl, sl, #1
 800ca94:	9304      	str	r3, [sp, #16]
 800ca96:	9307      	str	r3, [sp, #28]
 800ca98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca9e:	4654      	mov	r4, sl
 800caa0:	2205      	movs	r2, #5
 800caa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa6:	4853      	ldr	r0, [pc, #332]	@ (800cbf4 <_vfiprintf_r+0x21c>)
 800caa8:	f7f3 fb9a 	bl	80001e0 <memchr>
 800caac:	9a04      	ldr	r2, [sp, #16]
 800caae:	b9d8      	cbnz	r0, 800cae8 <_vfiprintf_r+0x110>
 800cab0:	06d1      	lsls	r1, r2, #27
 800cab2:	bf44      	itt	mi
 800cab4:	2320      	movmi	r3, #32
 800cab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caba:	0713      	lsls	r3, r2, #28
 800cabc:	bf44      	itt	mi
 800cabe:	232b      	movmi	r3, #43	@ 0x2b
 800cac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cac4:	f89a 3000 	ldrb.w	r3, [sl]
 800cac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800caca:	d015      	beq.n	800caf8 <_vfiprintf_r+0x120>
 800cacc:	9a07      	ldr	r2, [sp, #28]
 800cace:	4654      	mov	r4, sl
 800cad0:	2000      	movs	r0, #0
 800cad2:	f04f 0c0a 	mov.w	ip, #10
 800cad6:	4621      	mov	r1, r4
 800cad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cadc:	3b30      	subs	r3, #48	@ 0x30
 800cade:	2b09      	cmp	r3, #9
 800cae0:	d94b      	bls.n	800cb7a <_vfiprintf_r+0x1a2>
 800cae2:	b1b0      	cbz	r0, 800cb12 <_vfiprintf_r+0x13a>
 800cae4:	9207      	str	r2, [sp, #28]
 800cae6:	e014      	b.n	800cb12 <_vfiprintf_r+0x13a>
 800cae8:	eba0 0308 	sub.w	r3, r0, r8
 800caec:	fa09 f303 	lsl.w	r3, r9, r3
 800caf0:	4313      	orrs	r3, r2
 800caf2:	9304      	str	r3, [sp, #16]
 800caf4:	46a2      	mov	sl, r4
 800caf6:	e7d2      	b.n	800ca9e <_vfiprintf_r+0xc6>
 800caf8:	9b03      	ldr	r3, [sp, #12]
 800cafa:	1d19      	adds	r1, r3, #4
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	9103      	str	r1, [sp, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	bfbb      	ittet	lt
 800cb04:	425b      	neglt	r3, r3
 800cb06:	f042 0202 	orrlt.w	r2, r2, #2
 800cb0a:	9307      	strge	r3, [sp, #28]
 800cb0c:	9307      	strlt	r3, [sp, #28]
 800cb0e:	bfb8      	it	lt
 800cb10:	9204      	strlt	r2, [sp, #16]
 800cb12:	7823      	ldrb	r3, [r4, #0]
 800cb14:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb16:	d10a      	bne.n	800cb2e <_vfiprintf_r+0x156>
 800cb18:	7863      	ldrb	r3, [r4, #1]
 800cb1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb1c:	d132      	bne.n	800cb84 <_vfiprintf_r+0x1ac>
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	1d1a      	adds	r2, r3, #4
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	9203      	str	r2, [sp, #12]
 800cb26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb2a:	3402      	adds	r4, #2
 800cb2c:	9305      	str	r3, [sp, #20]
 800cb2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc04 <_vfiprintf_r+0x22c>
 800cb32:	7821      	ldrb	r1, [r4, #0]
 800cb34:	2203      	movs	r2, #3
 800cb36:	4650      	mov	r0, sl
 800cb38:	f7f3 fb52 	bl	80001e0 <memchr>
 800cb3c:	b138      	cbz	r0, 800cb4e <_vfiprintf_r+0x176>
 800cb3e:	9b04      	ldr	r3, [sp, #16]
 800cb40:	eba0 000a 	sub.w	r0, r0, sl
 800cb44:	2240      	movs	r2, #64	@ 0x40
 800cb46:	4082      	lsls	r2, r0
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	3401      	adds	r4, #1
 800cb4c:	9304      	str	r3, [sp, #16]
 800cb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb52:	4829      	ldr	r0, [pc, #164]	@ (800cbf8 <_vfiprintf_r+0x220>)
 800cb54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb58:	2206      	movs	r2, #6
 800cb5a:	f7f3 fb41 	bl	80001e0 <memchr>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d03f      	beq.n	800cbe2 <_vfiprintf_r+0x20a>
 800cb62:	4b26      	ldr	r3, [pc, #152]	@ (800cbfc <_vfiprintf_r+0x224>)
 800cb64:	bb1b      	cbnz	r3, 800cbae <_vfiprintf_r+0x1d6>
 800cb66:	9b03      	ldr	r3, [sp, #12]
 800cb68:	3307      	adds	r3, #7
 800cb6a:	f023 0307 	bic.w	r3, r3, #7
 800cb6e:	3308      	adds	r3, #8
 800cb70:	9303      	str	r3, [sp, #12]
 800cb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb74:	443b      	add	r3, r7
 800cb76:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb78:	e76a      	b.n	800ca50 <_vfiprintf_r+0x78>
 800cb7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb7e:	460c      	mov	r4, r1
 800cb80:	2001      	movs	r0, #1
 800cb82:	e7a8      	b.n	800cad6 <_vfiprintf_r+0xfe>
 800cb84:	2300      	movs	r3, #0
 800cb86:	3401      	adds	r4, #1
 800cb88:	9305      	str	r3, [sp, #20]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	f04f 0c0a 	mov.w	ip, #10
 800cb90:	4620      	mov	r0, r4
 800cb92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb96:	3a30      	subs	r2, #48	@ 0x30
 800cb98:	2a09      	cmp	r2, #9
 800cb9a:	d903      	bls.n	800cba4 <_vfiprintf_r+0x1cc>
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d0c6      	beq.n	800cb2e <_vfiprintf_r+0x156>
 800cba0:	9105      	str	r1, [sp, #20]
 800cba2:	e7c4      	b.n	800cb2e <_vfiprintf_r+0x156>
 800cba4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cba8:	4604      	mov	r4, r0
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e7f0      	b.n	800cb90 <_vfiprintf_r+0x1b8>
 800cbae:	ab03      	add	r3, sp, #12
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	462a      	mov	r2, r5
 800cbb4:	4b12      	ldr	r3, [pc, #72]	@ (800cc00 <_vfiprintf_r+0x228>)
 800cbb6:	a904      	add	r1, sp, #16
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f7fd fe81 	bl	800a8c0 <_printf_float>
 800cbbe:	4607      	mov	r7, r0
 800cbc0:	1c78      	adds	r0, r7, #1
 800cbc2:	d1d6      	bne.n	800cb72 <_vfiprintf_r+0x19a>
 800cbc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbc6:	07d9      	lsls	r1, r3, #31
 800cbc8:	d405      	bmi.n	800cbd6 <_vfiprintf_r+0x1fe>
 800cbca:	89ab      	ldrh	r3, [r5, #12]
 800cbcc:	059a      	lsls	r2, r3, #22
 800cbce:	d402      	bmi.n	800cbd6 <_vfiprintf_r+0x1fe>
 800cbd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbd2:	f7fe fc67 	bl	800b4a4 <__retarget_lock_release_recursive>
 800cbd6:	89ab      	ldrh	r3, [r5, #12]
 800cbd8:	065b      	lsls	r3, r3, #25
 800cbda:	f53f af1f 	bmi.w	800ca1c <_vfiprintf_r+0x44>
 800cbde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbe0:	e71e      	b.n	800ca20 <_vfiprintf_r+0x48>
 800cbe2:	ab03      	add	r3, sp, #12
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	462a      	mov	r2, r5
 800cbe8:	4b05      	ldr	r3, [pc, #20]	@ (800cc00 <_vfiprintf_r+0x228>)
 800cbea:	a904      	add	r1, sp, #16
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7fe f8ff 	bl	800adf0 <_printf_i>
 800cbf2:	e7e4      	b.n	800cbbe <_vfiprintf_r+0x1e6>
 800cbf4:	08010509 	.word	0x08010509
 800cbf8:	08010513 	.word	0x08010513
 800cbfc:	0800a8c1 	.word	0x0800a8c1
 800cc00:	0800c9b5 	.word	0x0800c9b5
 800cc04:	0801050f 	.word	0x0801050f

0800cc08 <__sflush_r>:
 800cc08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc10:	0716      	lsls	r6, r2, #28
 800cc12:	4605      	mov	r5, r0
 800cc14:	460c      	mov	r4, r1
 800cc16:	d454      	bmi.n	800ccc2 <__sflush_r+0xba>
 800cc18:	684b      	ldr	r3, [r1, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	dc02      	bgt.n	800cc24 <__sflush_r+0x1c>
 800cc1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dd48      	ble.n	800ccb6 <__sflush_r+0xae>
 800cc24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc26:	2e00      	cmp	r6, #0
 800cc28:	d045      	beq.n	800ccb6 <__sflush_r+0xae>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc30:	682f      	ldr	r7, [r5, #0]
 800cc32:	6a21      	ldr	r1, [r4, #32]
 800cc34:	602b      	str	r3, [r5, #0]
 800cc36:	d030      	beq.n	800cc9a <__sflush_r+0x92>
 800cc38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	0759      	lsls	r1, r3, #29
 800cc3e:	d505      	bpl.n	800cc4c <__sflush_r+0x44>
 800cc40:	6863      	ldr	r3, [r4, #4]
 800cc42:	1ad2      	subs	r2, r2, r3
 800cc44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc46:	b10b      	cbz	r3, 800cc4c <__sflush_r+0x44>
 800cc48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc4a:	1ad2      	subs	r2, r2, r3
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc50:	6a21      	ldr	r1, [r4, #32]
 800cc52:	4628      	mov	r0, r5
 800cc54:	47b0      	blx	r6
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	d106      	bne.n	800cc6a <__sflush_r+0x62>
 800cc5c:	6829      	ldr	r1, [r5, #0]
 800cc5e:	291d      	cmp	r1, #29
 800cc60:	d82b      	bhi.n	800ccba <__sflush_r+0xb2>
 800cc62:	4a2a      	ldr	r2, [pc, #168]	@ (800cd0c <__sflush_r+0x104>)
 800cc64:	410a      	asrs	r2, r1
 800cc66:	07d6      	lsls	r6, r2, #31
 800cc68:	d427      	bmi.n	800ccba <__sflush_r+0xb2>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	6062      	str	r2, [r4, #4]
 800cc6e:	04d9      	lsls	r1, r3, #19
 800cc70:	6922      	ldr	r2, [r4, #16]
 800cc72:	6022      	str	r2, [r4, #0]
 800cc74:	d504      	bpl.n	800cc80 <__sflush_r+0x78>
 800cc76:	1c42      	adds	r2, r0, #1
 800cc78:	d101      	bne.n	800cc7e <__sflush_r+0x76>
 800cc7a:	682b      	ldr	r3, [r5, #0]
 800cc7c:	b903      	cbnz	r3, 800cc80 <__sflush_r+0x78>
 800cc7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc82:	602f      	str	r7, [r5, #0]
 800cc84:	b1b9      	cbz	r1, 800ccb6 <__sflush_r+0xae>
 800cc86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc8a:	4299      	cmp	r1, r3
 800cc8c:	d002      	beq.n	800cc94 <__sflush_r+0x8c>
 800cc8e:	4628      	mov	r0, r5
 800cc90:	f7ff fa8e 	bl	800c1b0 <_free_r>
 800cc94:	2300      	movs	r3, #0
 800cc96:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc98:	e00d      	b.n	800ccb6 <__sflush_r+0xae>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b0      	blx	r6
 800cca0:	4602      	mov	r2, r0
 800cca2:	1c50      	adds	r0, r2, #1
 800cca4:	d1c9      	bne.n	800cc3a <__sflush_r+0x32>
 800cca6:	682b      	ldr	r3, [r5, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0c6      	beq.n	800cc3a <__sflush_r+0x32>
 800ccac:	2b1d      	cmp	r3, #29
 800ccae:	d001      	beq.n	800ccb4 <__sflush_r+0xac>
 800ccb0:	2b16      	cmp	r3, #22
 800ccb2:	d11e      	bne.n	800ccf2 <__sflush_r+0xea>
 800ccb4:	602f      	str	r7, [r5, #0]
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	e022      	b.n	800cd00 <__sflush_r+0xf8>
 800ccba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccbe:	b21b      	sxth	r3, r3
 800ccc0:	e01b      	b.n	800ccfa <__sflush_r+0xf2>
 800ccc2:	690f      	ldr	r7, [r1, #16]
 800ccc4:	2f00      	cmp	r7, #0
 800ccc6:	d0f6      	beq.n	800ccb6 <__sflush_r+0xae>
 800ccc8:	0793      	lsls	r3, r2, #30
 800ccca:	680e      	ldr	r6, [r1, #0]
 800cccc:	bf08      	it	eq
 800ccce:	694b      	ldreq	r3, [r1, #20]
 800ccd0:	600f      	str	r7, [r1, #0]
 800ccd2:	bf18      	it	ne
 800ccd4:	2300      	movne	r3, #0
 800ccd6:	eba6 0807 	sub.w	r8, r6, r7
 800ccda:	608b      	str	r3, [r1, #8]
 800ccdc:	f1b8 0f00 	cmp.w	r8, #0
 800cce0:	dde9      	ble.n	800ccb6 <__sflush_r+0xae>
 800cce2:	6a21      	ldr	r1, [r4, #32]
 800cce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cce6:	4643      	mov	r3, r8
 800cce8:	463a      	mov	r2, r7
 800ccea:	4628      	mov	r0, r5
 800ccec:	47b0      	blx	r6
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	dc08      	bgt.n	800cd04 <__sflush_r+0xfc>
 800ccf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccfa:	81a3      	strh	r3, [r4, #12]
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd04:	4407      	add	r7, r0
 800cd06:	eba8 0800 	sub.w	r8, r8, r0
 800cd0a:	e7e7      	b.n	800ccdc <__sflush_r+0xd4>
 800cd0c:	dfbffffe 	.word	0xdfbffffe

0800cd10 <_fflush_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	690b      	ldr	r3, [r1, #16]
 800cd14:	4605      	mov	r5, r0
 800cd16:	460c      	mov	r4, r1
 800cd18:	b913      	cbnz	r3, 800cd20 <_fflush_r+0x10>
 800cd1a:	2500      	movs	r5, #0
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	bd38      	pop	{r3, r4, r5, pc}
 800cd20:	b118      	cbz	r0, 800cd2a <_fflush_r+0x1a>
 800cd22:	6a03      	ldr	r3, [r0, #32]
 800cd24:	b90b      	cbnz	r3, 800cd2a <_fflush_r+0x1a>
 800cd26:	f7fe fa0f 	bl	800b148 <__sinit>
 800cd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d0f3      	beq.n	800cd1a <_fflush_r+0xa>
 800cd32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd34:	07d0      	lsls	r0, r2, #31
 800cd36:	d404      	bmi.n	800cd42 <_fflush_r+0x32>
 800cd38:	0599      	lsls	r1, r3, #22
 800cd3a:	d402      	bmi.n	800cd42 <_fflush_r+0x32>
 800cd3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd3e:	f7fe fbb0 	bl	800b4a2 <__retarget_lock_acquire_recursive>
 800cd42:	4628      	mov	r0, r5
 800cd44:	4621      	mov	r1, r4
 800cd46:	f7ff ff5f 	bl	800cc08 <__sflush_r>
 800cd4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd4c:	07da      	lsls	r2, r3, #31
 800cd4e:	4605      	mov	r5, r0
 800cd50:	d4e4      	bmi.n	800cd1c <_fflush_r+0xc>
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	059b      	lsls	r3, r3, #22
 800cd56:	d4e1      	bmi.n	800cd1c <_fflush_r+0xc>
 800cd58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd5a:	f7fe fba3 	bl	800b4a4 <__retarget_lock_release_recursive>
 800cd5e:	e7dd      	b.n	800cd1c <_fflush_r+0xc>

0800cd60 <fiprintf>:
 800cd60:	b40e      	push	{r1, r2, r3}
 800cd62:	b503      	push	{r0, r1, lr}
 800cd64:	4601      	mov	r1, r0
 800cd66:	ab03      	add	r3, sp, #12
 800cd68:	4805      	ldr	r0, [pc, #20]	@ (800cd80 <fiprintf+0x20>)
 800cd6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd6e:	6800      	ldr	r0, [r0, #0]
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	f7ff fe31 	bl	800c9d8 <_vfiprintf_r>
 800cd76:	b002      	add	sp, #8
 800cd78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd7c:	b003      	add	sp, #12
 800cd7e:	4770      	bx	lr
 800cd80:	20000198 	.word	0x20000198

0800cd84 <__swhatbuf_r>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	460c      	mov	r4, r1
 800cd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	b096      	sub	sp, #88	@ 0x58
 800cd90:	4615      	mov	r5, r2
 800cd92:	461e      	mov	r6, r3
 800cd94:	da0d      	bge.n	800cdb2 <__swhatbuf_r+0x2e>
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd9c:	f04f 0100 	mov.w	r1, #0
 800cda0:	bf14      	ite	ne
 800cda2:	2340      	movne	r3, #64	@ 0x40
 800cda4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cda8:	2000      	movs	r0, #0
 800cdaa:	6031      	str	r1, [r6, #0]
 800cdac:	602b      	str	r3, [r5, #0]
 800cdae:	b016      	add	sp, #88	@ 0x58
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	466a      	mov	r2, sp
 800cdb4:	f000 f848 	bl	800ce48 <_fstat_r>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	dbec      	blt.n	800cd96 <__swhatbuf_r+0x12>
 800cdbc:	9901      	ldr	r1, [sp, #4]
 800cdbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdc6:	4259      	negs	r1, r3
 800cdc8:	4159      	adcs	r1, r3
 800cdca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdce:	e7eb      	b.n	800cda8 <__swhatbuf_r+0x24>

0800cdd0 <__smakebuf_r>:
 800cdd0:	898b      	ldrh	r3, [r1, #12]
 800cdd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdd4:	079d      	lsls	r5, r3, #30
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	460c      	mov	r4, r1
 800cdda:	d507      	bpl.n	800cdec <__smakebuf_r+0x1c>
 800cddc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	6123      	str	r3, [r4, #16]
 800cde4:	2301      	movs	r3, #1
 800cde6:	6163      	str	r3, [r4, #20]
 800cde8:	b003      	add	sp, #12
 800cdea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdec:	ab01      	add	r3, sp, #4
 800cdee:	466a      	mov	r2, sp
 800cdf0:	f7ff ffc8 	bl	800cd84 <__swhatbuf_r>
 800cdf4:	9f00      	ldr	r7, [sp, #0]
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	4639      	mov	r1, r7
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f7fd fc34 	bl	800a668 <_malloc_r>
 800ce00:	b948      	cbnz	r0, 800ce16 <__smakebuf_r+0x46>
 800ce02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce06:	059a      	lsls	r2, r3, #22
 800ce08:	d4ee      	bmi.n	800cde8 <__smakebuf_r+0x18>
 800ce0a:	f023 0303 	bic.w	r3, r3, #3
 800ce0e:	f043 0302 	orr.w	r3, r3, #2
 800ce12:	81a3      	strh	r3, [r4, #12]
 800ce14:	e7e2      	b.n	800cddc <__smakebuf_r+0xc>
 800ce16:	89a3      	ldrh	r3, [r4, #12]
 800ce18:	6020      	str	r0, [r4, #0]
 800ce1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce1e:	81a3      	strh	r3, [r4, #12]
 800ce20:	9b01      	ldr	r3, [sp, #4]
 800ce22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce26:	b15b      	cbz	r3, 800ce40 <__smakebuf_r+0x70>
 800ce28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f000 f81d 	bl	800ce6c <_isatty_r>
 800ce32:	b128      	cbz	r0, 800ce40 <__smakebuf_r+0x70>
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	f023 0303 	bic.w	r3, r3, #3
 800ce3a:	f043 0301 	orr.w	r3, r3, #1
 800ce3e:	81a3      	strh	r3, [r4, #12]
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	431d      	orrs	r5, r3
 800ce44:	81a5      	strh	r5, [r4, #12]
 800ce46:	e7cf      	b.n	800cde8 <__smakebuf_r+0x18>

0800ce48 <_fstat_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4d07      	ldr	r5, [pc, #28]	@ (800ce68 <_fstat_r+0x20>)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4604      	mov	r4, r0
 800ce50:	4608      	mov	r0, r1
 800ce52:	4611      	mov	r1, r2
 800ce54:	602b      	str	r3, [r5, #0]
 800ce56:	f7fa feee 	bl	8007c36 <_fstat>
 800ce5a:	1c43      	adds	r3, r0, #1
 800ce5c:	d102      	bne.n	800ce64 <_fstat_r+0x1c>
 800ce5e:	682b      	ldr	r3, [r5, #0]
 800ce60:	b103      	cbz	r3, 800ce64 <_fstat_r+0x1c>
 800ce62:	6023      	str	r3, [r4, #0]
 800ce64:	bd38      	pop	{r3, r4, r5, pc}
 800ce66:	bf00      	nop
 800ce68:	2000055c 	.word	0x2000055c

0800ce6c <_isatty_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4d06      	ldr	r5, [pc, #24]	@ (800ce88 <_isatty_r+0x1c>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4604      	mov	r4, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	602b      	str	r3, [r5, #0]
 800ce78:	f7fa feed 	bl	8007c56 <_isatty>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d102      	bne.n	800ce86 <_isatty_r+0x1a>
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	b103      	cbz	r3, 800ce86 <_isatty_r+0x1a>
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	2000055c 	.word	0x2000055c

0800ce8c <abort>:
 800ce8c:	b508      	push	{r3, lr}
 800ce8e:	2006      	movs	r0, #6
 800ce90:	f000 f840 	bl	800cf14 <raise>
 800ce94:	2001      	movs	r0, #1
 800ce96:	f7fa fe9a 	bl	8007bce <_exit>

0800ce9a <_calloc_r>:
 800ce9a:	b570      	push	{r4, r5, r6, lr}
 800ce9c:	fba1 5402 	umull	r5, r4, r1, r2
 800cea0:	b93c      	cbnz	r4, 800ceb2 <_calloc_r+0x18>
 800cea2:	4629      	mov	r1, r5
 800cea4:	f7fd fbe0 	bl	800a668 <_malloc_r>
 800cea8:	4606      	mov	r6, r0
 800ceaa:	b928      	cbnz	r0, 800ceb8 <_calloc_r+0x1e>
 800ceac:	2600      	movs	r6, #0
 800ceae:	4630      	mov	r0, r6
 800ceb0:	bd70      	pop	{r4, r5, r6, pc}
 800ceb2:	220c      	movs	r2, #12
 800ceb4:	6002      	str	r2, [r0, #0]
 800ceb6:	e7f9      	b.n	800ceac <_calloc_r+0x12>
 800ceb8:	462a      	mov	r2, r5
 800ceba:	4621      	mov	r1, r4
 800cebc:	f7fe fa64 	bl	800b388 <memset>
 800cec0:	e7f5      	b.n	800ceae <_calloc_r+0x14>

0800cec2 <_raise_r>:
 800cec2:	291f      	cmp	r1, #31
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4605      	mov	r5, r0
 800cec8:	460c      	mov	r4, r1
 800ceca:	d904      	bls.n	800ced6 <_raise_r+0x14>
 800cecc:	2316      	movs	r3, #22
 800cece:	6003      	str	r3, [r0, #0]
 800ced0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ced4:	bd38      	pop	{r3, r4, r5, pc}
 800ced6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ced8:	b112      	cbz	r2, 800cee0 <_raise_r+0x1e>
 800ceda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cede:	b94b      	cbnz	r3, 800cef4 <_raise_r+0x32>
 800cee0:	4628      	mov	r0, r5
 800cee2:	f000 f831 	bl	800cf48 <_getpid_r>
 800cee6:	4622      	mov	r2, r4
 800cee8:	4601      	mov	r1, r0
 800ceea:	4628      	mov	r0, r5
 800ceec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cef0:	f000 b818 	b.w	800cf24 <_kill_r>
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d00a      	beq.n	800cf0e <_raise_r+0x4c>
 800cef8:	1c59      	adds	r1, r3, #1
 800cefa:	d103      	bne.n	800cf04 <_raise_r+0x42>
 800cefc:	2316      	movs	r3, #22
 800cefe:	6003      	str	r3, [r0, #0]
 800cf00:	2001      	movs	r0, #1
 800cf02:	e7e7      	b.n	800ced4 <_raise_r+0x12>
 800cf04:	2100      	movs	r1, #0
 800cf06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	4798      	blx	r3
 800cf0e:	2000      	movs	r0, #0
 800cf10:	e7e0      	b.n	800ced4 <_raise_r+0x12>
	...

0800cf14 <raise>:
 800cf14:	4b02      	ldr	r3, [pc, #8]	@ (800cf20 <raise+0xc>)
 800cf16:	4601      	mov	r1, r0
 800cf18:	6818      	ldr	r0, [r3, #0]
 800cf1a:	f7ff bfd2 	b.w	800cec2 <_raise_r>
 800cf1e:	bf00      	nop
 800cf20:	20000198 	.word	0x20000198

0800cf24 <_kill_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4d07      	ldr	r5, [pc, #28]	@ (800cf44 <_kill_r+0x20>)
 800cf28:	2300      	movs	r3, #0
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	4611      	mov	r1, r2
 800cf30:	602b      	str	r3, [r5, #0]
 800cf32:	f7fa fe3c 	bl	8007bae <_kill>
 800cf36:	1c43      	adds	r3, r0, #1
 800cf38:	d102      	bne.n	800cf40 <_kill_r+0x1c>
 800cf3a:	682b      	ldr	r3, [r5, #0]
 800cf3c:	b103      	cbz	r3, 800cf40 <_kill_r+0x1c>
 800cf3e:	6023      	str	r3, [r4, #0]
 800cf40:	bd38      	pop	{r3, r4, r5, pc}
 800cf42:	bf00      	nop
 800cf44:	2000055c 	.word	0x2000055c

0800cf48 <_getpid_r>:
 800cf48:	f7fa be29 	b.w	8007b9e <_getpid>

0800cf4c <asin>:
 800cf4c:	b538      	push	{r3, r4, r5, lr}
 800cf4e:	ed2d 8b02 	vpush	{d8}
 800cf52:	ec55 4b10 	vmov	r4, r5, d0
 800cf56:	f000 fe3f 	bl	800dbd8 <__ieee754_asin>
 800cf5a:	4622      	mov	r2, r4
 800cf5c:	462b      	mov	r3, r5
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4629      	mov	r1, r5
 800cf62:	eeb0 8a40 	vmov.f32	s16, s0
 800cf66:	eef0 8a60 	vmov.f32	s17, s1
 800cf6a:	f7f3 fde7 	bl	8000b3c <__aeabi_dcmpun>
 800cf6e:	b9a8      	cbnz	r0, 800cf9c <asin+0x50>
 800cf70:	ec45 4b10 	vmov	d0, r4, r5
 800cf74:	f000 f910 	bl	800d198 <fabs>
 800cf78:	4b0c      	ldr	r3, [pc, #48]	@ (800cfac <asin+0x60>)
 800cf7a:	ec51 0b10 	vmov	r0, r1, d0
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f7f3 fdd2 	bl	8000b28 <__aeabi_dcmpgt>
 800cf84:	b150      	cbz	r0, 800cf9c <asin+0x50>
 800cf86:	f7fe fa61 	bl	800b44c <__errno>
 800cf8a:	ecbd 8b02 	vpop	{d8}
 800cf8e:	2321      	movs	r3, #33	@ 0x21
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf96:	4806      	ldr	r0, [pc, #24]	@ (800cfb0 <asin+0x64>)
 800cf98:	f7fe ba96 	b.w	800b4c8 <nan>
 800cf9c:	eeb0 0a48 	vmov.f32	s0, s16
 800cfa0:	eef0 0a68 	vmov.f32	s1, s17
 800cfa4:	ecbd 8b02 	vpop	{d8}
 800cfa8:	bd38      	pop	{r3, r4, r5, pc}
 800cfaa:	bf00      	nop
 800cfac:	3ff00000 	.word	0x3ff00000
 800cfb0:	08010225 	.word	0x08010225

0800cfb4 <atan2>:
 800cfb4:	f001 b814 	b.w	800dfe0 <__ieee754_atan2>

0800cfb8 <pow>:
 800cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfba:	ed2d 8b02 	vpush	{d8}
 800cfbe:	eeb0 8a40 	vmov.f32	s16, s0
 800cfc2:	eef0 8a60 	vmov.f32	s17, s1
 800cfc6:	ec55 4b11 	vmov	r4, r5, d1
 800cfca:	f001 f8d1 	bl	800e170 <__ieee754_pow>
 800cfce:	4622      	mov	r2, r4
 800cfd0:	462b      	mov	r3, r5
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	ec57 6b10 	vmov	r6, r7, d0
 800cfda:	f7f3 fdaf 	bl	8000b3c <__aeabi_dcmpun>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d13b      	bne.n	800d05a <pow+0xa2>
 800cfe2:	ec51 0b18 	vmov	r0, r1, d8
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f7f3 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 800cfee:	b1b8      	cbz	r0, 800d020 <pow+0x68>
 800cff0:	2200      	movs	r2, #0
 800cff2:	2300      	movs	r3, #0
 800cff4:	4620      	mov	r0, r4
 800cff6:	4629      	mov	r1, r5
 800cff8:	f7f3 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d146      	bne.n	800d08e <pow+0xd6>
 800d000:	ec45 4b10 	vmov	d0, r4, r5
 800d004:	f000 f976 	bl	800d2f4 <finite>
 800d008:	b338      	cbz	r0, 800d05a <pow+0xa2>
 800d00a:	2200      	movs	r2, #0
 800d00c:	2300      	movs	r3, #0
 800d00e:	4620      	mov	r0, r4
 800d010:	4629      	mov	r1, r5
 800d012:	f7f3 fd6b 	bl	8000aec <__aeabi_dcmplt>
 800d016:	b300      	cbz	r0, 800d05a <pow+0xa2>
 800d018:	f7fe fa18 	bl	800b44c <__errno>
 800d01c:	2322      	movs	r3, #34	@ 0x22
 800d01e:	e01b      	b.n	800d058 <pow+0xa0>
 800d020:	ec47 6b10 	vmov	d0, r6, r7
 800d024:	f000 f966 	bl	800d2f4 <finite>
 800d028:	b9e0      	cbnz	r0, 800d064 <pow+0xac>
 800d02a:	eeb0 0a48 	vmov.f32	s0, s16
 800d02e:	eef0 0a68 	vmov.f32	s1, s17
 800d032:	f000 f95f 	bl	800d2f4 <finite>
 800d036:	b1a8      	cbz	r0, 800d064 <pow+0xac>
 800d038:	ec45 4b10 	vmov	d0, r4, r5
 800d03c:	f000 f95a 	bl	800d2f4 <finite>
 800d040:	b180      	cbz	r0, 800d064 <pow+0xac>
 800d042:	4632      	mov	r2, r6
 800d044:	463b      	mov	r3, r7
 800d046:	4630      	mov	r0, r6
 800d048:	4639      	mov	r1, r7
 800d04a:	f7f3 fd77 	bl	8000b3c <__aeabi_dcmpun>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d0e2      	beq.n	800d018 <pow+0x60>
 800d052:	f7fe f9fb 	bl	800b44c <__errno>
 800d056:	2321      	movs	r3, #33	@ 0x21
 800d058:	6003      	str	r3, [r0, #0]
 800d05a:	ecbd 8b02 	vpop	{d8}
 800d05e:	ec47 6b10 	vmov	d0, r6, r7
 800d062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d064:	2200      	movs	r2, #0
 800d066:	2300      	movs	r3, #0
 800d068:	4630      	mov	r0, r6
 800d06a:	4639      	mov	r1, r7
 800d06c:	f7f3 fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 800d070:	2800      	cmp	r0, #0
 800d072:	d0f2      	beq.n	800d05a <pow+0xa2>
 800d074:	eeb0 0a48 	vmov.f32	s0, s16
 800d078:	eef0 0a68 	vmov.f32	s1, s17
 800d07c:	f000 f93a 	bl	800d2f4 <finite>
 800d080:	2800      	cmp	r0, #0
 800d082:	d0ea      	beq.n	800d05a <pow+0xa2>
 800d084:	ec45 4b10 	vmov	d0, r4, r5
 800d088:	f000 f934 	bl	800d2f4 <finite>
 800d08c:	e7c3      	b.n	800d016 <pow+0x5e>
 800d08e:	4f01      	ldr	r7, [pc, #4]	@ (800d094 <pow+0xdc>)
 800d090:	2600      	movs	r6, #0
 800d092:	e7e2      	b.n	800d05a <pow+0xa2>
 800d094:	3ff00000 	.word	0x3ff00000

0800d098 <sqrt>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	ed2d 8b02 	vpush	{d8}
 800d09e:	ec55 4b10 	vmov	r4, r5, d0
 800d0a2:	f000 f933 	bl	800d30c <__ieee754_sqrt>
 800d0a6:	4622      	mov	r2, r4
 800d0a8:	462b      	mov	r3, r5
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	eeb0 8a40 	vmov.f32	s16, s0
 800d0b2:	eef0 8a60 	vmov.f32	s17, s1
 800d0b6:	f7f3 fd41 	bl	8000b3c <__aeabi_dcmpun>
 800d0ba:	b990      	cbnz	r0, 800d0e2 <sqrt+0x4a>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2300      	movs	r3, #0
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	f7f3 fd12 	bl	8000aec <__aeabi_dcmplt>
 800d0c8:	b158      	cbz	r0, 800d0e2 <sqrt+0x4a>
 800d0ca:	f7fe f9bf 	bl	800b44c <__errno>
 800d0ce:	2321      	movs	r3, #33	@ 0x21
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	4619      	mov	r1, r3
 800d0da:	f7f3 fbbf 	bl	800085c <__aeabi_ddiv>
 800d0de:	ec41 0b18 	vmov	d8, r0, r1
 800d0e2:	eeb0 0a48 	vmov.f32	s0, s16
 800d0e6:	eef0 0a68 	vmov.f32	s1, s17
 800d0ea:	ecbd 8b02 	vpop	{d8}
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}

0800d0f0 <cos>:
 800d0f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0f2:	ec53 2b10 	vmov	r2, r3, d0
 800d0f6:	4826      	ldr	r0, [pc, #152]	@ (800d190 <cos+0xa0>)
 800d0f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d0fc:	4281      	cmp	r1, r0
 800d0fe:	d806      	bhi.n	800d10e <cos+0x1e>
 800d100:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d188 <cos+0x98>
 800d104:	b005      	add	sp, #20
 800d106:	f85d eb04 	ldr.w	lr, [sp], #4
 800d10a:	f000 b9dd 	b.w	800d4c8 <__kernel_cos>
 800d10e:	4821      	ldr	r0, [pc, #132]	@ (800d194 <cos+0xa4>)
 800d110:	4281      	cmp	r1, r0
 800d112:	d908      	bls.n	800d126 <cos+0x36>
 800d114:	4610      	mov	r0, r2
 800d116:	4619      	mov	r1, r3
 800d118:	f7f3 f8be 	bl	8000298 <__aeabi_dsub>
 800d11c:	ec41 0b10 	vmov	d0, r0, r1
 800d120:	b005      	add	sp, #20
 800d122:	f85d fb04 	ldr.w	pc, [sp], #4
 800d126:	4668      	mov	r0, sp
 800d128:	f001 fd66 	bl	800ebf8 <__ieee754_rem_pio2>
 800d12c:	f000 0003 	and.w	r0, r0, #3
 800d130:	2801      	cmp	r0, #1
 800d132:	d00b      	beq.n	800d14c <cos+0x5c>
 800d134:	2802      	cmp	r0, #2
 800d136:	d015      	beq.n	800d164 <cos+0x74>
 800d138:	b9d8      	cbnz	r0, 800d172 <cos+0x82>
 800d13a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d13e:	ed9d 0b00 	vldr	d0, [sp]
 800d142:	f000 f9c1 	bl	800d4c8 <__kernel_cos>
 800d146:	ec51 0b10 	vmov	r0, r1, d0
 800d14a:	e7e7      	b.n	800d11c <cos+0x2c>
 800d14c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d150:	ed9d 0b00 	vldr	d0, [sp]
 800d154:	f000 fa80 	bl	800d658 <__kernel_sin>
 800d158:	ec53 2b10 	vmov	r2, r3, d0
 800d15c:	4610      	mov	r0, r2
 800d15e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d162:	e7db      	b.n	800d11c <cos+0x2c>
 800d164:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d168:	ed9d 0b00 	vldr	d0, [sp]
 800d16c:	f000 f9ac 	bl	800d4c8 <__kernel_cos>
 800d170:	e7f2      	b.n	800d158 <cos+0x68>
 800d172:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d176:	ed9d 0b00 	vldr	d0, [sp]
 800d17a:	2001      	movs	r0, #1
 800d17c:	f000 fa6c 	bl	800d658 <__kernel_sin>
 800d180:	e7e1      	b.n	800d146 <cos+0x56>
 800d182:	bf00      	nop
 800d184:	f3af 8000 	nop.w
	...
 800d190:	3fe921fb 	.word	0x3fe921fb
 800d194:	7fefffff 	.word	0x7fefffff

0800d198 <fabs>:
 800d198:	ec51 0b10 	vmov	r0, r1, d0
 800d19c:	4602      	mov	r2, r0
 800d19e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d1a2:	ec43 2b10 	vmov	d0, r2, r3
 800d1a6:	4770      	bx	lr

0800d1a8 <sin>:
 800d1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1aa:	ec53 2b10 	vmov	r2, r3, d0
 800d1ae:	4826      	ldr	r0, [pc, #152]	@ (800d248 <sin+0xa0>)
 800d1b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d1b4:	4281      	cmp	r1, r0
 800d1b6:	d807      	bhi.n	800d1c8 <sin+0x20>
 800d1b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d240 <sin+0x98>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	b005      	add	sp, #20
 800d1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1c4:	f000 ba48 	b.w	800d658 <__kernel_sin>
 800d1c8:	4820      	ldr	r0, [pc, #128]	@ (800d24c <sin+0xa4>)
 800d1ca:	4281      	cmp	r1, r0
 800d1cc:	d908      	bls.n	800d1e0 <sin+0x38>
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	f7f3 f861 	bl	8000298 <__aeabi_dsub>
 800d1d6:	ec41 0b10 	vmov	d0, r0, r1
 800d1da:	b005      	add	sp, #20
 800d1dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1e0:	4668      	mov	r0, sp
 800d1e2:	f001 fd09 	bl	800ebf8 <__ieee754_rem_pio2>
 800d1e6:	f000 0003 	and.w	r0, r0, #3
 800d1ea:	2801      	cmp	r0, #1
 800d1ec:	d00c      	beq.n	800d208 <sin+0x60>
 800d1ee:	2802      	cmp	r0, #2
 800d1f0:	d011      	beq.n	800d216 <sin+0x6e>
 800d1f2:	b9e8      	cbnz	r0, 800d230 <sin+0x88>
 800d1f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1f8:	ed9d 0b00 	vldr	d0, [sp]
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	f000 fa2b 	bl	800d658 <__kernel_sin>
 800d202:	ec51 0b10 	vmov	r0, r1, d0
 800d206:	e7e6      	b.n	800d1d6 <sin+0x2e>
 800d208:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d20c:	ed9d 0b00 	vldr	d0, [sp]
 800d210:	f000 f95a 	bl	800d4c8 <__kernel_cos>
 800d214:	e7f5      	b.n	800d202 <sin+0x5a>
 800d216:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d21a:	ed9d 0b00 	vldr	d0, [sp]
 800d21e:	2001      	movs	r0, #1
 800d220:	f000 fa1a 	bl	800d658 <__kernel_sin>
 800d224:	ec53 2b10 	vmov	r2, r3, d0
 800d228:	4610      	mov	r0, r2
 800d22a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d22e:	e7d2      	b.n	800d1d6 <sin+0x2e>
 800d230:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d234:	ed9d 0b00 	vldr	d0, [sp]
 800d238:	f000 f946 	bl	800d4c8 <__kernel_cos>
 800d23c:	e7f2      	b.n	800d224 <sin+0x7c>
 800d23e:	bf00      	nop
	...
 800d248:	3fe921fb 	.word	0x3fe921fb
 800d24c:	7fefffff 	.word	0x7fefffff

0800d250 <tan>:
 800d250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d252:	ec53 2b10 	vmov	r2, r3, d0
 800d256:	4816      	ldr	r0, [pc, #88]	@ (800d2b0 <tan+0x60>)
 800d258:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d25c:	4281      	cmp	r1, r0
 800d25e:	d807      	bhi.n	800d270 <tan+0x20>
 800d260:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 800d2a8 <tan+0x58>
 800d264:	2001      	movs	r0, #1
 800d266:	b005      	add	sp, #20
 800d268:	f85d eb04 	ldr.w	lr, [sp], #4
 800d26c:	f000 bab0 	b.w	800d7d0 <__kernel_tan>
 800d270:	4810      	ldr	r0, [pc, #64]	@ (800d2b4 <tan+0x64>)
 800d272:	4281      	cmp	r1, r0
 800d274:	d908      	bls.n	800d288 <tan+0x38>
 800d276:	4610      	mov	r0, r2
 800d278:	4619      	mov	r1, r3
 800d27a:	f7f3 f80d 	bl	8000298 <__aeabi_dsub>
 800d27e:	ec41 0b10 	vmov	d0, r0, r1
 800d282:	b005      	add	sp, #20
 800d284:	f85d fb04 	ldr.w	pc, [sp], #4
 800d288:	4668      	mov	r0, sp
 800d28a:	f001 fcb5 	bl	800ebf8 <__ieee754_rem_pio2>
 800d28e:	0040      	lsls	r0, r0, #1
 800d290:	f000 0002 	and.w	r0, r0, #2
 800d294:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d298:	ed9d 0b00 	vldr	d0, [sp]
 800d29c:	f1c0 0001 	rsb	r0, r0, #1
 800d2a0:	f000 fa96 	bl	800d7d0 <__kernel_tan>
 800d2a4:	e7ed      	b.n	800d282 <tan+0x32>
 800d2a6:	bf00      	nop
	...
 800d2b0:	3fe921fb 	.word	0x3fe921fb
 800d2b4:	7fefffff 	.word	0x7fefffff

0800d2b8 <sqrtf>:
 800d2b8:	b508      	push	{r3, lr}
 800d2ba:	ed2d 8b02 	vpush	{d8}
 800d2be:	eeb0 8a40 	vmov.f32	s16, s0
 800d2c2:	f000 f8fd 	bl	800d4c0 <__ieee754_sqrtf>
 800d2c6:	eeb4 8a48 	vcmp.f32	s16, s16
 800d2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ce:	d60c      	bvs.n	800d2ea <sqrtf+0x32>
 800d2d0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d2f0 <sqrtf+0x38>
 800d2d4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	d505      	bpl.n	800d2ea <sqrtf+0x32>
 800d2de:	f7fe f8b5 	bl	800b44c <__errno>
 800d2e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d2e6:	2321      	movs	r3, #33	@ 0x21
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	ecbd 8b02 	vpop	{d8}
 800d2ee:	bd08      	pop	{r3, pc}
 800d2f0:	00000000 	.word	0x00000000

0800d2f4 <finite>:
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	ed8d 0b00 	vstr	d0, [sp]
 800d2fa:	9801      	ldr	r0, [sp, #4]
 800d2fc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d300:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d304:	0fc0      	lsrs	r0, r0, #31
 800d306:	b002      	add	sp, #8
 800d308:	4770      	bx	lr
	...

0800d30c <__ieee754_sqrt>:
 800d30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d310:	4a68      	ldr	r2, [pc, #416]	@ (800d4b4 <__ieee754_sqrt+0x1a8>)
 800d312:	ec55 4b10 	vmov	r4, r5, d0
 800d316:	43aa      	bics	r2, r5
 800d318:	462b      	mov	r3, r5
 800d31a:	4621      	mov	r1, r4
 800d31c:	d110      	bne.n	800d340 <__ieee754_sqrt+0x34>
 800d31e:	4622      	mov	r2, r4
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f3 f970 	bl	8000608 <__aeabi_dmul>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	4620      	mov	r0, r4
 800d32e:	4629      	mov	r1, r5
 800d330:	f7f2 ffb4 	bl	800029c <__adddf3>
 800d334:	4604      	mov	r4, r0
 800d336:	460d      	mov	r5, r1
 800d338:	ec45 4b10 	vmov	d0, r4, r5
 800d33c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d340:	2d00      	cmp	r5, #0
 800d342:	dc0e      	bgt.n	800d362 <__ieee754_sqrt+0x56>
 800d344:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d348:	4322      	orrs	r2, r4
 800d34a:	d0f5      	beq.n	800d338 <__ieee754_sqrt+0x2c>
 800d34c:	b19d      	cbz	r5, 800d376 <__ieee754_sqrt+0x6a>
 800d34e:	4622      	mov	r2, r4
 800d350:	4620      	mov	r0, r4
 800d352:	4629      	mov	r1, r5
 800d354:	f7f2 ffa0 	bl	8000298 <__aeabi_dsub>
 800d358:	4602      	mov	r2, r0
 800d35a:	460b      	mov	r3, r1
 800d35c:	f7f3 fa7e 	bl	800085c <__aeabi_ddiv>
 800d360:	e7e8      	b.n	800d334 <__ieee754_sqrt+0x28>
 800d362:	152a      	asrs	r2, r5, #20
 800d364:	d115      	bne.n	800d392 <__ieee754_sqrt+0x86>
 800d366:	2000      	movs	r0, #0
 800d368:	e009      	b.n	800d37e <__ieee754_sqrt+0x72>
 800d36a:	0acb      	lsrs	r3, r1, #11
 800d36c:	3a15      	subs	r2, #21
 800d36e:	0549      	lsls	r1, r1, #21
 800d370:	2b00      	cmp	r3, #0
 800d372:	d0fa      	beq.n	800d36a <__ieee754_sqrt+0x5e>
 800d374:	e7f7      	b.n	800d366 <__ieee754_sqrt+0x5a>
 800d376:	462a      	mov	r2, r5
 800d378:	e7fa      	b.n	800d370 <__ieee754_sqrt+0x64>
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	3001      	adds	r0, #1
 800d37e:	02dc      	lsls	r4, r3, #11
 800d380:	d5fb      	bpl.n	800d37a <__ieee754_sqrt+0x6e>
 800d382:	1e44      	subs	r4, r0, #1
 800d384:	1b12      	subs	r2, r2, r4
 800d386:	f1c0 0420 	rsb	r4, r0, #32
 800d38a:	fa21 f404 	lsr.w	r4, r1, r4
 800d38e:	4323      	orrs	r3, r4
 800d390:	4081      	lsls	r1, r0
 800d392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d396:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d39a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d39e:	07d2      	lsls	r2, r2, #31
 800d3a0:	bf5c      	itt	pl
 800d3a2:	005b      	lslpl	r3, r3, #1
 800d3a4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d3a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3ac:	bf58      	it	pl
 800d3ae:	0049      	lslpl	r1, r1, #1
 800d3b0:	2600      	movs	r6, #0
 800d3b2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d3b6:	106d      	asrs	r5, r5, #1
 800d3b8:	0049      	lsls	r1, r1, #1
 800d3ba:	2016      	movs	r0, #22
 800d3bc:	4632      	mov	r2, r6
 800d3be:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d3c2:	1917      	adds	r7, r2, r4
 800d3c4:	429f      	cmp	r7, r3
 800d3c6:	bfde      	ittt	le
 800d3c8:	193a      	addle	r2, r7, r4
 800d3ca:	1bdb      	suble	r3, r3, r7
 800d3cc:	1936      	addle	r6, r6, r4
 800d3ce:	0fcf      	lsrs	r7, r1, #31
 800d3d0:	3801      	subs	r0, #1
 800d3d2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d3d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d3da:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d3de:	d1f0      	bne.n	800d3c2 <__ieee754_sqrt+0xb6>
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	2720      	movs	r7, #32
 800d3e4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	eb00 0e0c 	add.w	lr, r0, ip
 800d3ee:	db02      	blt.n	800d3f6 <__ieee754_sqrt+0xea>
 800d3f0:	d113      	bne.n	800d41a <__ieee754_sqrt+0x10e>
 800d3f2:	458e      	cmp	lr, r1
 800d3f4:	d811      	bhi.n	800d41a <__ieee754_sqrt+0x10e>
 800d3f6:	f1be 0f00 	cmp.w	lr, #0
 800d3fa:	eb0e 000c 	add.w	r0, lr, ip
 800d3fe:	da42      	bge.n	800d486 <__ieee754_sqrt+0x17a>
 800d400:	2800      	cmp	r0, #0
 800d402:	db40      	blt.n	800d486 <__ieee754_sqrt+0x17a>
 800d404:	f102 0801 	add.w	r8, r2, #1
 800d408:	1a9b      	subs	r3, r3, r2
 800d40a:	458e      	cmp	lr, r1
 800d40c:	bf88      	it	hi
 800d40e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800d412:	eba1 010e 	sub.w	r1, r1, lr
 800d416:	4464      	add	r4, ip
 800d418:	4642      	mov	r2, r8
 800d41a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d41e:	3f01      	subs	r7, #1
 800d420:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d424:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d428:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d42c:	d1dc      	bne.n	800d3e8 <__ieee754_sqrt+0xdc>
 800d42e:	4319      	orrs	r1, r3
 800d430:	d01b      	beq.n	800d46a <__ieee754_sqrt+0x15e>
 800d432:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d4b8 <__ieee754_sqrt+0x1ac>
 800d436:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d4bc <__ieee754_sqrt+0x1b0>
 800d43a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d43e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d442:	f7f2 ff29 	bl	8000298 <__aeabi_dsub>
 800d446:	e9da 8900 	ldrd	r8, r9, [sl]
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4640      	mov	r0, r8
 800d450:	4649      	mov	r1, r9
 800d452:	f7f3 fb55 	bl	8000b00 <__aeabi_dcmple>
 800d456:	b140      	cbz	r0, 800d46a <__ieee754_sqrt+0x15e>
 800d458:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800d45c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d460:	e9db 2300 	ldrd	r2, r3, [fp]
 800d464:	d111      	bne.n	800d48a <__ieee754_sqrt+0x17e>
 800d466:	3601      	adds	r6, #1
 800d468:	463c      	mov	r4, r7
 800d46a:	1072      	asrs	r2, r6, #1
 800d46c:	0863      	lsrs	r3, r4, #1
 800d46e:	07f1      	lsls	r1, r6, #31
 800d470:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d474:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d478:	bf48      	it	mi
 800d47a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d47e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d482:	4618      	mov	r0, r3
 800d484:	e756      	b.n	800d334 <__ieee754_sqrt+0x28>
 800d486:	4690      	mov	r8, r2
 800d488:	e7be      	b.n	800d408 <__ieee754_sqrt+0xfc>
 800d48a:	f7f2 ff07 	bl	800029c <__adddf3>
 800d48e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	4640      	mov	r0, r8
 800d498:	4649      	mov	r1, r9
 800d49a:	f7f3 fb27 	bl	8000aec <__aeabi_dcmplt>
 800d49e:	b120      	cbz	r0, 800d4aa <__ieee754_sqrt+0x19e>
 800d4a0:	1ca0      	adds	r0, r4, #2
 800d4a2:	bf08      	it	eq
 800d4a4:	3601      	addeq	r6, #1
 800d4a6:	3402      	adds	r4, #2
 800d4a8:	e7df      	b.n	800d46a <__ieee754_sqrt+0x15e>
 800d4aa:	1c63      	adds	r3, r4, #1
 800d4ac:	f023 0401 	bic.w	r4, r3, #1
 800d4b0:	e7db      	b.n	800d46a <__ieee754_sqrt+0x15e>
 800d4b2:	bf00      	nop
 800d4b4:	7ff00000 	.word	0x7ff00000
 800d4b8:	200001f0 	.word	0x200001f0
 800d4bc:	200001e8 	.word	0x200001e8

0800d4c0 <__ieee754_sqrtf>:
 800d4c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d4c4:	4770      	bx	lr
	...

0800d4c8 <__kernel_cos>:
 800d4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	ec57 6b10 	vmov	r6, r7, d0
 800d4d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d4d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d4d8:	ed8d 1b00 	vstr	d1, [sp]
 800d4dc:	d206      	bcs.n	800d4ec <__kernel_cos+0x24>
 800d4de:	4630      	mov	r0, r6
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	f7f3 fb41 	bl	8000b68 <__aeabi_d2iz>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f000 8088 	beq.w	800d5fc <__kernel_cos+0x134>
 800d4ec:	4632      	mov	r2, r6
 800d4ee:	463b      	mov	r3, r7
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	4639      	mov	r1, r7
 800d4f4:	f7f3 f888 	bl	8000608 <__aeabi_dmul>
 800d4f8:	4b51      	ldr	r3, [pc, #324]	@ (800d640 <__kernel_cos+0x178>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	460d      	mov	r5, r1
 800d500:	f7f3 f882 	bl	8000608 <__aeabi_dmul>
 800d504:	a340      	add	r3, pc, #256	@ (adr r3, 800d608 <__kernel_cos+0x140>)
 800d506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50a:	4682      	mov	sl, r0
 800d50c:	468b      	mov	fp, r1
 800d50e:	4620      	mov	r0, r4
 800d510:	4629      	mov	r1, r5
 800d512:	f7f3 f879 	bl	8000608 <__aeabi_dmul>
 800d516:	a33e      	add	r3, pc, #248	@ (adr r3, 800d610 <__kernel_cos+0x148>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f2 febe 	bl	800029c <__adddf3>
 800d520:	4622      	mov	r2, r4
 800d522:	462b      	mov	r3, r5
 800d524:	f7f3 f870 	bl	8000608 <__aeabi_dmul>
 800d528:	a33b      	add	r3, pc, #236	@ (adr r3, 800d618 <__kernel_cos+0x150>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f2 feb3 	bl	8000298 <__aeabi_dsub>
 800d532:	4622      	mov	r2, r4
 800d534:	462b      	mov	r3, r5
 800d536:	f7f3 f867 	bl	8000608 <__aeabi_dmul>
 800d53a:	a339      	add	r3, pc, #228	@ (adr r3, 800d620 <__kernel_cos+0x158>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	f7f2 feac 	bl	800029c <__adddf3>
 800d544:	4622      	mov	r2, r4
 800d546:	462b      	mov	r3, r5
 800d548:	f7f3 f85e 	bl	8000608 <__aeabi_dmul>
 800d54c:	a336      	add	r3, pc, #216	@ (adr r3, 800d628 <__kernel_cos+0x160>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	f7f2 fea1 	bl	8000298 <__aeabi_dsub>
 800d556:	4622      	mov	r2, r4
 800d558:	462b      	mov	r3, r5
 800d55a:	f7f3 f855 	bl	8000608 <__aeabi_dmul>
 800d55e:	a334      	add	r3, pc, #208	@ (adr r3, 800d630 <__kernel_cos+0x168>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	f7f2 fe9a 	bl	800029c <__adddf3>
 800d568:	4622      	mov	r2, r4
 800d56a:	462b      	mov	r3, r5
 800d56c:	f7f3 f84c 	bl	8000608 <__aeabi_dmul>
 800d570:	4622      	mov	r2, r4
 800d572:	462b      	mov	r3, r5
 800d574:	f7f3 f848 	bl	8000608 <__aeabi_dmul>
 800d578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d57c:	4604      	mov	r4, r0
 800d57e:	460d      	mov	r5, r1
 800d580:	4630      	mov	r0, r6
 800d582:	4639      	mov	r1, r7
 800d584:	f7f3 f840 	bl	8000608 <__aeabi_dmul>
 800d588:	460b      	mov	r3, r1
 800d58a:	4602      	mov	r2, r0
 800d58c:	4629      	mov	r1, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	f7f2 fe82 	bl	8000298 <__aeabi_dsub>
 800d594:	4b2b      	ldr	r3, [pc, #172]	@ (800d644 <__kernel_cos+0x17c>)
 800d596:	4598      	cmp	r8, r3
 800d598:	4606      	mov	r6, r0
 800d59a:	460f      	mov	r7, r1
 800d59c:	d810      	bhi.n	800d5c0 <__kernel_cos+0xf8>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	4659      	mov	r1, fp
 800d5a6:	f7f2 fe77 	bl	8000298 <__aeabi_dsub>
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4926      	ldr	r1, [pc, #152]	@ (800d648 <__kernel_cos+0x180>)
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	f7f2 fe71 	bl	8000298 <__aeabi_dsub>
 800d5b6:	ec41 0b10 	vmov	d0, r0, r1
 800d5ba:	b003      	add	sp, #12
 800d5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c0:	4b22      	ldr	r3, [pc, #136]	@ (800d64c <__kernel_cos+0x184>)
 800d5c2:	4921      	ldr	r1, [pc, #132]	@ (800d648 <__kernel_cos+0x180>)
 800d5c4:	4598      	cmp	r8, r3
 800d5c6:	bf8c      	ite	hi
 800d5c8:	4d21      	ldrhi	r5, [pc, #132]	@ (800d650 <__kernel_cos+0x188>)
 800d5ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d5ce:	2400      	movs	r4, #0
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	462b      	mov	r3, r5
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	f7f2 fe5f 	bl	8000298 <__aeabi_dsub>
 800d5da:	4622      	mov	r2, r4
 800d5dc:	4680      	mov	r8, r0
 800d5de:	4689      	mov	r9, r1
 800d5e0:	462b      	mov	r3, r5
 800d5e2:	4650      	mov	r0, sl
 800d5e4:	4659      	mov	r1, fp
 800d5e6:	f7f2 fe57 	bl	8000298 <__aeabi_dsub>
 800d5ea:	4632      	mov	r2, r6
 800d5ec:	463b      	mov	r3, r7
 800d5ee:	f7f2 fe53 	bl	8000298 <__aeabi_dsub>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	e7da      	b.n	800d5b2 <__kernel_cos+0xea>
 800d5fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d638 <__kernel_cos+0x170>
 800d600:	e7db      	b.n	800d5ba <__kernel_cos+0xf2>
 800d602:	bf00      	nop
 800d604:	f3af 8000 	nop.w
 800d608:	be8838d4 	.word	0xbe8838d4
 800d60c:	bda8fae9 	.word	0xbda8fae9
 800d610:	bdb4b1c4 	.word	0xbdb4b1c4
 800d614:	3e21ee9e 	.word	0x3e21ee9e
 800d618:	809c52ad 	.word	0x809c52ad
 800d61c:	3e927e4f 	.word	0x3e927e4f
 800d620:	19cb1590 	.word	0x19cb1590
 800d624:	3efa01a0 	.word	0x3efa01a0
 800d628:	16c15177 	.word	0x16c15177
 800d62c:	3f56c16c 	.word	0x3f56c16c
 800d630:	5555554c 	.word	0x5555554c
 800d634:	3fa55555 	.word	0x3fa55555
 800d638:	00000000 	.word	0x00000000
 800d63c:	3ff00000 	.word	0x3ff00000
 800d640:	3fe00000 	.word	0x3fe00000
 800d644:	3fd33332 	.word	0x3fd33332
 800d648:	3ff00000 	.word	0x3ff00000
 800d64c:	3fe90000 	.word	0x3fe90000
 800d650:	3fd20000 	.word	0x3fd20000
 800d654:	00000000 	.word	0x00000000

0800d658 <__kernel_sin>:
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	ec55 4b10 	vmov	r4, r5, d0
 800d660:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d664:	b085      	sub	sp, #20
 800d666:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d66a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d66e:	4680      	mov	r8, r0
 800d670:	d205      	bcs.n	800d67e <__kernel_sin+0x26>
 800d672:	4620      	mov	r0, r4
 800d674:	4629      	mov	r1, r5
 800d676:	f7f3 fa77 	bl	8000b68 <__aeabi_d2iz>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d052      	beq.n	800d724 <__kernel_sin+0xcc>
 800d67e:	4622      	mov	r2, r4
 800d680:	462b      	mov	r3, r5
 800d682:	4620      	mov	r0, r4
 800d684:	4629      	mov	r1, r5
 800d686:	f7f2 ffbf 	bl	8000608 <__aeabi_dmul>
 800d68a:	4682      	mov	sl, r0
 800d68c:	468b      	mov	fp, r1
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	4620      	mov	r0, r4
 800d694:	4629      	mov	r1, r5
 800d696:	f7f2 ffb7 	bl	8000608 <__aeabi_dmul>
 800d69a:	a342      	add	r3, pc, #264	@ (adr r3, 800d7a4 <__kernel_sin+0x14c>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	e9cd 0100 	strd	r0, r1, [sp]
 800d6a4:	4650      	mov	r0, sl
 800d6a6:	4659      	mov	r1, fp
 800d6a8:	f7f2 ffae 	bl	8000608 <__aeabi_dmul>
 800d6ac:	a33f      	add	r3, pc, #252	@ (adr r3, 800d7ac <__kernel_sin+0x154>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	f7f2 fdf1 	bl	8000298 <__aeabi_dsub>
 800d6b6:	4652      	mov	r2, sl
 800d6b8:	465b      	mov	r3, fp
 800d6ba:	f7f2 ffa5 	bl	8000608 <__aeabi_dmul>
 800d6be:	a33d      	add	r3, pc, #244	@ (adr r3, 800d7b4 <__kernel_sin+0x15c>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f7f2 fdea 	bl	800029c <__adddf3>
 800d6c8:	4652      	mov	r2, sl
 800d6ca:	465b      	mov	r3, fp
 800d6cc:	f7f2 ff9c 	bl	8000608 <__aeabi_dmul>
 800d6d0:	a33a      	add	r3, pc, #232	@ (adr r3, 800d7bc <__kernel_sin+0x164>)
 800d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d6:	f7f2 fddf 	bl	8000298 <__aeabi_dsub>
 800d6da:	4652      	mov	r2, sl
 800d6dc:	465b      	mov	r3, fp
 800d6de:	f7f2 ff93 	bl	8000608 <__aeabi_dmul>
 800d6e2:	a338      	add	r3, pc, #224	@ (adr r3, 800d7c4 <__kernel_sin+0x16c>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	f7f2 fdd8 	bl	800029c <__adddf3>
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	460f      	mov	r7, r1
 800d6f0:	f1b8 0f00 	cmp.w	r8, #0
 800d6f4:	d11b      	bne.n	800d72e <__kernel_sin+0xd6>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	4659      	mov	r1, fp
 800d6fe:	f7f2 ff83 	bl	8000608 <__aeabi_dmul>
 800d702:	a325      	add	r3, pc, #148	@ (adr r3, 800d798 <__kernel_sin+0x140>)
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	f7f2 fdc6 	bl	8000298 <__aeabi_dsub>
 800d70c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d710:	f7f2 ff7a 	bl	8000608 <__aeabi_dmul>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	4620      	mov	r0, r4
 800d71a:	4629      	mov	r1, r5
 800d71c:	f7f2 fdbe 	bl	800029c <__adddf3>
 800d720:	4604      	mov	r4, r0
 800d722:	460d      	mov	r5, r1
 800d724:	ec45 4b10 	vmov	d0, r4, r5
 800d728:	b005      	add	sp, #20
 800d72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d732:	4b1b      	ldr	r3, [pc, #108]	@ (800d7a0 <__kernel_sin+0x148>)
 800d734:	2200      	movs	r2, #0
 800d736:	f7f2 ff67 	bl	8000608 <__aeabi_dmul>
 800d73a:	4632      	mov	r2, r6
 800d73c:	4680      	mov	r8, r0
 800d73e:	4689      	mov	r9, r1
 800d740:	463b      	mov	r3, r7
 800d742:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d746:	f7f2 ff5f 	bl	8000608 <__aeabi_dmul>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4640      	mov	r0, r8
 800d750:	4649      	mov	r1, r9
 800d752:	f7f2 fda1 	bl	8000298 <__aeabi_dsub>
 800d756:	4652      	mov	r2, sl
 800d758:	465b      	mov	r3, fp
 800d75a:	f7f2 ff55 	bl	8000608 <__aeabi_dmul>
 800d75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d762:	f7f2 fd99 	bl	8000298 <__aeabi_dsub>
 800d766:	a30c      	add	r3, pc, #48	@ (adr r3, 800d798 <__kernel_sin+0x140>)
 800d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76c:	4606      	mov	r6, r0
 800d76e:	460f      	mov	r7, r1
 800d770:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d774:	f7f2 ff48 	bl	8000608 <__aeabi_dmul>
 800d778:	4602      	mov	r2, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	4630      	mov	r0, r6
 800d77e:	4639      	mov	r1, r7
 800d780:	f7f2 fd8c 	bl	800029c <__adddf3>
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	4620      	mov	r0, r4
 800d78a:	4629      	mov	r1, r5
 800d78c:	f7f2 fd84 	bl	8000298 <__aeabi_dsub>
 800d790:	e7c6      	b.n	800d720 <__kernel_sin+0xc8>
 800d792:	bf00      	nop
 800d794:	f3af 8000 	nop.w
 800d798:	55555549 	.word	0x55555549
 800d79c:	3fc55555 	.word	0x3fc55555
 800d7a0:	3fe00000 	.word	0x3fe00000
 800d7a4:	5acfd57c 	.word	0x5acfd57c
 800d7a8:	3de5d93a 	.word	0x3de5d93a
 800d7ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800d7b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d7b4:	57b1fe7d 	.word	0x57b1fe7d
 800d7b8:	3ec71de3 	.word	0x3ec71de3
 800d7bc:	19c161d5 	.word	0x19c161d5
 800d7c0:	3f2a01a0 	.word	0x3f2a01a0
 800d7c4:	1110f8a6 	.word	0x1110f8a6
 800d7c8:	3f811111 	.word	0x3f811111
 800d7cc:	00000000 	.word	0x00000000

0800d7d0 <__kernel_tan>:
 800d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	ec5b ab10 	vmov	sl, fp, d0
 800d7d8:	4bdb      	ldr	r3, [pc, #876]	@ (800db48 <__kernel_tan+0x378>)
 800d7da:	b089      	sub	sp, #36	@ 0x24
 800d7dc:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 800d7e0:	429f      	cmp	r7, r3
 800d7e2:	ec59 8b11 	vmov	r8, r9, d1
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	f8cd b008 	str.w	fp, [sp, #8]
 800d7ec:	d85d      	bhi.n	800d8aa <__kernel_tan+0xda>
 800d7ee:	4650      	mov	r0, sl
 800d7f0:	4659      	mov	r1, fp
 800d7f2:	f7f3 f9b9 	bl	8000b68 <__aeabi_d2iz>
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d17c      	bne.n	800d8f6 <__kernel_tan+0x126>
 800d7fc:	1c73      	adds	r3, r6, #1
 800d7fe:	4652      	mov	r2, sl
 800d800:	4313      	orrs	r3, r2
 800d802:	433b      	orrs	r3, r7
 800d804:	d110      	bne.n	800d828 <__kernel_tan+0x58>
 800d806:	ec4b ab10 	vmov	d0, sl, fp
 800d80a:	f7ff fcc5 	bl	800d198 <fabs>
 800d80e:	49cf      	ldr	r1, [pc, #828]	@ (800db4c <__kernel_tan+0x37c>)
 800d810:	ec53 2b10 	vmov	r2, r3, d0
 800d814:	2000      	movs	r0, #0
 800d816:	f7f3 f821 	bl	800085c <__aeabi_ddiv>
 800d81a:	4682      	mov	sl, r0
 800d81c:	468b      	mov	fp, r1
 800d81e:	ec4b ab10 	vmov	d0, sl, fp
 800d822:	b009      	add	sp, #36	@ 0x24
 800d824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d828:	2e01      	cmp	r6, #1
 800d82a:	d0f8      	beq.n	800d81e <__kernel_tan+0x4e>
 800d82c:	4642      	mov	r2, r8
 800d82e:	464b      	mov	r3, r9
 800d830:	4650      	mov	r0, sl
 800d832:	4659      	mov	r1, fp
 800d834:	f7f2 fd32 	bl	800029c <__adddf3>
 800d838:	4602      	mov	r2, r0
 800d83a:	460b      	mov	r3, r1
 800d83c:	460f      	mov	r7, r1
 800d83e:	2000      	movs	r0, #0
 800d840:	49c3      	ldr	r1, [pc, #780]	@ (800db50 <__kernel_tan+0x380>)
 800d842:	f7f3 f80b 	bl	800085c <__aeabi_ddiv>
 800d846:	e9cd 0100 	strd	r0, r1, [sp]
 800d84a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d84e:	462e      	mov	r6, r5
 800d850:	4652      	mov	r2, sl
 800d852:	462c      	mov	r4, r5
 800d854:	4630      	mov	r0, r6
 800d856:	461d      	mov	r5, r3
 800d858:	4639      	mov	r1, r7
 800d85a:	465b      	mov	r3, fp
 800d85c:	f7f2 fd1c 	bl	8000298 <__aeabi_dsub>
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	4640      	mov	r0, r8
 800d866:	4649      	mov	r1, r9
 800d868:	f7f2 fd16 	bl	8000298 <__aeabi_dsub>
 800d86c:	4632      	mov	r2, r6
 800d86e:	462b      	mov	r3, r5
 800d870:	f7f2 feca 	bl	8000608 <__aeabi_dmul>
 800d874:	4632      	mov	r2, r6
 800d876:	4682      	mov	sl, r0
 800d878:	468b      	mov	fp, r1
 800d87a:	462b      	mov	r3, r5
 800d87c:	4630      	mov	r0, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f2 fec2 	bl	8000608 <__aeabi_dmul>
 800d884:	4bb1      	ldr	r3, [pc, #708]	@ (800db4c <__kernel_tan+0x37c>)
 800d886:	2200      	movs	r2, #0
 800d888:	f7f2 fd08 	bl	800029c <__adddf3>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	4650      	mov	r0, sl
 800d892:	4659      	mov	r1, fp
 800d894:	f7f2 fd02 	bl	800029c <__adddf3>
 800d898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d89c:	f7f2 feb4 	bl	8000608 <__aeabi_dmul>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	462b      	mov	r3, r5
 800d8a4:	f7f2 fcfa 	bl	800029c <__adddf3>
 800d8a8:	e7b7      	b.n	800d81a <__kernel_tan+0x4a>
 800d8aa:	4baa      	ldr	r3, [pc, #680]	@ (800db54 <__kernel_tan+0x384>)
 800d8ac:	429f      	cmp	r7, r3
 800d8ae:	d922      	bls.n	800d8f6 <__kernel_tan+0x126>
 800d8b0:	9b02      	ldr	r3, [sp, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	da05      	bge.n	800d8c2 <__kernel_tan+0xf2>
 800d8b6:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d8ba:	469b      	mov	fp, r3
 800d8bc:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d8c0:	4699      	mov	r9, r3
 800d8c2:	4652      	mov	r2, sl
 800d8c4:	465b      	mov	r3, fp
 800d8c6:	a182      	add	r1, pc, #520	@ (adr r1, 800dad0 <__kernel_tan+0x300>)
 800d8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8cc:	f7f2 fce4 	bl	8000298 <__aeabi_dsub>
 800d8d0:	4642      	mov	r2, r8
 800d8d2:	464b      	mov	r3, r9
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	a17f      	add	r1, pc, #508	@ (adr r1, 800dad8 <__kernel_tan+0x308>)
 800d8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8de:	f7f2 fcdb 	bl	8000298 <__aeabi_dsub>
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	462b      	mov	r3, r5
 800d8e6:	f7f2 fcd9 	bl	800029c <__adddf3>
 800d8ea:	f04f 0800 	mov.w	r8, #0
 800d8ee:	4682      	mov	sl, r0
 800d8f0:	468b      	mov	fp, r1
 800d8f2:	f04f 0900 	mov.w	r9, #0
 800d8f6:	4652      	mov	r2, sl
 800d8f8:	465b      	mov	r3, fp
 800d8fa:	4650      	mov	r0, sl
 800d8fc:	4659      	mov	r1, fp
 800d8fe:	f7f2 fe83 	bl	8000608 <__aeabi_dmul>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	e9cd 2300 	strd	r2, r3, [sp]
 800d90a:	f7f2 fe7d 	bl	8000608 <__aeabi_dmul>
 800d90e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d912:	4604      	mov	r4, r0
 800d914:	460d      	mov	r5, r1
 800d916:	4650      	mov	r0, sl
 800d918:	4659      	mov	r1, fp
 800d91a:	f7f2 fe75 	bl	8000608 <__aeabi_dmul>
 800d91e:	a370      	add	r3, pc, #448	@ (adr r3, 800dae0 <__kernel_tan+0x310>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d928:	4620      	mov	r0, r4
 800d92a:	4629      	mov	r1, r5
 800d92c:	f7f2 fe6c 	bl	8000608 <__aeabi_dmul>
 800d930:	a36d      	add	r3, pc, #436	@ (adr r3, 800dae8 <__kernel_tan+0x318>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fcb1 	bl	800029c <__adddf3>
 800d93a:	4622      	mov	r2, r4
 800d93c:	462b      	mov	r3, r5
 800d93e:	f7f2 fe63 	bl	8000608 <__aeabi_dmul>
 800d942:	a36b      	add	r3, pc, #428	@ (adr r3, 800daf0 <__kernel_tan+0x320>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	f7f2 fca8 	bl	800029c <__adddf3>
 800d94c:	4622      	mov	r2, r4
 800d94e:	462b      	mov	r3, r5
 800d950:	f7f2 fe5a 	bl	8000608 <__aeabi_dmul>
 800d954:	a368      	add	r3, pc, #416	@ (adr r3, 800daf8 <__kernel_tan+0x328>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	f7f2 fc9f 	bl	800029c <__adddf3>
 800d95e:	4622      	mov	r2, r4
 800d960:	462b      	mov	r3, r5
 800d962:	f7f2 fe51 	bl	8000608 <__aeabi_dmul>
 800d966:	a366      	add	r3, pc, #408	@ (adr r3, 800db00 <__kernel_tan+0x330>)
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	f7f2 fc96 	bl	800029c <__adddf3>
 800d970:	4622      	mov	r2, r4
 800d972:	462b      	mov	r3, r5
 800d974:	f7f2 fe48 	bl	8000608 <__aeabi_dmul>
 800d978:	a363      	add	r3, pc, #396	@ (adr r3, 800db08 <__kernel_tan+0x338>)
 800d97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97e:	f7f2 fc8d 	bl	800029c <__adddf3>
 800d982:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d986:	f7f2 fe3f 	bl	8000608 <__aeabi_dmul>
 800d98a:	a361      	add	r3, pc, #388	@ (adr r3, 800db10 <__kernel_tan+0x340>)
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d994:	4620      	mov	r0, r4
 800d996:	4629      	mov	r1, r5
 800d998:	f7f2 fe36 	bl	8000608 <__aeabi_dmul>
 800d99c:	a35e      	add	r3, pc, #376	@ (adr r3, 800db18 <__kernel_tan+0x348>)
 800d99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a2:	f7f2 fc7b 	bl	800029c <__adddf3>
 800d9a6:	4622      	mov	r2, r4
 800d9a8:	462b      	mov	r3, r5
 800d9aa:	f7f2 fe2d 	bl	8000608 <__aeabi_dmul>
 800d9ae:	a35c      	add	r3, pc, #368	@ (adr r3, 800db20 <__kernel_tan+0x350>)
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	f7f2 fc72 	bl	800029c <__adddf3>
 800d9b8:	4622      	mov	r2, r4
 800d9ba:	462b      	mov	r3, r5
 800d9bc:	f7f2 fe24 	bl	8000608 <__aeabi_dmul>
 800d9c0:	a359      	add	r3, pc, #356	@ (adr r3, 800db28 <__kernel_tan+0x358>)
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	f7f2 fc69 	bl	800029c <__adddf3>
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	462b      	mov	r3, r5
 800d9ce:	f7f2 fe1b 	bl	8000608 <__aeabi_dmul>
 800d9d2:	a357      	add	r3, pc, #348	@ (adr r3, 800db30 <__kernel_tan+0x360>)
 800d9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d8:	f7f2 fc60 	bl	800029c <__adddf3>
 800d9dc:	4622      	mov	r2, r4
 800d9de:	462b      	mov	r3, r5
 800d9e0:	f7f2 fe12 	bl	8000608 <__aeabi_dmul>
 800d9e4:	a354      	add	r3, pc, #336	@ (adr r3, 800db38 <__kernel_tan+0x368>)
 800d9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ea:	f7f2 fc57 	bl	800029c <__adddf3>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9f6:	f7f2 fc51 	bl	800029c <__adddf3>
 800d9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9fe:	f7f2 fe03 	bl	8000608 <__aeabi_dmul>
 800da02:	4642      	mov	r2, r8
 800da04:	464b      	mov	r3, r9
 800da06:	f7f2 fc49 	bl	800029c <__adddf3>
 800da0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da0e:	f7f2 fdfb 	bl	8000608 <__aeabi_dmul>
 800da12:	4642      	mov	r2, r8
 800da14:	464b      	mov	r3, r9
 800da16:	f7f2 fc41 	bl	800029c <__adddf3>
 800da1a:	a349      	add	r3, pc, #292	@ (adr r3, 800db40 <__kernel_tan+0x370>)
 800da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da20:	4604      	mov	r4, r0
 800da22:	460d      	mov	r5, r1
 800da24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da28:	f7f2 fdee 	bl	8000608 <__aeabi_dmul>
 800da2c:	4622      	mov	r2, r4
 800da2e:	462b      	mov	r3, r5
 800da30:	f7f2 fc34 	bl	800029c <__adddf3>
 800da34:	e9cd 0100 	strd	r0, r1, [sp]
 800da38:	460b      	mov	r3, r1
 800da3a:	4602      	mov	r2, r0
 800da3c:	4659      	mov	r1, fp
 800da3e:	4650      	mov	r0, sl
 800da40:	f7f2 fc2c 	bl	800029c <__adddf3>
 800da44:	4b43      	ldr	r3, [pc, #268]	@ (800db54 <__kernel_tan+0x384>)
 800da46:	429f      	cmp	r7, r3
 800da48:	4604      	mov	r4, r0
 800da4a:	460d      	mov	r5, r1
 800da4c:	f240 8084 	bls.w	800db58 <__kernel_tan+0x388>
 800da50:	4630      	mov	r0, r6
 800da52:	f7f2 fd6f 	bl	8000534 <__aeabi_i2d>
 800da56:	4622      	mov	r2, r4
 800da58:	4680      	mov	r8, r0
 800da5a:	4689      	mov	r9, r1
 800da5c:	462b      	mov	r3, r5
 800da5e:	4620      	mov	r0, r4
 800da60:	4629      	mov	r1, r5
 800da62:	f7f2 fdd1 	bl	8000608 <__aeabi_dmul>
 800da66:	4642      	mov	r2, r8
 800da68:	4606      	mov	r6, r0
 800da6a:	460f      	mov	r7, r1
 800da6c:	464b      	mov	r3, r9
 800da6e:	4620      	mov	r0, r4
 800da70:	4629      	mov	r1, r5
 800da72:	f7f2 fc13 	bl	800029c <__adddf3>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	4630      	mov	r0, r6
 800da7c:	4639      	mov	r1, r7
 800da7e:	f7f2 feed 	bl	800085c <__aeabi_ddiv>
 800da82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da86:	f7f2 fc07 	bl	8000298 <__aeabi_dsub>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	4650      	mov	r0, sl
 800da90:	4659      	mov	r1, fp
 800da92:	f7f2 fc01 	bl	8000298 <__aeabi_dsub>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	f7f2 fbff 	bl	800029c <__adddf3>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	4640      	mov	r0, r8
 800daa4:	4649      	mov	r1, r9
 800daa6:	f7f2 fbf7 	bl	8000298 <__aeabi_dsub>
 800daaa:	9b02      	ldr	r3, [sp, #8]
 800daac:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800dab0:	f00a 0a02 	and.w	sl, sl, #2
 800dab4:	4604      	mov	r4, r0
 800dab6:	f1ca 0001 	rsb	r0, sl, #1
 800daba:	460d      	mov	r5, r1
 800dabc:	f7f2 fd3a 	bl	8000534 <__aeabi_i2d>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4620      	mov	r0, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7f2 fd9e 	bl	8000608 <__aeabi_dmul>
 800dacc:	e6a5      	b.n	800d81a <__kernel_tan+0x4a>
 800dace:	bf00      	nop
 800dad0:	54442d18 	.word	0x54442d18
 800dad4:	3fe921fb 	.word	0x3fe921fb
 800dad8:	33145c07 	.word	0x33145c07
 800dadc:	3c81a626 	.word	0x3c81a626
 800dae0:	74bf7ad4 	.word	0x74bf7ad4
 800dae4:	3efb2a70 	.word	0x3efb2a70
 800dae8:	32f0a7e9 	.word	0x32f0a7e9
 800daec:	3f12b80f 	.word	0x3f12b80f
 800daf0:	1a8d1068 	.word	0x1a8d1068
 800daf4:	3f3026f7 	.word	0x3f3026f7
 800daf8:	fee08315 	.word	0xfee08315
 800dafc:	3f57dbc8 	.word	0x3f57dbc8
 800db00:	e96e8493 	.word	0xe96e8493
 800db04:	3f8226e3 	.word	0x3f8226e3
 800db08:	1bb341fe 	.word	0x1bb341fe
 800db0c:	3faba1ba 	.word	0x3faba1ba
 800db10:	db605373 	.word	0xdb605373
 800db14:	bef375cb 	.word	0xbef375cb
 800db18:	a03792a6 	.word	0xa03792a6
 800db1c:	3f147e88 	.word	0x3f147e88
 800db20:	f2f26501 	.word	0xf2f26501
 800db24:	3f4344d8 	.word	0x3f4344d8
 800db28:	c9560328 	.word	0xc9560328
 800db2c:	3f6d6d22 	.word	0x3f6d6d22
 800db30:	8406d637 	.word	0x8406d637
 800db34:	3f9664f4 	.word	0x3f9664f4
 800db38:	1110fe7a 	.word	0x1110fe7a
 800db3c:	3fc11111 	.word	0x3fc11111
 800db40:	55555563 	.word	0x55555563
 800db44:	3fd55555 	.word	0x3fd55555
 800db48:	3e2fffff 	.word	0x3e2fffff
 800db4c:	3ff00000 	.word	0x3ff00000
 800db50:	bff00000 	.word	0xbff00000
 800db54:	3fe59427 	.word	0x3fe59427
 800db58:	2e01      	cmp	r6, #1
 800db5a:	d033      	beq.n	800dbc4 <__kernel_tan+0x3f4>
 800db5c:	f04f 0800 	mov.w	r8, #0
 800db60:	4689      	mov	r9, r1
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	2000      	movs	r0, #0
 800db68:	4918      	ldr	r1, [pc, #96]	@ (800dbcc <__kernel_tan+0x3fc>)
 800db6a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800db6e:	f7f2 fe75 	bl	800085c <__aeabi_ddiv>
 800db72:	4652      	mov	r2, sl
 800db74:	460f      	mov	r7, r1
 800db76:	465b      	mov	r3, fp
 800db78:	4606      	mov	r6, r0
 800db7a:	460d      	mov	r5, r1
 800db7c:	4640      	mov	r0, r8
 800db7e:	4649      	mov	r1, r9
 800db80:	f7f2 fb8a 	bl	8000298 <__aeabi_dsub>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db8c:	f7f2 fb84 	bl	8000298 <__aeabi_dsub>
 800db90:	4642      	mov	r2, r8
 800db92:	463b      	mov	r3, r7
 800db94:	f7f2 fd38 	bl	8000608 <__aeabi_dmul>
 800db98:	4642      	mov	r2, r8
 800db9a:	4682      	mov	sl, r0
 800db9c:	468b      	mov	fp, r1
 800db9e:	463b      	mov	r3, r7
 800dba0:	4640      	mov	r0, r8
 800dba2:	4649      	mov	r1, r9
 800dba4:	f7f2 fd30 	bl	8000608 <__aeabi_dmul>
 800dba8:	4b09      	ldr	r3, [pc, #36]	@ (800dbd0 <__kernel_tan+0x400>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f7f2 fb76 	bl	800029c <__adddf3>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	4659      	mov	r1, fp
 800dbb8:	f7f2 fb70 	bl	800029c <__adddf3>
 800dbbc:	4644      	mov	r4, r8
 800dbbe:	4632      	mov	r2, r6
 800dbc0:	463b      	mov	r3, r7
 800dbc2:	e66b      	b.n	800d89c <__kernel_tan+0xcc>
 800dbc4:	4682      	mov	sl, r0
 800dbc6:	468b      	mov	fp, r1
 800dbc8:	e629      	b.n	800d81e <__kernel_tan+0x4e>
 800dbca:	bf00      	nop
 800dbcc:	bff00000 	.word	0xbff00000
 800dbd0:	3ff00000 	.word	0x3ff00000
 800dbd4:	00000000 	.word	0x00000000

0800dbd8 <__ieee754_asin>:
 800dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbdc:	ec55 4b10 	vmov	r4, r5, d0
 800dbe0:	4bc7      	ldr	r3, [pc, #796]	@ (800df00 <__ieee754_asin+0x328>)
 800dbe2:	b087      	sub	sp, #28
 800dbe4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dbe8:	429e      	cmp	r6, r3
 800dbea:	9501      	str	r5, [sp, #4]
 800dbec:	d92d      	bls.n	800dc4a <__ieee754_asin+0x72>
 800dbee:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800dbf2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800dbf6:	4326      	orrs	r6, r4
 800dbf8:	d116      	bne.n	800dc28 <__ieee754_asin+0x50>
 800dbfa:	a3a7      	add	r3, pc, #668	@ (adr r3, 800de98 <__ieee754_asin+0x2c0>)
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	4620      	mov	r0, r4
 800dc02:	4629      	mov	r1, r5
 800dc04:	f7f2 fd00 	bl	8000608 <__aeabi_dmul>
 800dc08:	a3a5      	add	r3, pc, #660	@ (adr r3, 800dea0 <__ieee754_asin+0x2c8>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	4606      	mov	r6, r0
 800dc10:	460f      	mov	r7, r1
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	f7f2 fcf7 	bl	8000608 <__aeabi_dmul>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	4630      	mov	r0, r6
 800dc20:	4639      	mov	r1, r7
 800dc22:	f7f2 fb3b 	bl	800029c <__adddf3>
 800dc26:	e009      	b.n	800dc3c <__ieee754_asin+0x64>
 800dc28:	4622      	mov	r2, r4
 800dc2a:	462b      	mov	r3, r5
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	4629      	mov	r1, r5
 800dc30:	f7f2 fb32 	bl	8000298 <__aeabi_dsub>
 800dc34:	4602      	mov	r2, r0
 800dc36:	460b      	mov	r3, r1
 800dc38:	f7f2 fe10 	bl	800085c <__aeabi_ddiv>
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	460d      	mov	r5, r1
 800dc40:	ec45 4b10 	vmov	d0, r4, r5
 800dc44:	b007      	add	sp, #28
 800dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4a:	4bae      	ldr	r3, [pc, #696]	@ (800df04 <__ieee754_asin+0x32c>)
 800dc4c:	429e      	cmp	r6, r3
 800dc4e:	d810      	bhi.n	800dc72 <__ieee754_asin+0x9a>
 800dc50:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800dc54:	f080 80ad 	bcs.w	800ddb2 <__ieee754_asin+0x1da>
 800dc58:	a393      	add	r3, pc, #588	@ (adr r3, 800dea8 <__ieee754_asin+0x2d0>)
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fb1b 	bl	800029c <__adddf3>
 800dc66:	4ba8      	ldr	r3, [pc, #672]	@ (800df08 <__ieee754_asin+0x330>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f7f2 ff5d 	bl	8000b28 <__aeabi_dcmpgt>
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	d1e6      	bne.n	800dc40 <__ieee754_asin+0x68>
 800dc72:	ec45 4b10 	vmov	d0, r4, r5
 800dc76:	f7ff fa8f 	bl	800d198 <fabs>
 800dc7a:	49a3      	ldr	r1, [pc, #652]	@ (800df08 <__ieee754_asin+0x330>)
 800dc7c:	ec53 2b10 	vmov	r2, r3, d0
 800dc80:	2000      	movs	r0, #0
 800dc82:	f7f2 fb09 	bl	8000298 <__aeabi_dsub>
 800dc86:	4ba1      	ldr	r3, [pc, #644]	@ (800df0c <__ieee754_asin+0x334>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f7f2 fcbd 	bl	8000608 <__aeabi_dmul>
 800dc8e:	a388      	add	r3, pc, #544	@ (adr r3, 800deb0 <__ieee754_asin+0x2d8>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	4604      	mov	r4, r0
 800dc96:	460d      	mov	r5, r1
 800dc98:	f7f2 fcb6 	bl	8000608 <__aeabi_dmul>
 800dc9c:	a386      	add	r3, pc, #536	@ (adr r3, 800deb8 <__ieee754_asin+0x2e0>)
 800dc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca2:	f7f2 fafb 	bl	800029c <__adddf3>
 800dca6:	4622      	mov	r2, r4
 800dca8:	462b      	mov	r3, r5
 800dcaa:	f7f2 fcad 	bl	8000608 <__aeabi_dmul>
 800dcae:	a384      	add	r3, pc, #528	@ (adr r3, 800dec0 <__ieee754_asin+0x2e8>)
 800dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb4:	f7f2 faf0 	bl	8000298 <__aeabi_dsub>
 800dcb8:	4622      	mov	r2, r4
 800dcba:	462b      	mov	r3, r5
 800dcbc:	f7f2 fca4 	bl	8000608 <__aeabi_dmul>
 800dcc0:	a381      	add	r3, pc, #516	@ (adr r3, 800dec8 <__ieee754_asin+0x2f0>)
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	f7f2 fae9 	bl	800029c <__adddf3>
 800dcca:	4622      	mov	r2, r4
 800dccc:	462b      	mov	r3, r5
 800dcce:	f7f2 fc9b 	bl	8000608 <__aeabi_dmul>
 800dcd2:	a37f      	add	r3, pc, #508	@ (adr r3, 800ded0 <__ieee754_asin+0x2f8>)
 800dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd8:	f7f2 fade 	bl	8000298 <__aeabi_dsub>
 800dcdc:	4622      	mov	r2, r4
 800dcde:	462b      	mov	r3, r5
 800dce0:	f7f2 fc92 	bl	8000608 <__aeabi_dmul>
 800dce4:	a37c      	add	r3, pc, #496	@ (adr r3, 800ded8 <__ieee754_asin+0x300>)
 800dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcea:	f7f2 fad7 	bl	800029c <__adddf3>
 800dcee:	4622      	mov	r2, r4
 800dcf0:	462b      	mov	r3, r5
 800dcf2:	f7f2 fc89 	bl	8000608 <__aeabi_dmul>
 800dcf6:	a37a      	add	r3, pc, #488	@ (adr r3, 800dee0 <__ieee754_asin+0x308>)
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd00:	4620      	mov	r0, r4
 800dd02:	4629      	mov	r1, r5
 800dd04:	f7f2 fc80 	bl	8000608 <__aeabi_dmul>
 800dd08:	a377      	add	r3, pc, #476	@ (adr r3, 800dee8 <__ieee754_asin+0x310>)
 800dd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0e:	f7f2 fac3 	bl	8000298 <__aeabi_dsub>
 800dd12:	4622      	mov	r2, r4
 800dd14:	462b      	mov	r3, r5
 800dd16:	f7f2 fc77 	bl	8000608 <__aeabi_dmul>
 800dd1a:	a375      	add	r3, pc, #468	@ (adr r3, 800def0 <__ieee754_asin+0x318>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	f7f2 fabc 	bl	800029c <__adddf3>
 800dd24:	4622      	mov	r2, r4
 800dd26:	462b      	mov	r3, r5
 800dd28:	f7f2 fc6e 	bl	8000608 <__aeabi_dmul>
 800dd2c:	a372      	add	r3, pc, #456	@ (adr r3, 800def8 <__ieee754_asin+0x320>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	f7f2 fab1 	bl	8000298 <__aeabi_dsub>
 800dd36:	4622      	mov	r2, r4
 800dd38:	462b      	mov	r3, r5
 800dd3a:	f7f2 fc65 	bl	8000608 <__aeabi_dmul>
 800dd3e:	4b72      	ldr	r3, [pc, #456]	@ (800df08 <__ieee754_asin+0x330>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	f7f2 faab 	bl	800029c <__adddf3>
 800dd46:	ec45 4b10 	vmov	d0, r4, r5
 800dd4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd4e:	f7ff fadd 	bl	800d30c <__ieee754_sqrt>
 800dd52:	4b6f      	ldr	r3, [pc, #444]	@ (800df10 <__ieee754_asin+0x338>)
 800dd54:	429e      	cmp	r6, r3
 800dd56:	ec5b ab10 	vmov	sl, fp, d0
 800dd5a:	f240 80db 	bls.w	800df14 <__ieee754_asin+0x33c>
 800dd5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd66:	f7f2 fd79 	bl	800085c <__aeabi_ddiv>
 800dd6a:	4652      	mov	r2, sl
 800dd6c:	465b      	mov	r3, fp
 800dd6e:	f7f2 fc4b 	bl	8000608 <__aeabi_dmul>
 800dd72:	4652      	mov	r2, sl
 800dd74:	465b      	mov	r3, fp
 800dd76:	f7f2 fa91 	bl	800029c <__adddf3>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	f7f2 fa8d 	bl	800029c <__adddf3>
 800dd82:	a347      	add	r3, pc, #284	@ (adr r3, 800dea0 <__ieee754_asin+0x2c8>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	f7f2 fa86 	bl	8000298 <__aeabi_dsub>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	a141      	add	r1, pc, #260	@ (adr r1, 800de98 <__ieee754_asin+0x2c0>)
 800dd92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd96:	f7f2 fa7f 	bl	8000298 <__aeabi_dsub>
 800dd9a:	9b01      	ldr	r3, [sp, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfdc      	itt	le
 800dda0:	4602      	movle	r2, r0
 800dda2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800dda6:	4604      	mov	r4, r0
 800dda8:	460d      	mov	r5, r1
 800ddaa:	bfdc      	itt	le
 800ddac:	4614      	movle	r4, r2
 800ddae:	461d      	movle	r5, r3
 800ddb0:	e746      	b.n	800dc40 <__ieee754_asin+0x68>
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	462b      	mov	r3, r5
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fc25 	bl	8000608 <__aeabi_dmul>
 800ddbe:	a33c      	add	r3, pc, #240	@ (adr r3, 800deb0 <__ieee754_asin+0x2d8>)
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	f7f2 fc1e 	bl	8000608 <__aeabi_dmul>
 800ddcc:	a33a      	add	r3, pc, #232	@ (adr r3, 800deb8 <__ieee754_asin+0x2e0>)
 800ddce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd2:	f7f2 fa63 	bl	800029c <__adddf3>
 800ddd6:	4632      	mov	r2, r6
 800ddd8:	463b      	mov	r3, r7
 800ddda:	f7f2 fc15 	bl	8000608 <__aeabi_dmul>
 800ddde:	a338      	add	r3, pc, #224	@ (adr r3, 800dec0 <__ieee754_asin+0x2e8>)
 800dde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde4:	f7f2 fa58 	bl	8000298 <__aeabi_dsub>
 800dde8:	4632      	mov	r2, r6
 800ddea:	463b      	mov	r3, r7
 800ddec:	f7f2 fc0c 	bl	8000608 <__aeabi_dmul>
 800ddf0:	a335      	add	r3, pc, #212	@ (adr r3, 800dec8 <__ieee754_asin+0x2f0>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	f7f2 fa51 	bl	800029c <__adddf3>
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	463b      	mov	r3, r7
 800ddfe:	f7f2 fc03 	bl	8000608 <__aeabi_dmul>
 800de02:	a333      	add	r3, pc, #204	@ (adr r3, 800ded0 <__ieee754_asin+0x2f8>)
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	f7f2 fa46 	bl	8000298 <__aeabi_dsub>
 800de0c:	4632      	mov	r2, r6
 800de0e:	463b      	mov	r3, r7
 800de10:	f7f2 fbfa 	bl	8000608 <__aeabi_dmul>
 800de14:	a330      	add	r3, pc, #192	@ (adr r3, 800ded8 <__ieee754_asin+0x300>)
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	f7f2 fa3f 	bl	800029c <__adddf3>
 800de1e:	4632      	mov	r2, r6
 800de20:	463b      	mov	r3, r7
 800de22:	f7f2 fbf1 	bl	8000608 <__aeabi_dmul>
 800de26:	a32e      	add	r3, pc, #184	@ (adr r3, 800dee0 <__ieee754_asin+0x308>)
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	4680      	mov	r8, r0
 800de2e:	4689      	mov	r9, r1
 800de30:	4630      	mov	r0, r6
 800de32:	4639      	mov	r1, r7
 800de34:	f7f2 fbe8 	bl	8000608 <__aeabi_dmul>
 800de38:	a32b      	add	r3, pc, #172	@ (adr r3, 800dee8 <__ieee754_asin+0x310>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fa2b 	bl	8000298 <__aeabi_dsub>
 800de42:	4632      	mov	r2, r6
 800de44:	463b      	mov	r3, r7
 800de46:	f7f2 fbdf 	bl	8000608 <__aeabi_dmul>
 800de4a:	a329      	add	r3, pc, #164	@ (adr r3, 800def0 <__ieee754_asin+0x318>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	f7f2 fa24 	bl	800029c <__adddf3>
 800de54:	4632      	mov	r2, r6
 800de56:	463b      	mov	r3, r7
 800de58:	f7f2 fbd6 	bl	8000608 <__aeabi_dmul>
 800de5c:	a326      	add	r3, pc, #152	@ (adr r3, 800def8 <__ieee754_asin+0x320>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 fa19 	bl	8000298 <__aeabi_dsub>
 800de66:	4632      	mov	r2, r6
 800de68:	463b      	mov	r3, r7
 800de6a:	f7f2 fbcd 	bl	8000608 <__aeabi_dmul>
 800de6e:	4b26      	ldr	r3, [pc, #152]	@ (800df08 <__ieee754_asin+0x330>)
 800de70:	2200      	movs	r2, #0
 800de72:	f7f2 fa13 	bl	800029c <__adddf3>
 800de76:	4602      	mov	r2, r0
 800de78:	460b      	mov	r3, r1
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 fced 	bl	800085c <__aeabi_ddiv>
 800de82:	4622      	mov	r2, r4
 800de84:	462b      	mov	r3, r5
 800de86:	f7f2 fbbf 	bl	8000608 <__aeabi_dmul>
 800de8a:	4602      	mov	r2, r0
 800de8c:	460b      	mov	r3, r1
 800de8e:	4620      	mov	r0, r4
 800de90:	4629      	mov	r1, r5
 800de92:	e6c6      	b.n	800dc22 <__ieee754_asin+0x4a>
 800de94:	f3af 8000 	nop.w
 800de98:	54442d18 	.word	0x54442d18
 800de9c:	3ff921fb 	.word	0x3ff921fb
 800dea0:	33145c07 	.word	0x33145c07
 800dea4:	3c91a626 	.word	0x3c91a626
 800dea8:	8800759c 	.word	0x8800759c
 800deac:	7e37e43c 	.word	0x7e37e43c
 800deb0:	0dfdf709 	.word	0x0dfdf709
 800deb4:	3f023de1 	.word	0x3f023de1
 800deb8:	7501b288 	.word	0x7501b288
 800debc:	3f49efe0 	.word	0x3f49efe0
 800dec0:	b5688f3b 	.word	0xb5688f3b
 800dec4:	3fa48228 	.word	0x3fa48228
 800dec8:	0e884455 	.word	0x0e884455
 800decc:	3fc9c155 	.word	0x3fc9c155
 800ded0:	03eb6f7d 	.word	0x03eb6f7d
 800ded4:	3fd4d612 	.word	0x3fd4d612
 800ded8:	55555555 	.word	0x55555555
 800dedc:	3fc55555 	.word	0x3fc55555
 800dee0:	b12e9282 	.word	0xb12e9282
 800dee4:	3fb3b8c5 	.word	0x3fb3b8c5
 800dee8:	1b8d0159 	.word	0x1b8d0159
 800deec:	3fe6066c 	.word	0x3fe6066c
 800def0:	9c598ac8 	.word	0x9c598ac8
 800def4:	40002ae5 	.word	0x40002ae5
 800def8:	1c8a2d4b 	.word	0x1c8a2d4b
 800defc:	40033a27 	.word	0x40033a27
 800df00:	3fefffff 	.word	0x3fefffff
 800df04:	3fdfffff 	.word	0x3fdfffff
 800df08:	3ff00000 	.word	0x3ff00000
 800df0c:	3fe00000 	.word	0x3fe00000
 800df10:	3fef3332 	.word	0x3fef3332
 800df14:	4652      	mov	r2, sl
 800df16:	465b      	mov	r3, fp
 800df18:	4650      	mov	r0, sl
 800df1a:	4659      	mov	r1, fp
 800df1c:	f7f2 f9be 	bl	800029c <__adddf3>
 800df20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df24:	4606      	mov	r6, r0
 800df26:	460f      	mov	r7, r1
 800df28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df2c:	f7f2 fc96 	bl	800085c <__aeabi_ddiv>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4630      	mov	r0, r6
 800df36:	4639      	mov	r1, r7
 800df38:	f7f2 fb66 	bl	8000608 <__aeabi_dmul>
 800df3c:	f04f 0800 	mov.w	r8, #0
 800df40:	4606      	mov	r6, r0
 800df42:	460f      	mov	r7, r1
 800df44:	4642      	mov	r2, r8
 800df46:	465b      	mov	r3, fp
 800df48:	4640      	mov	r0, r8
 800df4a:	4659      	mov	r1, fp
 800df4c:	f7f2 fb5c 	bl	8000608 <__aeabi_dmul>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	4620      	mov	r0, r4
 800df56:	4629      	mov	r1, r5
 800df58:	f7f2 f99e 	bl	8000298 <__aeabi_dsub>
 800df5c:	4642      	mov	r2, r8
 800df5e:	4604      	mov	r4, r0
 800df60:	460d      	mov	r5, r1
 800df62:	465b      	mov	r3, fp
 800df64:	4650      	mov	r0, sl
 800df66:	4659      	mov	r1, fp
 800df68:	f7f2 f998 	bl	800029c <__adddf3>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	4620      	mov	r0, r4
 800df72:	4629      	mov	r1, r5
 800df74:	f7f2 fc72 	bl	800085c <__aeabi_ddiv>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	f7f2 f98e 	bl	800029c <__adddf3>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	a112      	add	r1, pc, #72	@ (adr r1, 800dfd0 <__ieee754_asin+0x3f8>)
 800df86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df8a:	f7f2 f985 	bl	8000298 <__aeabi_dsub>
 800df8e:	4602      	mov	r2, r0
 800df90:	460b      	mov	r3, r1
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 f97f 	bl	8000298 <__aeabi_dsub>
 800df9a:	4642      	mov	r2, r8
 800df9c:	4604      	mov	r4, r0
 800df9e:	460d      	mov	r5, r1
 800dfa0:	465b      	mov	r3, fp
 800dfa2:	4640      	mov	r0, r8
 800dfa4:	4659      	mov	r1, fp
 800dfa6:	f7f2 f979 	bl	800029c <__adddf3>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	a10a      	add	r1, pc, #40	@ (adr r1, 800dfd8 <__ieee754_asin+0x400>)
 800dfb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfb4:	f7f2 f970 	bl	8000298 <__aeabi_dsub>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	f7f2 f96a 	bl	8000298 <__aeabi_dsub>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	a103      	add	r1, pc, #12	@ (adr r1, 800dfd8 <__ieee754_asin+0x400>)
 800dfca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfce:	e6e2      	b.n	800dd96 <__ieee754_asin+0x1be>
 800dfd0:	33145c07 	.word	0x33145c07
 800dfd4:	3c91a626 	.word	0x3c91a626
 800dfd8:	54442d18 	.word	0x54442d18
 800dfdc:	3fe921fb 	.word	0x3fe921fb

0800dfe0 <__ieee754_atan2>:
 800dfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe4:	ec57 6b11 	vmov	r6, r7, d1
 800dfe8:	4273      	negs	r3, r6
 800dfea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e168 <__ieee754_atan2+0x188>
 800dfee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800dff2:	4333      	orrs	r3, r6
 800dff4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dff8:	4543      	cmp	r3, r8
 800dffa:	ec51 0b10 	vmov	r0, r1, d0
 800dffe:	4635      	mov	r5, r6
 800e000:	d809      	bhi.n	800e016 <__ieee754_atan2+0x36>
 800e002:	4244      	negs	r4, r0
 800e004:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e008:	4304      	orrs	r4, r0
 800e00a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e00e:	4544      	cmp	r4, r8
 800e010:	468e      	mov	lr, r1
 800e012:	4681      	mov	r9, r0
 800e014:	d907      	bls.n	800e026 <__ieee754_atan2+0x46>
 800e016:	4632      	mov	r2, r6
 800e018:	463b      	mov	r3, r7
 800e01a:	f7f2 f93f 	bl	800029c <__adddf3>
 800e01e:	ec41 0b10 	vmov	d0, r0, r1
 800e022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e026:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e02a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e02e:	4334      	orrs	r4, r6
 800e030:	d103      	bne.n	800e03a <__ieee754_atan2+0x5a>
 800e032:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e036:	f000 bfdb 	b.w	800eff0 <atan>
 800e03a:	17bc      	asrs	r4, r7, #30
 800e03c:	f004 0402 	and.w	r4, r4, #2
 800e040:	ea53 0909 	orrs.w	r9, r3, r9
 800e044:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e048:	d107      	bne.n	800e05a <__ieee754_atan2+0x7a>
 800e04a:	2c02      	cmp	r4, #2
 800e04c:	d05f      	beq.n	800e10e <__ieee754_atan2+0x12e>
 800e04e:	2c03      	cmp	r4, #3
 800e050:	d1e5      	bne.n	800e01e <__ieee754_atan2+0x3e>
 800e052:	a141      	add	r1, pc, #260	@ (adr r1, 800e158 <__ieee754_atan2+0x178>)
 800e054:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e058:	e7e1      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e05a:	4315      	orrs	r5, r2
 800e05c:	d106      	bne.n	800e06c <__ieee754_atan2+0x8c>
 800e05e:	f1be 0f00 	cmp.w	lr, #0
 800e062:	da5f      	bge.n	800e124 <__ieee754_atan2+0x144>
 800e064:	a13e      	add	r1, pc, #248	@ (adr r1, 800e160 <__ieee754_atan2+0x180>)
 800e066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e06a:	e7d8      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e06c:	4542      	cmp	r2, r8
 800e06e:	d10f      	bne.n	800e090 <__ieee754_atan2+0xb0>
 800e070:	4293      	cmp	r3, r2
 800e072:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800e076:	d107      	bne.n	800e088 <__ieee754_atan2+0xa8>
 800e078:	2c02      	cmp	r4, #2
 800e07a:	d84c      	bhi.n	800e116 <__ieee754_atan2+0x136>
 800e07c:	4b34      	ldr	r3, [pc, #208]	@ (800e150 <__ieee754_atan2+0x170>)
 800e07e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e082:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e086:	e7ca      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e088:	2c02      	cmp	r4, #2
 800e08a:	d848      	bhi.n	800e11e <__ieee754_atan2+0x13e>
 800e08c:	4b31      	ldr	r3, [pc, #196]	@ (800e154 <__ieee754_atan2+0x174>)
 800e08e:	e7f6      	b.n	800e07e <__ieee754_atan2+0x9e>
 800e090:	4543      	cmp	r3, r8
 800e092:	d0e4      	beq.n	800e05e <__ieee754_atan2+0x7e>
 800e094:	1a9b      	subs	r3, r3, r2
 800e096:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e09a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e09e:	da1e      	bge.n	800e0de <__ieee754_atan2+0xfe>
 800e0a0:	2f00      	cmp	r7, #0
 800e0a2:	da01      	bge.n	800e0a8 <__ieee754_atan2+0xc8>
 800e0a4:	323c      	adds	r2, #60	@ 0x3c
 800e0a6:	db1e      	blt.n	800e0e6 <__ieee754_atan2+0x106>
 800e0a8:	4632      	mov	r2, r6
 800e0aa:	463b      	mov	r3, r7
 800e0ac:	f7f2 fbd6 	bl	800085c <__aeabi_ddiv>
 800e0b0:	ec41 0b10 	vmov	d0, r0, r1
 800e0b4:	f7ff f870 	bl	800d198 <fabs>
 800e0b8:	f000 ff9a 	bl	800eff0 <atan>
 800e0bc:	ec51 0b10 	vmov	r0, r1, d0
 800e0c0:	2c01      	cmp	r4, #1
 800e0c2:	d013      	beq.n	800e0ec <__ieee754_atan2+0x10c>
 800e0c4:	2c02      	cmp	r4, #2
 800e0c6:	d015      	beq.n	800e0f4 <__ieee754_atan2+0x114>
 800e0c8:	2c00      	cmp	r4, #0
 800e0ca:	d0a8      	beq.n	800e01e <__ieee754_atan2+0x3e>
 800e0cc:	a318      	add	r3, pc, #96	@ (adr r3, 800e130 <__ieee754_atan2+0x150>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	f7f2 f8e1 	bl	8000298 <__aeabi_dsub>
 800e0d6:	a318      	add	r3, pc, #96	@ (adr r3, 800e138 <__ieee754_atan2+0x158>)
 800e0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0dc:	e014      	b.n	800e108 <__ieee754_atan2+0x128>
 800e0de:	a118      	add	r1, pc, #96	@ (adr r1, 800e140 <__ieee754_atan2+0x160>)
 800e0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0e4:	e7ec      	b.n	800e0c0 <__ieee754_atan2+0xe0>
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	e7e9      	b.n	800e0c0 <__ieee754_atan2+0xe0>
 800e0ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	e794      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e0f4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e130 <__ieee754_atan2+0x150>)
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	f7f2 f8cd 	bl	8000298 <__aeabi_dsub>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	a10d      	add	r1, pc, #52	@ (adr r1, 800e138 <__ieee754_atan2+0x158>)
 800e104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e108:	f7f2 f8c6 	bl	8000298 <__aeabi_dsub>
 800e10c:	e787      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e10e:	a10a      	add	r1, pc, #40	@ (adr r1, 800e138 <__ieee754_atan2+0x158>)
 800e110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e114:	e783      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e116:	a10c      	add	r1, pc, #48	@ (adr r1, 800e148 <__ieee754_atan2+0x168>)
 800e118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e11c:	e77f      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e11e:	2000      	movs	r0, #0
 800e120:	2100      	movs	r1, #0
 800e122:	e77c      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e124:	a106      	add	r1, pc, #24	@ (adr r1, 800e140 <__ieee754_atan2+0x160>)
 800e126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e12a:	e778      	b.n	800e01e <__ieee754_atan2+0x3e>
 800e12c:	f3af 8000 	nop.w
 800e130:	33145c07 	.word	0x33145c07
 800e134:	3ca1a626 	.word	0x3ca1a626
 800e138:	54442d18 	.word	0x54442d18
 800e13c:	400921fb 	.word	0x400921fb
 800e140:	54442d18 	.word	0x54442d18
 800e144:	3ff921fb 	.word	0x3ff921fb
 800e148:	54442d18 	.word	0x54442d18
 800e14c:	3fe921fb 	.word	0x3fe921fb
 800e150:	08010538 	.word	0x08010538
 800e154:	08010520 	.word	0x08010520
 800e158:	54442d18 	.word	0x54442d18
 800e15c:	c00921fb 	.word	0xc00921fb
 800e160:	54442d18 	.word	0x54442d18
 800e164:	bff921fb 	.word	0xbff921fb
 800e168:	7ff00000 	.word	0x7ff00000
 800e16c:	00000000 	.word	0x00000000

0800e170 <__ieee754_pow>:
 800e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e174:	b091      	sub	sp, #68	@ 0x44
 800e176:	ed8d 1b00 	vstr	d1, [sp]
 800e17a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e17e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e182:	ea5a 0001 	orrs.w	r0, sl, r1
 800e186:	ec57 6b10 	vmov	r6, r7, d0
 800e18a:	d113      	bne.n	800e1b4 <__ieee754_pow+0x44>
 800e18c:	19b3      	adds	r3, r6, r6
 800e18e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e192:	4152      	adcs	r2, r2
 800e194:	4298      	cmp	r0, r3
 800e196:	4b98      	ldr	r3, [pc, #608]	@ (800e3f8 <__ieee754_pow+0x288>)
 800e198:	4193      	sbcs	r3, r2
 800e19a:	f080 84ea 	bcs.w	800eb72 <__ieee754_pow+0xa02>
 800e19e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	4639      	mov	r1, r7
 800e1a6:	f7f2 f879 	bl	800029c <__adddf3>
 800e1aa:	ec41 0b10 	vmov	d0, r0, r1
 800e1ae:	b011      	add	sp, #68	@ 0x44
 800e1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b4:	4a91      	ldr	r2, [pc, #580]	@ (800e3fc <__ieee754_pow+0x28c>)
 800e1b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e1ba:	4590      	cmp	r8, r2
 800e1bc:	463d      	mov	r5, r7
 800e1be:	4633      	mov	r3, r6
 800e1c0:	d806      	bhi.n	800e1d0 <__ieee754_pow+0x60>
 800e1c2:	d101      	bne.n	800e1c8 <__ieee754_pow+0x58>
 800e1c4:	2e00      	cmp	r6, #0
 800e1c6:	d1ea      	bne.n	800e19e <__ieee754_pow+0x2e>
 800e1c8:	4592      	cmp	sl, r2
 800e1ca:	d801      	bhi.n	800e1d0 <__ieee754_pow+0x60>
 800e1cc:	d10e      	bne.n	800e1ec <__ieee754_pow+0x7c>
 800e1ce:	b169      	cbz	r1, 800e1ec <__ieee754_pow+0x7c>
 800e1d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e1d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e1d8:	431d      	orrs	r5, r3
 800e1da:	d1e0      	bne.n	800e19e <__ieee754_pow+0x2e>
 800e1dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1e0:	18db      	adds	r3, r3, r3
 800e1e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e1e6:	4152      	adcs	r2, r2
 800e1e8:	429d      	cmp	r5, r3
 800e1ea:	e7d4      	b.n	800e196 <__ieee754_pow+0x26>
 800e1ec:	2d00      	cmp	r5, #0
 800e1ee:	46c3      	mov	fp, r8
 800e1f0:	da3a      	bge.n	800e268 <__ieee754_pow+0xf8>
 800e1f2:	4a83      	ldr	r2, [pc, #524]	@ (800e400 <__ieee754_pow+0x290>)
 800e1f4:	4592      	cmp	sl, r2
 800e1f6:	d84d      	bhi.n	800e294 <__ieee754_pow+0x124>
 800e1f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e1fc:	4592      	cmp	sl, r2
 800e1fe:	f240 84c7 	bls.w	800eb90 <__ieee754_pow+0xa20>
 800e202:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e206:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e20a:	2a14      	cmp	r2, #20
 800e20c:	dd0f      	ble.n	800e22e <__ieee754_pow+0xbe>
 800e20e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e212:	fa21 f402 	lsr.w	r4, r1, r2
 800e216:	fa04 f202 	lsl.w	r2, r4, r2
 800e21a:	428a      	cmp	r2, r1
 800e21c:	f040 84b8 	bne.w	800eb90 <__ieee754_pow+0xa20>
 800e220:	f004 0401 	and.w	r4, r4, #1
 800e224:	f1c4 0402 	rsb	r4, r4, #2
 800e228:	2900      	cmp	r1, #0
 800e22a:	d158      	bne.n	800e2de <__ieee754_pow+0x16e>
 800e22c:	e00e      	b.n	800e24c <__ieee754_pow+0xdc>
 800e22e:	2900      	cmp	r1, #0
 800e230:	d154      	bne.n	800e2dc <__ieee754_pow+0x16c>
 800e232:	f1c2 0214 	rsb	r2, r2, #20
 800e236:	fa4a f402 	asr.w	r4, sl, r2
 800e23a:	fa04 f202 	lsl.w	r2, r4, r2
 800e23e:	4552      	cmp	r2, sl
 800e240:	f040 84a3 	bne.w	800eb8a <__ieee754_pow+0xa1a>
 800e244:	f004 0401 	and.w	r4, r4, #1
 800e248:	f1c4 0402 	rsb	r4, r4, #2
 800e24c:	4a6d      	ldr	r2, [pc, #436]	@ (800e404 <__ieee754_pow+0x294>)
 800e24e:	4592      	cmp	sl, r2
 800e250:	d12e      	bne.n	800e2b0 <__ieee754_pow+0x140>
 800e252:	f1b9 0f00 	cmp.w	r9, #0
 800e256:	f280 8494 	bge.w	800eb82 <__ieee754_pow+0xa12>
 800e25a:	496a      	ldr	r1, [pc, #424]	@ (800e404 <__ieee754_pow+0x294>)
 800e25c:	4632      	mov	r2, r6
 800e25e:	463b      	mov	r3, r7
 800e260:	2000      	movs	r0, #0
 800e262:	f7f2 fafb 	bl	800085c <__aeabi_ddiv>
 800e266:	e7a0      	b.n	800e1aa <__ieee754_pow+0x3a>
 800e268:	2400      	movs	r4, #0
 800e26a:	bbc1      	cbnz	r1, 800e2de <__ieee754_pow+0x16e>
 800e26c:	4a63      	ldr	r2, [pc, #396]	@ (800e3fc <__ieee754_pow+0x28c>)
 800e26e:	4592      	cmp	sl, r2
 800e270:	d1ec      	bne.n	800e24c <__ieee754_pow+0xdc>
 800e272:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e276:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e27a:	431a      	orrs	r2, r3
 800e27c:	f000 8479 	beq.w	800eb72 <__ieee754_pow+0xa02>
 800e280:	4b61      	ldr	r3, [pc, #388]	@ (800e408 <__ieee754_pow+0x298>)
 800e282:	4598      	cmp	r8, r3
 800e284:	d908      	bls.n	800e298 <__ieee754_pow+0x128>
 800e286:	f1b9 0f00 	cmp.w	r9, #0
 800e28a:	f2c0 8476 	blt.w	800eb7a <__ieee754_pow+0xa0a>
 800e28e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e292:	e78a      	b.n	800e1aa <__ieee754_pow+0x3a>
 800e294:	2402      	movs	r4, #2
 800e296:	e7e8      	b.n	800e26a <__ieee754_pow+0xfa>
 800e298:	f1b9 0f00 	cmp.w	r9, #0
 800e29c:	f04f 0000 	mov.w	r0, #0
 800e2a0:	f04f 0100 	mov.w	r1, #0
 800e2a4:	da81      	bge.n	800e1aa <__ieee754_pow+0x3a>
 800e2a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e2aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e2ae:	e77c      	b.n	800e1aa <__ieee754_pow+0x3a>
 800e2b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e2b4:	d106      	bne.n	800e2c4 <__ieee754_pow+0x154>
 800e2b6:	4632      	mov	r2, r6
 800e2b8:	463b      	mov	r3, r7
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f2 f9a3 	bl	8000608 <__aeabi_dmul>
 800e2c2:	e772      	b.n	800e1aa <__ieee754_pow+0x3a>
 800e2c4:	4a51      	ldr	r2, [pc, #324]	@ (800e40c <__ieee754_pow+0x29c>)
 800e2c6:	4591      	cmp	r9, r2
 800e2c8:	d109      	bne.n	800e2de <__ieee754_pow+0x16e>
 800e2ca:	2d00      	cmp	r5, #0
 800e2cc:	db07      	blt.n	800e2de <__ieee754_pow+0x16e>
 800e2ce:	ec47 6b10 	vmov	d0, r6, r7
 800e2d2:	b011      	add	sp, #68	@ 0x44
 800e2d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d8:	f7ff b818 	b.w	800d30c <__ieee754_sqrt>
 800e2dc:	2400      	movs	r4, #0
 800e2de:	ec47 6b10 	vmov	d0, r6, r7
 800e2e2:	9302      	str	r3, [sp, #8]
 800e2e4:	f7fe ff58 	bl	800d198 <fabs>
 800e2e8:	9b02      	ldr	r3, [sp, #8]
 800e2ea:	ec51 0b10 	vmov	r0, r1, d0
 800e2ee:	bb53      	cbnz	r3, 800e346 <__ieee754_pow+0x1d6>
 800e2f0:	4b44      	ldr	r3, [pc, #272]	@ (800e404 <__ieee754_pow+0x294>)
 800e2f2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d002      	beq.n	800e300 <__ieee754_pow+0x190>
 800e2fa:	f1b8 0f00 	cmp.w	r8, #0
 800e2fe:	d122      	bne.n	800e346 <__ieee754_pow+0x1d6>
 800e300:	f1b9 0f00 	cmp.w	r9, #0
 800e304:	da05      	bge.n	800e312 <__ieee754_pow+0x1a2>
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	2000      	movs	r0, #0
 800e30c:	493d      	ldr	r1, [pc, #244]	@ (800e404 <__ieee754_pow+0x294>)
 800e30e:	f7f2 faa5 	bl	800085c <__aeabi_ddiv>
 800e312:	2d00      	cmp	r5, #0
 800e314:	f6bf af49 	bge.w	800e1aa <__ieee754_pow+0x3a>
 800e318:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e31c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e320:	ea58 0804 	orrs.w	r8, r8, r4
 800e324:	d108      	bne.n	800e338 <__ieee754_pow+0x1c8>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	4610      	mov	r0, r2
 800e32c:	4619      	mov	r1, r3
 800e32e:	f7f1 ffb3 	bl	8000298 <__aeabi_dsub>
 800e332:	4602      	mov	r2, r0
 800e334:	460b      	mov	r3, r1
 800e336:	e794      	b.n	800e262 <__ieee754_pow+0xf2>
 800e338:	2c01      	cmp	r4, #1
 800e33a:	f47f af36 	bne.w	800e1aa <__ieee754_pow+0x3a>
 800e33e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e342:	4619      	mov	r1, r3
 800e344:	e731      	b.n	800e1aa <__ieee754_pow+0x3a>
 800e346:	0feb      	lsrs	r3, r5, #31
 800e348:	3b01      	subs	r3, #1
 800e34a:	ea53 0204 	orrs.w	r2, r3, r4
 800e34e:	d102      	bne.n	800e356 <__ieee754_pow+0x1e6>
 800e350:	4632      	mov	r2, r6
 800e352:	463b      	mov	r3, r7
 800e354:	e7e9      	b.n	800e32a <__ieee754_pow+0x1ba>
 800e356:	3c01      	subs	r4, #1
 800e358:	431c      	orrs	r4, r3
 800e35a:	d016      	beq.n	800e38a <__ieee754_pow+0x21a>
 800e35c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e3e8 <__ieee754_pow+0x278>
 800e360:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e364:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e368:	f240 8112 	bls.w	800e590 <__ieee754_pow+0x420>
 800e36c:	4b28      	ldr	r3, [pc, #160]	@ (800e410 <__ieee754_pow+0x2a0>)
 800e36e:	459a      	cmp	sl, r3
 800e370:	4b25      	ldr	r3, [pc, #148]	@ (800e408 <__ieee754_pow+0x298>)
 800e372:	d916      	bls.n	800e3a2 <__ieee754_pow+0x232>
 800e374:	4598      	cmp	r8, r3
 800e376:	d80b      	bhi.n	800e390 <__ieee754_pow+0x220>
 800e378:	f1b9 0f00 	cmp.w	r9, #0
 800e37c:	da0b      	bge.n	800e396 <__ieee754_pow+0x226>
 800e37e:	2000      	movs	r0, #0
 800e380:	b011      	add	sp, #68	@ 0x44
 800e382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e386:	f001 b87f 	b.w	800f488 <__math_oflow>
 800e38a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e3f0 <__ieee754_pow+0x280>
 800e38e:	e7e7      	b.n	800e360 <__ieee754_pow+0x1f0>
 800e390:	f1b9 0f00 	cmp.w	r9, #0
 800e394:	dcf3      	bgt.n	800e37e <__ieee754_pow+0x20e>
 800e396:	2000      	movs	r0, #0
 800e398:	b011      	add	sp, #68	@ 0x44
 800e39a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39e:	f001 b86b 	b.w	800f478 <__math_uflow>
 800e3a2:	4598      	cmp	r8, r3
 800e3a4:	d20c      	bcs.n	800e3c0 <__ieee754_pow+0x250>
 800e3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f7f2 fb9d 	bl	8000aec <__aeabi_dcmplt>
 800e3b2:	3800      	subs	r0, #0
 800e3b4:	bf18      	it	ne
 800e3b6:	2001      	movne	r0, #1
 800e3b8:	f1b9 0f00 	cmp.w	r9, #0
 800e3bc:	daec      	bge.n	800e398 <__ieee754_pow+0x228>
 800e3be:	e7df      	b.n	800e380 <__ieee754_pow+0x210>
 800e3c0:	4b10      	ldr	r3, [pc, #64]	@ (800e404 <__ieee754_pow+0x294>)
 800e3c2:	4598      	cmp	r8, r3
 800e3c4:	f04f 0200 	mov.w	r2, #0
 800e3c8:	d924      	bls.n	800e414 <__ieee754_pow+0x2a4>
 800e3ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f7f2 fb8c 	bl	8000aec <__aeabi_dcmplt>
 800e3d4:	3800      	subs	r0, #0
 800e3d6:	bf18      	it	ne
 800e3d8:	2001      	movne	r0, #1
 800e3da:	f1b9 0f00 	cmp.w	r9, #0
 800e3de:	dccf      	bgt.n	800e380 <__ieee754_pow+0x210>
 800e3e0:	e7da      	b.n	800e398 <__ieee754_pow+0x228>
 800e3e2:	bf00      	nop
 800e3e4:	f3af 8000 	nop.w
 800e3e8:	00000000 	.word	0x00000000
 800e3ec:	3ff00000 	.word	0x3ff00000
 800e3f0:	00000000 	.word	0x00000000
 800e3f4:	bff00000 	.word	0xbff00000
 800e3f8:	fff00000 	.word	0xfff00000
 800e3fc:	7ff00000 	.word	0x7ff00000
 800e400:	433fffff 	.word	0x433fffff
 800e404:	3ff00000 	.word	0x3ff00000
 800e408:	3fefffff 	.word	0x3fefffff
 800e40c:	3fe00000 	.word	0x3fe00000
 800e410:	43f00000 	.word	0x43f00000
 800e414:	4b5a      	ldr	r3, [pc, #360]	@ (800e580 <__ieee754_pow+0x410>)
 800e416:	f7f1 ff3f 	bl	8000298 <__aeabi_dsub>
 800e41a:	a351      	add	r3, pc, #324	@ (adr r3, 800e560 <__ieee754_pow+0x3f0>)
 800e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e420:	4604      	mov	r4, r0
 800e422:	460d      	mov	r5, r1
 800e424:	f7f2 f8f0 	bl	8000608 <__aeabi_dmul>
 800e428:	a34f      	add	r3, pc, #316	@ (adr r3, 800e568 <__ieee754_pow+0x3f8>)
 800e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42e:	4606      	mov	r6, r0
 800e430:	460f      	mov	r7, r1
 800e432:	4620      	mov	r0, r4
 800e434:	4629      	mov	r1, r5
 800e436:	f7f2 f8e7 	bl	8000608 <__aeabi_dmul>
 800e43a:	4b52      	ldr	r3, [pc, #328]	@ (800e584 <__ieee754_pow+0x414>)
 800e43c:	4682      	mov	sl, r0
 800e43e:	468b      	mov	fp, r1
 800e440:	2200      	movs	r2, #0
 800e442:	4620      	mov	r0, r4
 800e444:	4629      	mov	r1, r5
 800e446:	f7f2 f8df 	bl	8000608 <__aeabi_dmul>
 800e44a:	4602      	mov	r2, r0
 800e44c:	460b      	mov	r3, r1
 800e44e:	a148      	add	r1, pc, #288	@ (adr r1, 800e570 <__ieee754_pow+0x400>)
 800e450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e454:	f7f1 ff20 	bl	8000298 <__aeabi_dsub>
 800e458:	4622      	mov	r2, r4
 800e45a:	462b      	mov	r3, r5
 800e45c:	f7f2 f8d4 	bl	8000608 <__aeabi_dmul>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	2000      	movs	r0, #0
 800e466:	4948      	ldr	r1, [pc, #288]	@ (800e588 <__ieee754_pow+0x418>)
 800e468:	f7f1 ff16 	bl	8000298 <__aeabi_dsub>
 800e46c:	4622      	mov	r2, r4
 800e46e:	4680      	mov	r8, r0
 800e470:	4689      	mov	r9, r1
 800e472:	462b      	mov	r3, r5
 800e474:	4620      	mov	r0, r4
 800e476:	4629      	mov	r1, r5
 800e478:	f7f2 f8c6 	bl	8000608 <__aeabi_dmul>
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	4640      	mov	r0, r8
 800e482:	4649      	mov	r1, r9
 800e484:	f7f2 f8c0 	bl	8000608 <__aeabi_dmul>
 800e488:	a33b      	add	r3, pc, #236	@ (adr r3, 800e578 <__ieee754_pow+0x408>)
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	f7f2 f8bb 	bl	8000608 <__aeabi_dmul>
 800e492:	4602      	mov	r2, r0
 800e494:	460b      	mov	r3, r1
 800e496:	4650      	mov	r0, sl
 800e498:	4659      	mov	r1, fp
 800e49a:	f7f1 fefd 	bl	8000298 <__aeabi_dsub>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4680      	mov	r8, r0
 800e4a4:	4689      	mov	r9, r1
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	4639      	mov	r1, r7
 800e4aa:	f7f1 fef7 	bl	800029c <__adddf3>
 800e4ae:	2400      	movs	r4, #0
 800e4b0:	4632      	mov	r2, r6
 800e4b2:	463b      	mov	r3, r7
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	460d      	mov	r5, r1
 800e4b8:	f7f1 feee 	bl	8000298 <__aeabi_dsub>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	4649      	mov	r1, r9
 800e4c4:	f7f1 fee8 	bl	8000298 <__aeabi_dsub>
 800e4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	9304      	str	r3, [sp, #16]
 800e4d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e4d8:	4606      	mov	r6, r0
 800e4da:	460f      	mov	r7, r1
 800e4dc:	4652      	mov	r2, sl
 800e4de:	465b      	mov	r3, fp
 800e4e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4e4:	f7f1 fed8 	bl	8000298 <__aeabi_dsub>
 800e4e8:	4622      	mov	r2, r4
 800e4ea:	462b      	mov	r3, r5
 800e4ec:	f7f2 f88c 	bl	8000608 <__aeabi_dmul>
 800e4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4f4:	4680      	mov	r8, r0
 800e4f6:	4689      	mov	r9, r1
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	4639      	mov	r1, r7
 800e4fc:	f7f2 f884 	bl	8000608 <__aeabi_dmul>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4640      	mov	r0, r8
 800e506:	4649      	mov	r1, r9
 800e508:	f7f1 fec8 	bl	800029c <__adddf3>
 800e50c:	4652      	mov	r2, sl
 800e50e:	465b      	mov	r3, fp
 800e510:	4606      	mov	r6, r0
 800e512:	460f      	mov	r7, r1
 800e514:	4620      	mov	r0, r4
 800e516:	4629      	mov	r1, r5
 800e518:	f7f2 f876 	bl	8000608 <__aeabi_dmul>
 800e51c:	460b      	mov	r3, r1
 800e51e:	4602      	mov	r2, r0
 800e520:	4680      	mov	r8, r0
 800e522:	4689      	mov	r9, r1
 800e524:	4630      	mov	r0, r6
 800e526:	4639      	mov	r1, r7
 800e528:	f7f1 feb8 	bl	800029c <__adddf3>
 800e52c:	4b17      	ldr	r3, [pc, #92]	@ (800e58c <__ieee754_pow+0x41c>)
 800e52e:	4299      	cmp	r1, r3
 800e530:	4604      	mov	r4, r0
 800e532:	460d      	mov	r5, r1
 800e534:	468a      	mov	sl, r1
 800e536:	468b      	mov	fp, r1
 800e538:	f340 82ef 	ble.w	800eb1a <__ieee754_pow+0x9aa>
 800e53c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e540:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e544:	4303      	orrs	r3, r0
 800e546:	f000 81e8 	beq.w	800e91a <__ieee754_pow+0x7aa>
 800e54a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e54e:	2200      	movs	r2, #0
 800e550:	2300      	movs	r3, #0
 800e552:	f7f2 facb 	bl	8000aec <__aeabi_dcmplt>
 800e556:	3800      	subs	r0, #0
 800e558:	bf18      	it	ne
 800e55a:	2001      	movne	r0, #1
 800e55c:	e710      	b.n	800e380 <__ieee754_pow+0x210>
 800e55e:	bf00      	nop
 800e560:	60000000 	.word	0x60000000
 800e564:	3ff71547 	.word	0x3ff71547
 800e568:	f85ddf44 	.word	0xf85ddf44
 800e56c:	3e54ae0b 	.word	0x3e54ae0b
 800e570:	55555555 	.word	0x55555555
 800e574:	3fd55555 	.word	0x3fd55555
 800e578:	652b82fe 	.word	0x652b82fe
 800e57c:	3ff71547 	.word	0x3ff71547
 800e580:	3ff00000 	.word	0x3ff00000
 800e584:	3fd00000 	.word	0x3fd00000
 800e588:	3fe00000 	.word	0x3fe00000
 800e58c:	408fffff 	.word	0x408fffff
 800e590:	4bd5      	ldr	r3, [pc, #852]	@ (800e8e8 <__ieee754_pow+0x778>)
 800e592:	402b      	ands	r3, r5
 800e594:	2200      	movs	r2, #0
 800e596:	b92b      	cbnz	r3, 800e5a4 <__ieee754_pow+0x434>
 800e598:	4bd4      	ldr	r3, [pc, #848]	@ (800e8ec <__ieee754_pow+0x77c>)
 800e59a:	f7f2 f835 	bl	8000608 <__aeabi_dmul>
 800e59e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e5a2:	468b      	mov	fp, r1
 800e5a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e5a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e5ac:	4413      	add	r3, r2
 800e5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5b0:	4bcf      	ldr	r3, [pc, #828]	@ (800e8f0 <__ieee754_pow+0x780>)
 800e5b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e5b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e5ba:	459b      	cmp	fp, r3
 800e5bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e5c0:	dd08      	ble.n	800e5d4 <__ieee754_pow+0x464>
 800e5c2:	4bcc      	ldr	r3, [pc, #816]	@ (800e8f4 <__ieee754_pow+0x784>)
 800e5c4:	459b      	cmp	fp, r3
 800e5c6:	f340 81a5 	ble.w	800e914 <__ieee754_pow+0x7a4>
 800e5ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e5d4:	f04f 0a00 	mov.w	sl, #0
 800e5d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e5dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5de:	4bc6      	ldr	r3, [pc, #792]	@ (800e8f8 <__ieee754_pow+0x788>)
 800e5e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5e4:	ed93 7b00 	vldr	d7, [r3]
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	ec53 2b17 	vmov	r2, r3, d7
 800e5ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e5f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e5f6:	f7f1 fe4f 	bl	8000298 <__aeabi_dsub>
 800e5fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e5fe:	4606      	mov	r6, r0
 800e600:	460f      	mov	r7, r1
 800e602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e606:	f7f1 fe49 	bl	800029c <__adddf3>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	2000      	movs	r0, #0
 800e610:	49ba      	ldr	r1, [pc, #744]	@ (800e8fc <__ieee754_pow+0x78c>)
 800e612:	f7f2 f923 	bl	800085c <__aeabi_ddiv>
 800e616:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	4630      	mov	r0, r6
 800e620:	4639      	mov	r1, r7
 800e622:	f7f1 fff1 	bl	8000608 <__aeabi_dmul>
 800e626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e62a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e62e:	106d      	asrs	r5, r5, #1
 800e630:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e634:	f04f 0b00 	mov.w	fp, #0
 800e638:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e63c:	4661      	mov	r1, ip
 800e63e:	2200      	movs	r2, #0
 800e640:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e644:	4658      	mov	r0, fp
 800e646:	46e1      	mov	r9, ip
 800e648:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e64c:	4614      	mov	r4, r2
 800e64e:	461d      	mov	r5, r3
 800e650:	f7f1 ffda 	bl	8000608 <__aeabi_dmul>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4630      	mov	r0, r6
 800e65a:	4639      	mov	r1, r7
 800e65c:	f7f1 fe1c 	bl	8000298 <__aeabi_dsub>
 800e660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e664:	4606      	mov	r6, r0
 800e666:	460f      	mov	r7, r1
 800e668:	4620      	mov	r0, r4
 800e66a:	4629      	mov	r1, r5
 800e66c:	f7f1 fe14 	bl	8000298 <__aeabi_dsub>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e678:	f7f1 fe0e 	bl	8000298 <__aeabi_dsub>
 800e67c:	465a      	mov	r2, fp
 800e67e:	464b      	mov	r3, r9
 800e680:	f7f1 ffc2 	bl	8000608 <__aeabi_dmul>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	4630      	mov	r0, r6
 800e68a:	4639      	mov	r1, r7
 800e68c:	f7f1 fe04 	bl	8000298 <__aeabi_dsub>
 800e690:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e694:	f7f1 ffb8 	bl	8000608 <__aeabi_dmul>
 800e698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e69c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	f7f1 ffb0 	bl	8000608 <__aeabi_dmul>
 800e6a8:	a37d      	add	r3, pc, #500	@ (adr r3, 800e8a0 <__ieee754_pow+0x730>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	460d      	mov	r5, r1
 800e6b2:	f7f1 ffa9 	bl	8000608 <__aeabi_dmul>
 800e6b6:	a37c      	add	r3, pc, #496	@ (adr r3, 800e8a8 <__ieee754_pow+0x738>)
 800e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6bc:	f7f1 fdee 	bl	800029c <__adddf3>
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	f7f1 ffa0 	bl	8000608 <__aeabi_dmul>
 800e6c8:	a379      	add	r3, pc, #484	@ (adr r3, 800e8b0 <__ieee754_pow+0x740>)
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	f7f1 fde5 	bl	800029c <__adddf3>
 800e6d2:	4622      	mov	r2, r4
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	f7f1 ff97 	bl	8000608 <__aeabi_dmul>
 800e6da:	a377      	add	r3, pc, #476	@ (adr r3, 800e8b8 <__ieee754_pow+0x748>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	f7f1 fddc 	bl	800029c <__adddf3>
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	462b      	mov	r3, r5
 800e6e8:	f7f1 ff8e 	bl	8000608 <__aeabi_dmul>
 800e6ec:	a374      	add	r3, pc, #464	@ (adr r3, 800e8c0 <__ieee754_pow+0x750>)
 800e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f2:	f7f1 fdd3 	bl	800029c <__adddf3>
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	462b      	mov	r3, r5
 800e6fa:	f7f1 ff85 	bl	8000608 <__aeabi_dmul>
 800e6fe:	a372      	add	r3, pc, #456	@ (adr r3, 800e8c8 <__ieee754_pow+0x758>)
 800e700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e704:	f7f1 fdca 	bl	800029c <__adddf3>
 800e708:	4622      	mov	r2, r4
 800e70a:	4606      	mov	r6, r0
 800e70c:	460f      	mov	r7, r1
 800e70e:	462b      	mov	r3, r5
 800e710:	4620      	mov	r0, r4
 800e712:	4629      	mov	r1, r5
 800e714:	f7f1 ff78 	bl	8000608 <__aeabi_dmul>
 800e718:	4602      	mov	r2, r0
 800e71a:	460b      	mov	r3, r1
 800e71c:	4630      	mov	r0, r6
 800e71e:	4639      	mov	r1, r7
 800e720:	f7f1 ff72 	bl	8000608 <__aeabi_dmul>
 800e724:	465a      	mov	r2, fp
 800e726:	4604      	mov	r4, r0
 800e728:	460d      	mov	r5, r1
 800e72a:	464b      	mov	r3, r9
 800e72c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e730:	f7f1 fdb4 	bl	800029c <__adddf3>
 800e734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e738:	f7f1 ff66 	bl	8000608 <__aeabi_dmul>
 800e73c:	4622      	mov	r2, r4
 800e73e:	462b      	mov	r3, r5
 800e740:	f7f1 fdac 	bl	800029c <__adddf3>
 800e744:	465a      	mov	r2, fp
 800e746:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e74a:	464b      	mov	r3, r9
 800e74c:	4658      	mov	r0, fp
 800e74e:	4649      	mov	r1, r9
 800e750:	f7f1 ff5a 	bl	8000608 <__aeabi_dmul>
 800e754:	4b6a      	ldr	r3, [pc, #424]	@ (800e900 <__ieee754_pow+0x790>)
 800e756:	2200      	movs	r2, #0
 800e758:	4606      	mov	r6, r0
 800e75a:	460f      	mov	r7, r1
 800e75c:	f7f1 fd9e 	bl	800029c <__adddf3>
 800e760:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e764:	f7f1 fd9a 	bl	800029c <__adddf3>
 800e768:	46d8      	mov	r8, fp
 800e76a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e76e:	460d      	mov	r5, r1
 800e770:	465a      	mov	r2, fp
 800e772:	460b      	mov	r3, r1
 800e774:	4640      	mov	r0, r8
 800e776:	4649      	mov	r1, r9
 800e778:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e77c:	f7f1 ff44 	bl	8000608 <__aeabi_dmul>
 800e780:	465c      	mov	r4, fp
 800e782:	4680      	mov	r8, r0
 800e784:	4689      	mov	r9, r1
 800e786:	4b5e      	ldr	r3, [pc, #376]	@ (800e900 <__ieee754_pow+0x790>)
 800e788:	2200      	movs	r2, #0
 800e78a:	4620      	mov	r0, r4
 800e78c:	4629      	mov	r1, r5
 800e78e:	f7f1 fd83 	bl	8000298 <__aeabi_dsub>
 800e792:	4632      	mov	r2, r6
 800e794:	463b      	mov	r3, r7
 800e796:	f7f1 fd7f 	bl	8000298 <__aeabi_dsub>
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7a2:	f7f1 fd79 	bl	8000298 <__aeabi_dsub>
 800e7a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7aa:	f7f1 ff2d 	bl	8000608 <__aeabi_dmul>
 800e7ae:	4622      	mov	r2, r4
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	460f      	mov	r7, r1
 800e7b4:	462b      	mov	r3, r5
 800e7b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7ba:	f7f1 ff25 	bl	8000608 <__aeabi_dmul>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	f7f1 fd69 	bl	800029c <__adddf3>
 800e7ca:	4606      	mov	r6, r0
 800e7cc:	460f      	mov	r7, r1
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f1 fd61 	bl	800029c <__adddf3>
 800e7da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e7de:	a33c      	add	r3, pc, #240	@ (adr r3, 800e8d0 <__ieee754_pow+0x760>)
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	4658      	mov	r0, fp
 800e7e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e7ea:	460d      	mov	r5, r1
 800e7ec:	f7f1 ff0c 	bl	8000608 <__aeabi_dmul>
 800e7f0:	465c      	mov	r4, fp
 800e7f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7f6:	4642      	mov	r2, r8
 800e7f8:	464b      	mov	r3, r9
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7f1 fd4b 	bl	8000298 <__aeabi_dsub>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4630      	mov	r0, r6
 800e808:	4639      	mov	r1, r7
 800e80a:	f7f1 fd45 	bl	8000298 <__aeabi_dsub>
 800e80e:	a332      	add	r3, pc, #200	@ (adr r3, 800e8d8 <__ieee754_pow+0x768>)
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f1 fef8 	bl	8000608 <__aeabi_dmul>
 800e818:	a331      	add	r3, pc, #196	@ (adr r3, 800e8e0 <__ieee754_pow+0x770>)
 800e81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81e:	4606      	mov	r6, r0
 800e820:	460f      	mov	r7, r1
 800e822:	4620      	mov	r0, r4
 800e824:	4629      	mov	r1, r5
 800e826:	f7f1 feef 	bl	8000608 <__aeabi_dmul>
 800e82a:	4602      	mov	r2, r0
 800e82c:	460b      	mov	r3, r1
 800e82e:	4630      	mov	r0, r6
 800e830:	4639      	mov	r1, r7
 800e832:	f7f1 fd33 	bl	800029c <__adddf3>
 800e836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e838:	4b32      	ldr	r3, [pc, #200]	@ (800e904 <__ieee754_pow+0x794>)
 800e83a:	4413      	add	r3, r2
 800e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e840:	f7f1 fd2c 	bl	800029c <__adddf3>
 800e844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e848:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e84a:	f7f1 fe73 	bl	8000534 <__aeabi_i2d>
 800e84e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e850:	4b2d      	ldr	r3, [pc, #180]	@ (800e908 <__ieee754_pow+0x798>)
 800e852:	4413      	add	r3, r2
 800e854:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e858:	4606      	mov	r6, r0
 800e85a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e85e:	460f      	mov	r7, r1
 800e860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e864:	f7f1 fd1a 	bl	800029c <__adddf3>
 800e868:	4642      	mov	r2, r8
 800e86a:	464b      	mov	r3, r9
 800e86c:	f7f1 fd16 	bl	800029c <__adddf3>
 800e870:	4632      	mov	r2, r6
 800e872:	463b      	mov	r3, r7
 800e874:	f7f1 fd12 	bl	800029c <__adddf3>
 800e878:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e87c:	4632      	mov	r2, r6
 800e87e:	463b      	mov	r3, r7
 800e880:	4658      	mov	r0, fp
 800e882:	460d      	mov	r5, r1
 800e884:	f7f1 fd08 	bl	8000298 <__aeabi_dsub>
 800e888:	4642      	mov	r2, r8
 800e88a:	464b      	mov	r3, r9
 800e88c:	f7f1 fd04 	bl	8000298 <__aeabi_dsub>
 800e890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e894:	f7f1 fd00 	bl	8000298 <__aeabi_dsub>
 800e898:	465c      	mov	r4, fp
 800e89a:	4602      	mov	r2, r0
 800e89c:	e036      	b.n	800e90c <__ieee754_pow+0x79c>
 800e89e:	bf00      	nop
 800e8a0:	4a454eef 	.word	0x4a454eef
 800e8a4:	3fca7e28 	.word	0x3fca7e28
 800e8a8:	93c9db65 	.word	0x93c9db65
 800e8ac:	3fcd864a 	.word	0x3fcd864a
 800e8b0:	a91d4101 	.word	0xa91d4101
 800e8b4:	3fd17460 	.word	0x3fd17460
 800e8b8:	518f264d 	.word	0x518f264d
 800e8bc:	3fd55555 	.word	0x3fd55555
 800e8c0:	db6fabff 	.word	0xdb6fabff
 800e8c4:	3fdb6db6 	.word	0x3fdb6db6
 800e8c8:	33333303 	.word	0x33333303
 800e8cc:	3fe33333 	.word	0x3fe33333
 800e8d0:	e0000000 	.word	0xe0000000
 800e8d4:	3feec709 	.word	0x3feec709
 800e8d8:	dc3a03fd 	.word	0xdc3a03fd
 800e8dc:	3feec709 	.word	0x3feec709
 800e8e0:	145b01f5 	.word	0x145b01f5
 800e8e4:	be3e2fe0 	.word	0xbe3e2fe0
 800e8e8:	7ff00000 	.word	0x7ff00000
 800e8ec:	43400000 	.word	0x43400000
 800e8f0:	0003988e 	.word	0x0003988e
 800e8f4:	000bb679 	.word	0x000bb679
 800e8f8:	08010570 	.word	0x08010570
 800e8fc:	3ff00000 	.word	0x3ff00000
 800e900:	40080000 	.word	0x40080000
 800e904:	08010550 	.word	0x08010550
 800e908:	08010560 	.word	0x08010560
 800e90c:	460b      	mov	r3, r1
 800e90e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e912:	e5d7      	b.n	800e4c4 <__ieee754_pow+0x354>
 800e914:	f04f 0a01 	mov.w	sl, #1
 800e918:	e65e      	b.n	800e5d8 <__ieee754_pow+0x468>
 800e91a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ebec <__ieee754_pow+0xa7c>)
 800e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e920:	4630      	mov	r0, r6
 800e922:	4639      	mov	r1, r7
 800e924:	f7f1 fcba 	bl	800029c <__adddf3>
 800e928:	4642      	mov	r2, r8
 800e92a:	e9cd 0100 	strd	r0, r1, [sp]
 800e92e:	464b      	mov	r3, r9
 800e930:	4620      	mov	r0, r4
 800e932:	4629      	mov	r1, r5
 800e934:	f7f1 fcb0 	bl	8000298 <__aeabi_dsub>
 800e938:	4602      	mov	r2, r0
 800e93a:	460b      	mov	r3, r1
 800e93c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e940:	f7f2 f8f2 	bl	8000b28 <__aeabi_dcmpgt>
 800e944:	2800      	cmp	r0, #0
 800e946:	f47f ae00 	bne.w	800e54a <__ieee754_pow+0x3da>
 800e94a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e94e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e952:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e956:	fa43 fa0a 	asr.w	sl, r3, sl
 800e95a:	44da      	add	sl, fp
 800e95c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e960:	489d      	ldr	r0, [pc, #628]	@ (800ebd8 <__ieee754_pow+0xa68>)
 800e962:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e966:	4108      	asrs	r0, r1
 800e968:	ea00 030a 	and.w	r3, r0, sl
 800e96c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e970:	f1c1 0114 	rsb	r1, r1, #20
 800e974:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e978:	fa4a fa01 	asr.w	sl, sl, r1
 800e97c:	f1bb 0f00 	cmp.w	fp, #0
 800e980:	4640      	mov	r0, r8
 800e982:	4649      	mov	r1, r9
 800e984:	f04f 0200 	mov.w	r2, #0
 800e988:	bfb8      	it	lt
 800e98a:	f1ca 0a00 	rsblt	sl, sl, #0
 800e98e:	f7f1 fc83 	bl	8000298 <__aeabi_dsub>
 800e992:	4680      	mov	r8, r0
 800e994:	4689      	mov	r9, r1
 800e996:	4632      	mov	r2, r6
 800e998:	463b      	mov	r3, r7
 800e99a:	4640      	mov	r0, r8
 800e99c:	4649      	mov	r1, r9
 800e99e:	f7f1 fc7d 	bl	800029c <__adddf3>
 800e9a2:	2400      	movs	r4, #0
 800e9a4:	a37c      	add	r3, pc, #496	@ (adr r3, 800eb98 <__ieee754_pow+0xa28>)
 800e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	f7f1 fe2b 	bl	8000608 <__aeabi_dmul>
 800e9b2:	4642      	mov	r2, r8
 800e9b4:	e9cd 0100 	strd	r0, r1, [sp]
 800e9b8:	464b      	mov	r3, r9
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	4629      	mov	r1, r5
 800e9be:	f7f1 fc6b 	bl	8000298 <__aeabi_dsub>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	f7f1 fc65 	bl	8000298 <__aeabi_dsub>
 800e9ce:	a374      	add	r3, pc, #464	@ (adr r3, 800eba0 <__ieee754_pow+0xa30>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	f7f1 fe18 	bl	8000608 <__aeabi_dmul>
 800e9d8:	a373      	add	r3, pc, #460	@ (adr r3, 800eba8 <__ieee754_pow+0xa38>)
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	4680      	mov	r8, r0
 800e9e0:	4689      	mov	r9, r1
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	f7f1 fe0f 	bl	8000608 <__aeabi_dmul>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	4649      	mov	r1, r9
 800e9f2:	f7f1 fc53 	bl	800029c <__adddf3>
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	460d      	mov	r5, r1
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea02:	f7f1 fc4b 	bl	800029c <__adddf3>
 800ea06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea0a:	4680      	mov	r8, r0
 800ea0c:	4689      	mov	r9, r1
 800ea0e:	f7f1 fc43 	bl	8000298 <__aeabi_dsub>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	4620      	mov	r0, r4
 800ea18:	4629      	mov	r1, r5
 800ea1a:	f7f1 fc3d 	bl	8000298 <__aeabi_dsub>
 800ea1e:	4642      	mov	r2, r8
 800ea20:	4606      	mov	r6, r0
 800ea22:	460f      	mov	r7, r1
 800ea24:	464b      	mov	r3, r9
 800ea26:	4640      	mov	r0, r8
 800ea28:	4649      	mov	r1, r9
 800ea2a:	f7f1 fded 	bl	8000608 <__aeabi_dmul>
 800ea2e:	a360      	add	r3, pc, #384	@ (adr r3, 800ebb0 <__ieee754_pow+0xa40>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	4604      	mov	r4, r0
 800ea36:	460d      	mov	r5, r1
 800ea38:	f7f1 fde6 	bl	8000608 <__aeabi_dmul>
 800ea3c:	a35e      	add	r3, pc, #376	@ (adr r3, 800ebb8 <__ieee754_pow+0xa48>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	f7f1 fc29 	bl	8000298 <__aeabi_dsub>
 800ea46:	4622      	mov	r2, r4
 800ea48:	462b      	mov	r3, r5
 800ea4a:	f7f1 fddd 	bl	8000608 <__aeabi_dmul>
 800ea4e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ebc0 <__ieee754_pow+0xa50>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	f7f1 fc22 	bl	800029c <__adddf3>
 800ea58:	4622      	mov	r2, r4
 800ea5a:	462b      	mov	r3, r5
 800ea5c:	f7f1 fdd4 	bl	8000608 <__aeabi_dmul>
 800ea60:	a359      	add	r3, pc, #356	@ (adr r3, 800ebc8 <__ieee754_pow+0xa58>)
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	f7f1 fc17 	bl	8000298 <__aeabi_dsub>
 800ea6a:	4622      	mov	r2, r4
 800ea6c:	462b      	mov	r3, r5
 800ea6e:	f7f1 fdcb 	bl	8000608 <__aeabi_dmul>
 800ea72:	a357      	add	r3, pc, #348	@ (adr r3, 800ebd0 <__ieee754_pow+0xa60>)
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f7f1 fc10 	bl	800029c <__adddf3>
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	462b      	mov	r3, r5
 800ea80:	f7f1 fdc2 	bl	8000608 <__aeabi_dmul>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	4640      	mov	r0, r8
 800ea8a:	4649      	mov	r1, r9
 800ea8c:	f7f1 fc04 	bl	8000298 <__aeabi_dsub>
 800ea90:	4604      	mov	r4, r0
 800ea92:	460d      	mov	r5, r1
 800ea94:	4602      	mov	r2, r0
 800ea96:	460b      	mov	r3, r1
 800ea98:	4640      	mov	r0, r8
 800ea9a:	4649      	mov	r1, r9
 800ea9c:	f7f1 fdb4 	bl	8000608 <__aeabi_dmul>
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	e9cd 0100 	strd	r0, r1, [sp]
 800eaa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eaaa:	4620      	mov	r0, r4
 800eaac:	4629      	mov	r1, r5
 800eaae:	f7f1 fbf3 	bl	8000298 <__aeabi_dsub>
 800eab2:	4602      	mov	r2, r0
 800eab4:	460b      	mov	r3, r1
 800eab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eaba:	f7f1 fecf 	bl	800085c <__aeabi_ddiv>
 800eabe:	4632      	mov	r2, r6
 800eac0:	4604      	mov	r4, r0
 800eac2:	460d      	mov	r5, r1
 800eac4:	463b      	mov	r3, r7
 800eac6:	4640      	mov	r0, r8
 800eac8:	4649      	mov	r1, r9
 800eaca:	f7f1 fd9d 	bl	8000608 <__aeabi_dmul>
 800eace:	4632      	mov	r2, r6
 800ead0:	463b      	mov	r3, r7
 800ead2:	f7f1 fbe3 	bl	800029c <__adddf3>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	4620      	mov	r0, r4
 800eadc:	4629      	mov	r1, r5
 800eade:	f7f1 fbdb 	bl	8000298 <__aeabi_dsub>
 800eae2:	4642      	mov	r2, r8
 800eae4:	464b      	mov	r3, r9
 800eae6:	f7f1 fbd7 	bl	8000298 <__aeabi_dsub>
 800eaea:	460b      	mov	r3, r1
 800eaec:	4602      	mov	r2, r0
 800eaee:	493b      	ldr	r1, [pc, #236]	@ (800ebdc <__ieee754_pow+0xa6c>)
 800eaf0:	2000      	movs	r0, #0
 800eaf2:	f7f1 fbd1 	bl	8000298 <__aeabi_dsub>
 800eaf6:	ec41 0b10 	vmov	d0, r0, r1
 800eafa:	ee10 3a90 	vmov	r3, s1
 800eafe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eb02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb06:	da30      	bge.n	800eb6a <__ieee754_pow+0x9fa>
 800eb08:	4650      	mov	r0, sl
 800eb0a:	f000 fc09 	bl	800f320 <scalbn>
 800eb0e:	ec51 0b10 	vmov	r0, r1, d0
 800eb12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb16:	f7ff bbd2 	b.w	800e2be <__ieee754_pow+0x14e>
 800eb1a:	4c31      	ldr	r4, [pc, #196]	@ (800ebe0 <__ieee754_pow+0xa70>)
 800eb1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb20:	42a3      	cmp	r3, r4
 800eb22:	d91a      	bls.n	800eb5a <__ieee754_pow+0x9ea>
 800eb24:	4b2f      	ldr	r3, [pc, #188]	@ (800ebe4 <__ieee754_pow+0xa74>)
 800eb26:	440b      	add	r3, r1
 800eb28:	4303      	orrs	r3, r0
 800eb2a:	d009      	beq.n	800eb40 <__ieee754_pow+0x9d0>
 800eb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	f7f1 ffda 	bl	8000aec <__aeabi_dcmplt>
 800eb38:	3800      	subs	r0, #0
 800eb3a:	bf18      	it	ne
 800eb3c:	2001      	movne	r0, #1
 800eb3e:	e42b      	b.n	800e398 <__ieee754_pow+0x228>
 800eb40:	4642      	mov	r2, r8
 800eb42:	464b      	mov	r3, r9
 800eb44:	f7f1 fba8 	bl	8000298 <__aeabi_dsub>
 800eb48:	4632      	mov	r2, r6
 800eb4a:	463b      	mov	r3, r7
 800eb4c:	f7f1 ffe2 	bl	8000b14 <__aeabi_dcmpge>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	d1eb      	bne.n	800eb2c <__ieee754_pow+0x9bc>
 800eb54:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ebf4 <__ieee754_pow+0xa84>
 800eb58:	e6f7      	b.n	800e94a <__ieee754_pow+0x7da>
 800eb5a:	469a      	mov	sl, r3
 800eb5c:	4b22      	ldr	r3, [pc, #136]	@ (800ebe8 <__ieee754_pow+0xa78>)
 800eb5e:	459a      	cmp	sl, r3
 800eb60:	f63f aef3 	bhi.w	800e94a <__ieee754_pow+0x7da>
 800eb64:	f8dd a010 	ldr.w	sl, [sp, #16]
 800eb68:	e715      	b.n	800e996 <__ieee754_pow+0x826>
 800eb6a:	ec51 0b10 	vmov	r0, r1, d0
 800eb6e:	4619      	mov	r1, r3
 800eb70:	e7cf      	b.n	800eb12 <__ieee754_pow+0x9a2>
 800eb72:	491a      	ldr	r1, [pc, #104]	@ (800ebdc <__ieee754_pow+0xa6c>)
 800eb74:	2000      	movs	r0, #0
 800eb76:	f7ff bb18 	b.w	800e1aa <__ieee754_pow+0x3a>
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	f7ff bb14 	b.w	800e1aa <__ieee754_pow+0x3a>
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7ff bb10 	b.w	800e1aa <__ieee754_pow+0x3a>
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	f7ff bb5e 	b.w	800e24c <__ieee754_pow+0xdc>
 800eb90:	2400      	movs	r4, #0
 800eb92:	f7ff bb49 	b.w	800e228 <__ieee754_pow+0xb8>
 800eb96:	bf00      	nop
 800eb98:	00000000 	.word	0x00000000
 800eb9c:	3fe62e43 	.word	0x3fe62e43
 800eba0:	fefa39ef 	.word	0xfefa39ef
 800eba4:	3fe62e42 	.word	0x3fe62e42
 800eba8:	0ca86c39 	.word	0x0ca86c39
 800ebac:	be205c61 	.word	0xbe205c61
 800ebb0:	72bea4d0 	.word	0x72bea4d0
 800ebb4:	3e663769 	.word	0x3e663769
 800ebb8:	c5d26bf1 	.word	0xc5d26bf1
 800ebbc:	3ebbbd41 	.word	0x3ebbbd41
 800ebc0:	af25de2c 	.word	0xaf25de2c
 800ebc4:	3f11566a 	.word	0x3f11566a
 800ebc8:	16bebd93 	.word	0x16bebd93
 800ebcc:	3f66c16c 	.word	0x3f66c16c
 800ebd0:	5555553e 	.word	0x5555553e
 800ebd4:	3fc55555 	.word	0x3fc55555
 800ebd8:	fff00000 	.word	0xfff00000
 800ebdc:	3ff00000 	.word	0x3ff00000
 800ebe0:	4090cbff 	.word	0x4090cbff
 800ebe4:	3f6f3400 	.word	0x3f6f3400
 800ebe8:	3fe00000 	.word	0x3fe00000
 800ebec:	652b82fe 	.word	0x652b82fe
 800ebf0:	3c971547 	.word	0x3c971547
 800ebf4:	4090cc00 	.word	0x4090cc00

0800ebf8 <__ieee754_rem_pio2>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	ec57 6b10 	vmov	r6, r7, d0
 800ec00:	4bc5      	ldr	r3, [pc, #788]	@ (800ef18 <__ieee754_rem_pio2+0x320>)
 800ec02:	b08d      	sub	sp, #52	@ 0x34
 800ec04:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ec08:	4598      	cmp	r8, r3
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	9704      	str	r7, [sp, #16]
 800ec0e:	d807      	bhi.n	800ec20 <__ieee754_rem_pio2+0x28>
 800ec10:	2200      	movs	r2, #0
 800ec12:	2300      	movs	r3, #0
 800ec14:	ed80 0b00 	vstr	d0, [r0]
 800ec18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec1c:	2500      	movs	r5, #0
 800ec1e:	e028      	b.n	800ec72 <__ieee754_rem_pio2+0x7a>
 800ec20:	4bbe      	ldr	r3, [pc, #760]	@ (800ef1c <__ieee754_rem_pio2+0x324>)
 800ec22:	4598      	cmp	r8, r3
 800ec24:	d878      	bhi.n	800ed18 <__ieee754_rem_pio2+0x120>
 800ec26:	9b04      	ldr	r3, [sp, #16]
 800ec28:	4dbd      	ldr	r5, [pc, #756]	@ (800ef20 <__ieee754_rem_pio2+0x328>)
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800eee0 <__ieee754_rem_pio2+0x2e8>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	4639      	mov	r1, r7
 800ec36:	dd38      	ble.n	800ecaa <__ieee754_rem_pio2+0xb2>
 800ec38:	f7f1 fb2e 	bl	8000298 <__aeabi_dsub>
 800ec3c:	45a8      	cmp	r8, r5
 800ec3e:	4606      	mov	r6, r0
 800ec40:	460f      	mov	r7, r1
 800ec42:	d01a      	beq.n	800ec7a <__ieee754_rem_pio2+0x82>
 800ec44:	a3a8      	add	r3, pc, #672	@ (adr r3, 800eee8 <__ieee754_rem_pio2+0x2f0>)
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	f7f1 fb25 	bl	8000298 <__aeabi_dsub>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4680      	mov	r8, r0
 800ec54:	4689      	mov	r9, r1
 800ec56:	4630      	mov	r0, r6
 800ec58:	4639      	mov	r1, r7
 800ec5a:	f7f1 fb1d 	bl	8000298 <__aeabi_dsub>
 800ec5e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800eee8 <__ieee754_rem_pio2+0x2f0>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	f7f1 fb18 	bl	8000298 <__aeabi_dsub>
 800ec68:	e9c4 8900 	strd	r8, r9, [r4]
 800ec6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec70:	2501      	movs	r5, #1
 800ec72:	4628      	mov	r0, r5
 800ec74:	b00d      	add	sp, #52	@ 0x34
 800ec76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7a:	a39d      	add	r3, pc, #628	@ (adr r3, 800eef0 <__ieee754_rem_pio2+0x2f8>)
 800ec7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec80:	f7f1 fb0a 	bl	8000298 <__aeabi_dsub>
 800ec84:	a39c      	add	r3, pc, #624	@ (adr r3, 800eef8 <__ieee754_rem_pio2+0x300>)
 800ec86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	460f      	mov	r7, r1
 800ec8e:	f7f1 fb03 	bl	8000298 <__aeabi_dsub>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	4680      	mov	r8, r0
 800ec98:	4689      	mov	r9, r1
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	4639      	mov	r1, r7
 800ec9e:	f7f1 fafb 	bl	8000298 <__aeabi_dsub>
 800eca2:	a395      	add	r3, pc, #596	@ (adr r3, 800eef8 <__ieee754_rem_pio2+0x300>)
 800eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca8:	e7dc      	b.n	800ec64 <__ieee754_rem_pio2+0x6c>
 800ecaa:	f7f1 faf7 	bl	800029c <__adddf3>
 800ecae:	45a8      	cmp	r8, r5
 800ecb0:	4606      	mov	r6, r0
 800ecb2:	460f      	mov	r7, r1
 800ecb4:	d018      	beq.n	800ece8 <__ieee754_rem_pio2+0xf0>
 800ecb6:	a38c      	add	r3, pc, #560	@ (adr r3, 800eee8 <__ieee754_rem_pio2+0x2f0>)
 800ecb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbc:	f7f1 faee 	bl	800029c <__adddf3>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	4689      	mov	r9, r1
 800ecc8:	4630      	mov	r0, r6
 800ecca:	4639      	mov	r1, r7
 800eccc:	f7f1 fae4 	bl	8000298 <__aeabi_dsub>
 800ecd0:	a385      	add	r3, pc, #532	@ (adr r3, 800eee8 <__ieee754_rem_pio2+0x2f0>)
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	f7f1 fae1 	bl	800029c <__adddf3>
 800ecda:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ecde:	e9c4 8900 	strd	r8, r9, [r4]
 800ece2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ece6:	e7c4      	b.n	800ec72 <__ieee754_rem_pio2+0x7a>
 800ece8:	a381      	add	r3, pc, #516	@ (adr r3, 800eef0 <__ieee754_rem_pio2+0x2f8>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	f7f1 fad5 	bl	800029c <__adddf3>
 800ecf2:	a381      	add	r3, pc, #516	@ (adr r3, 800eef8 <__ieee754_rem_pio2+0x300>)
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	460f      	mov	r7, r1
 800ecfc:	f7f1 face 	bl	800029c <__adddf3>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	4680      	mov	r8, r0
 800ed06:	4689      	mov	r9, r1
 800ed08:	4630      	mov	r0, r6
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f7f1 fac4 	bl	8000298 <__aeabi_dsub>
 800ed10:	a379      	add	r3, pc, #484	@ (adr r3, 800eef8 <__ieee754_rem_pio2+0x300>)
 800ed12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed16:	e7de      	b.n	800ecd6 <__ieee754_rem_pio2+0xde>
 800ed18:	4b82      	ldr	r3, [pc, #520]	@ (800ef24 <__ieee754_rem_pio2+0x32c>)
 800ed1a:	4598      	cmp	r8, r3
 800ed1c:	f200 80d1 	bhi.w	800eec2 <__ieee754_rem_pio2+0x2ca>
 800ed20:	f7fe fa3a 	bl	800d198 <fabs>
 800ed24:	ec57 6b10 	vmov	r6, r7, d0
 800ed28:	a375      	add	r3, pc, #468	@ (adr r3, 800ef00 <__ieee754_rem_pio2+0x308>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	4630      	mov	r0, r6
 800ed30:	4639      	mov	r1, r7
 800ed32:	f7f1 fc69 	bl	8000608 <__aeabi_dmul>
 800ed36:	4b7c      	ldr	r3, [pc, #496]	@ (800ef28 <__ieee754_rem_pio2+0x330>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f7f1 faaf 	bl	800029c <__adddf3>
 800ed3e:	f7f1 ff13 	bl	8000b68 <__aeabi_d2iz>
 800ed42:	4605      	mov	r5, r0
 800ed44:	f7f1 fbf6 	bl	8000534 <__aeabi_i2d>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ed50:	a363      	add	r3, pc, #396	@ (adr r3, 800eee0 <__ieee754_rem_pio2+0x2e8>)
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f7f1 fc57 	bl	8000608 <__aeabi_dmul>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	4630      	mov	r0, r6
 800ed60:	4639      	mov	r1, r7
 800ed62:	f7f1 fa99 	bl	8000298 <__aeabi_dsub>
 800ed66:	a360      	add	r3, pc, #384	@ (adr r3, 800eee8 <__ieee754_rem_pio2+0x2f0>)
 800ed68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6c:	4682      	mov	sl, r0
 800ed6e:	468b      	mov	fp, r1
 800ed70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed74:	f7f1 fc48 	bl	8000608 <__aeabi_dmul>
 800ed78:	2d1f      	cmp	r5, #31
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	dc0c      	bgt.n	800ed9a <__ieee754_rem_pio2+0x1a2>
 800ed80:	4b6a      	ldr	r3, [pc, #424]	@ (800ef2c <__ieee754_rem_pio2+0x334>)
 800ed82:	1e6a      	subs	r2, r5, #1
 800ed84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed88:	4543      	cmp	r3, r8
 800ed8a:	d006      	beq.n	800ed9a <__ieee754_rem_pio2+0x1a2>
 800ed8c:	4632      	mov	r2, r6
 800ed8e:	463b      	mov	r3, r7
 800ed90:	4650      	mov	r0, sl
 800ed92:	4659      	mov	r1, fp
 800ed94:	f7f1 fa80 	bl	8000298 <__aeabi_dsub>
 800ed98:	e00e      	b.n	800edb8 <__ieee754_rem_pio2+0x1c0>
 800ed9a:	463b      	mov	r3, r7
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	4650      	mov	r0, sl
 800eda0:	4659      	mov	r1, fp
 800eda2:	f7f1 fa79 	bl	8000298 <__aeabi_dsub>
 800eda6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800edaa:	9305      	str	r3, [sp, #20]
 800edac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800edb0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800edb4:	2b10      	cmp	r3, #16
 800edb6:	dc02      	bgt.n	800edbe <__ieee754_rem_pio2+0x1c6>
 800edb8:	e9c4 0100 	strd	r0, r1, [r4]
 800edbc:	e039      	b.n	800ee32 <__ieee754_rem_pio2+0x23a>
 800edbe:	a34c      	add	r3, pc, #304	@ (adr r3, 800eef0 <__ieee754_rem_pio2+0x2f8>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edc8:	f7f1 fc1e 	bl	8000608 <__aeabi_dmul>
 800edcc:	4606      	mov	r6, r0
 800edce:	460f      	mov	r7, r1
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	4650      	mov	r0, sl
 800edd6:	4659      	mov	r1, fp
 800edd8:	f7f1 fa5e 	bl	8000298 <__aeabi_dsub>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4680      	mov	r8, r0
 800ede2:	4689      	mov	r9, r1
 800ede4:	4650      	mov	r0, sl
 800ede6:	4659      	mov	r1, fp
 800ede8:	f7f1 fa56 	bl	8000298 <__aeabi_dsub>
 800edec:	4632      	mov	r2, r6
 800edee:	463b      	mov	r3, r7
 800edf0:	f7f1 fa52 	bl	8000298 <__aeabi_dsub>
 800edf4:	a340      	add	r3, pc, #256	@ (adr r3, 800eef8 <__ieee754_rem_pio2+0x300>)
 800edf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfa:	4606      	mov	r6, r0
 800edfc:	460f      	mov	r7, r1
 800edfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee02:	f7f1 fc01 	bl	8000608 <__aeabi_dmul>
 800ee06:	4632      	mov	r2, r6
 800ee08:	463b      	mov	r3, r7
 800ee0a:	f7f1 fa45 	bl	8000298 <__aeabi_dsub>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	4606      	mov	r6, r0
 800ee14:	460f      	mov	r7, r1
 800ee16:	4640      	mov	r0, r8
 800ee18:	4649      	mov	r1, r9
 800ee1a:	f7f1 fa3d 	bl	8000298 <__aeabi_dsub>
 800ee1e:	9a05      	ldr	r2, [sp, #20]
 800ee20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	2b31      	cmp	r3, #49	@ 0x31
 800ee28:	dc20      	bgt.n	800ee6c <__ieee754_rem_pio2+0x274>
 800ee2a:	e9c4 0100 	strd	r0, r1, [r4]
 800ee2e:	46c2      	mov	sl, r8
 800ee30:	46cb      	mov	fp, r9
 800ee32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee36:	4650      	mov	r0, sl
 800ee38:	4642      	mov	r2, r8
 800ee3a:	464b      	mov	r3, r9
 800ee3c:	4659      	mov	r1, fp
 800ee3e:	f7f1 fa2b 	bl	8000298 <__aeabi_dsub>
 800ee42:	463b      	mov	r3, r7
 800ee44:	4632      	mov	r2, r6
 800ee46:	f7f1 fa27 	bl	8000298 <__aeabi_dsub>
 800ee4a:	9b04      	ldr	r3, [sp, #16]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee52:	f6bf af0e 	bge.w	800ec72 <__ieee754_rem_pio2+0x7a>
 800ee56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ee5a:	6063      	str	r3, [r4, #4]
 800ee5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ee60:	f8c4 8000 	str.w	r8, [r4]
 800ee64:	60a0      	str	r0, [r4, #8]
 800ee66:	60e3      	str	r3, [r4, #12]
 800ee68:	426d      	negs	r5, r5
 800ee6a:	e702      	b.n	800ec72 <__ieee754_rem_pio2+0x7a>
 800ee6c:	a326      	add	r3, pc, #152	@ (adr r3, 800ef08 <__ieee754_rem_pio2+0x310>)
 800ee6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee76:	f7f1 fbc7 	bl	8000608 <__aeabi_dmul>
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460f      	mov	r7, r1
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	4640      	mov	r0, r8
 800ee84:	4649      	mov	r1, r9
 800ee86:	f7f1 fa07 	bl	8000298 <__aeabi_dsub>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	4682      	mov	sl, r0
 800ee90:	468b      	mov	fp, r1
 800ee92:	4640      	mov	r0, r8
 800ee94:	4649      	mov	r1, r9
 800ee96:	f7f1 f9ff 	bl	8000298 <__aeabi_dsub>
 800ee9a:	4632      	mov	r2, r6
 800ee9c:	463b      	mov	r3, r7
 800ee9e:	f7f1 f9fb 	bl	8000298 <__aeabi_dsub>
 800eea2:	a31b      	add	r3, pc, #108	@ (adr r3, 800ef10 <__ieee754_rem_pio2+0x318>)
 800eea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea8:	4606      	mov	r6, r0
 800eeaa:	460f      	mov	r7, r1
 800eeac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eeb0:	f7f1 fbaa 	bl	8000608 <__aeabi_dmul>
 800eeb4:	4632      	mov	r2, r6
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	f7f1 f9ee 	bl	8000298 <__aeabi_dsub>
 800eebc:	4606      	mov	r6, r0
 800eebe:	460f      	mov	r7, r1
 800eec0:	e764      	b.n	800ed8c <__ieee754_rem_pio2+0x194>
 800eec2:	4b1b      	ldr	r3, [pc, #108]	@ (800ef30 <__ieee754_rem_pio2+0x338>)
 800eec4:	4598      	cmp	r8, r3
 800eec6:	d935      	bls.n	800ef34 <__ieee754_rem_pio2+0x33c>
 800eec8:	4632      	mov	r2, r6
 800eeca:	463b      	mov	r3, r7
 800eecc:	4630      	mov	r0, r6
 800eece:	4639      	mov	r1, r7
 800eed0:	f7f1 f9e2 	bl	8000298 <__aeabi_dsub>
 800eed4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eed8:	e9c4 0100 	strd	r0, r1, [r4]
 800eedc:	e69e      	b.n	800ec1c <__ieee754_rem_pio2+0x24>
 800eede:	bf00      	nop
 800eee0:	54400000 	.word	0x54400000
 800eee4:	3ff921fb 	.word	0x3ff921fb
 800eee8:	1a626331 	.word	0x1a626331
 800eeec:	3dd0b461 	.word	0x3dd0b461
 800eef0:	1a600000 	.word	0x1a600000
 800eef4:	3dd0b461 	.word	0x3dd0b461
 800eef8:	2e037073 	.word	0x2e037073
 800eefc:	3ba3198a 	.word	0x3ba3198a
 800ef00:	6dc9c883 	.word	0x6dc9c883
 800ef04:	3fe45f30 	.word	0x3fe45f30
 800ef08:	2e000000 	.word	0x2e000000
 800ef0c:	3ba3198a 	.word	0x3ba3198a
 800ef10:	252049c1 	.word	0x252049c1
 800ef14:	397b839a 	.word	0x397b839a
 800ef18:	3fe921fb 	.word	0x3fe921fb
 800ef1c:	4002d97b 	.word	0x4002d97b
 800ef20:	3ff921fb 	.word	0x3ff921fb
 800ef24:	413921fb 	.word	0x413921fb
 800ef28:	3fe00000 	.word	0x3fe00000
 800ef2c:	08010580 	.word	0x08010580
 800ef30:	7fefffff 	.word	0x7fefffff
 800ef34:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ef38:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ef3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ef40:	4630      	mov	r0, r6
 800ef42:	460f      	mov	r7, r1
 800ef44:	f7f1 fe10 	bl	8000b68 <__aeabi_d2iz>
 800ef48:	f7f1 faf4 	bl	8000534 <__aeabi_i2d>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	460b      	mov	r3, r1
 800ef50:	4630      	mov	r0, r6
 800ef52:	4639      	mov	r1, r7
 800ef54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef58:	f7f1 f99e 	bl	8000298 <__aeabi_dsub>
 800ef5c:	4b22      	ldr	r3, [pc, #136]	@ (800efe8 <__ieee754_rem_pio2+0x3f0>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f7f1 fb52 	bl	8000608 <__aeabi_dmul>
 800ef64:	460f      	mov	r7, r1
 800ef66:	4606      	mov	r6, r0
 800ef68:	f7f1 fdfe 	bl	8000b68 <__aeabi_d2iz>
 800ef6c:	f7f1 fae2 	bl	8000534 <__aeabi_i2d>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	4630      	mov	r0, r6
 800ef76:	4639      	mov	r1, r7
 800ef78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ef7c:	f7f1 f98c 	bl	8000298 <__aeabi_dsub>
 800ef80:	4b19      	ldr	r3, [pc, #100]	@ (800efe8 <__ieee754_rem_pio2+0x3f0>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	f7f1 fb40 	bl	8000608 <__aeabi_dmul>
 800ef88:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ef8c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ef90:	f04f 0803 	mov.w	r8, #3
 800ef94:	2600      	movs	r6, #0
 800ef96:	2700      	movs	r7, #0
 800ef98:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ef9c:	4632      	mov	r2, r6
 800ef9e:	463b      	mov	r3, r7
 800efa0:	46c2      	mov	sl, r8
 800efa2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800efa6:	f7f1 fd97 	bl	8000ad8 <__aeabi_dcmpeq>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d1f4      	bne.n	800ef98 <__ieee754_rem_pio2+0x3a0>
 800efae:	4b0f      	ldr	r3, [pc, #60]	@ (800efec <__ieee754_rem_pio2+0x3f4>)
 800efb0:	9301      	str	r3, [sp, #4]
 800efb2:	2302      	movs	r3, #2
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	462a      	mov	r2, r5
 800efb8:	4653      	mov	r3, sl
 800efba:	4621      	mov	r1, r4
 800efbc:	a806      	add	r0, sp, #24
 800efbe:	f000 fa6b 	bl	800f498 <__kernel_rem_pio2>
 800efc2:	9b04      	ldr	r3, [sp, #16]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	4605      	mov	r5, r0
 800efc8:	f6bf ae53 	bge.w	800ec72 <__ieee754_rem_pio2+0x7a>
 800efcc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800efd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800efd4:	e9c4 2300 	strd	r2, r3, [r4]
 800efd8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800efdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800efe0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800efe4:	e740      	b.n	800ee68 <__ieee754_rem_pio2+0x270>
 800efe6:	bf00      	nop
 800efe8:	41700000 	.word	0x41700000
 800efec:	08010600 	.word	0x08010600

0800eff0 <atan>:
 800eff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff4:	ec55 4b10 	vmov	r4, r5, d0
 800eff8:	4bbf      	ldr	r3, [pc, #764]	@ (800f2f8 <atan+0x308>)
 800effa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800effe:	429e      	cmp	r6, r3
 800f000:	46ab      	mov	fp, r5
 800f002:	d918      	bls.n	800f036 <atan+0x46>
 800f004:	4bbd      	ldr	r3, [pc, #756]	@ (800f2fc <atan+0x30c>)
 800f006:	429e      	cmp	r6, r3
 800f008:	d801      	bhi.n	800f00e <atan+0x1e>
 800f00a:	d109      	bne.n	800f020 <atan+0x30>
 800f00c:	b144      	cbz	r4, 800f020 <atan+0x30>
 800f00e:	4622      	mov	r2, r4
 800f010:	462b      	mov	r3, r5
 800f012:	4620      	mov	r0, r4
 800f014:	4629      	mov	r1, r5
 800f016:	f7f1 f941 	bl	800029c <__adddf3>
 800f01a:	4604      	mov	r4, r0
 800f01c:	460d      	mov	r5, r1
 800f01e:	e006      	b.n	800f02e <atan+0x3e>
 800f020:	f1bb 0f00 	cmp.w	fp, #0
 800f024:	f340 812b 	ble.w	800f27e <atan+0x28e>
 800f028:	a597      	add	r5, pc, #604	@ (adr r5, 800f288 <atan+0x298>)
 800f02a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f02e:	ec45 4b10 	vmov	d0, r4, r5
 800f032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	4bb2      	ldr	r3, [pc, #712]	@ (800f300 <atan+0x310>)
 800f038:	429e      	cmp	r6, r3
 800f03a:	d813      	bhi.n	800f064 <atan+0x74>
 800f03c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f040:	429e      	cmp	r6, r3
 800f042:	d80c      	bhi.n	800f05e <atan+0x6e>
 800f044:	a392      	add	r3, pc, #584	@ (adr r3, 800f290 <atan+0x2a0>)
 800f046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04a:	4620      	mov	r0, r4
 800f04c:	4629      	mov	r1, r5
 800f04e:	f7f1 f925 	bl	800029c <__adddf3>
 800f052:	4bac      	ldr	r3, [pc, #688]	@ (800f304 <atan+0x314>)
 800f054:	2200      	movs	r2, #0
 800f056:	f7f1 fd67 	bl	8000b28 <__aeabi_dcmpgt>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d1e7      	bne.n	800f02e <atan+0x3e>
 800f05e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f062:	e029      	b.n	800f0b8 <atan+0xc8>
 800f064:	f7fe f898 	bl	800d198 <fabs>
 800f068:	4ba7      	ldr	r3, [pc, #668]	@ (800f308 <atan+0x318>)
 800f06a:	429e      	cmp	r6, r3
 800f06c:	ec55 4b10 	vmov	r4, r5, d0
 800f070:	f200 80bc 	bhi.w	800f1ec <atan+0x1fc>
 800f074:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f078:	429e      	cmp	r6, r3
 800f07a:	f200 809e 	bhi.w	800f1ba <atan+0x1ca>
 800f07e:	4622      	mov	r2, r4
 800f080:	462b      	mov	r3, r5
 800f082:	4620      	mov	r0, r4
 800f084:	4629      	mov	r1, r5
 800f086:	f7f1 f909 	bl	800029c <__adddf3>
 800f08a:	4b9e      	ldr	r3, [pc, #632]	@ (800f304 <atan+0x314>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	f7f1 f903 	bl	8000298 <__aeabi_dsub>
 800f092:	2200      	movs	r2, #0
 800f094:	4606      	mov	r6, r0
 800f096:	460f      	mov	r7, r1
 800f098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f09c:	4620      	mov	r0, r4
 800f09e:	4629      	mov	r1, r5
 800f0a0:	f7f1 f8fc 	bl	800029c <__adddf3>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	f7f1 fbd6 	bl	800085c <__aeabi_ddiv>
 800f0b0:	f04f 0a00 	mov.w	sl, #0
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	4622      	mov	r2, r4
 800f0ba:	462b      	mov	r3, r5
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4629      	mov	r1, r5
 800f0c0:	f7f1 faa2 	bl	8000608 <__aeabi_dmul>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4680      	mov	r8, r0
 800f0ca:	4689      	mov	r9, r1
 800f0cc:	f7f1 fa9c 	bl	8000608 <__aeabi_dmul>
 800f0d0:	a371      	add	r3, pc, #452	@ (adr r3, 800f298 <atan+0x2a8>)
 800f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d6:	4606      	mov	r6, r0
 800f0d8:	460f      	mov	r7, r1
 800f0da:	f7f1 fa95 	bl	8000608 <__aeabi_dmul>
 800f0de:	a370      	add	r3, pc, #448	@ (adr r3, 800f2a0 <atan+0x2b0>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f7f1 f8da 	bl	800029c <__adddf3>
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	463b      	mov	r3, r7
 800f0ec:	f7f1 fa8c 	bl	8000608 <__aeabi_dmul>
 800f0f0:	a36d      	add	r3, pc, #436	@ (adr r3, 800f2a8 <atan+0x2b8>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 f8d1 	bl	800029c <__adddf3>
 800f0fa:	4632      	mov	r2, r6
 800f0fc:	463b      	mov	r3, r7
 800f0fe:	f7f1 fa83 	bl	8000608 <__aeabi_dmul>
 800f102:	a36b      	add	r3, pc, #428	@ (adr r3, 800f2b0 <atan+0x2c0>)
 800f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f108:	f7f1 f8c8 	bl	800029c <__adddf3>
 800f10c:	4632      	mov	r2, r6
 800f10e:	463b      	mov	r3, r7
 800f110:	f7f1 fa7a 	bl	8000608 <__aeabi_dmul>
 800f114:	a368      	add	r3, pc, #416	@ (adr r3, 800f2b8 <atan+0x2c8>)
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	f7f1 f8bf 	bl	800029c <__adddf3>
 800f11e:	4632      	mov	r2, r6
 800f120:	463b      	mov	r3, r7
 800f122:	f7f1 fa71 	bl	8000608 <__aeabi_dmul>
 800f126:	a366      	add	r3, pc, #408	@ (adr r3, 800f2c0 <atan+0x2d0>)
 800f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12c:	f7f1 f8b6 	bl	800029c <__adddf3>
 800f130:	4642      	mov	r2, r8
 800f132:	464b      	mov	r3, r9
 800f134:	f7f1 fa68 	bl	8000608 <__aeabi_dmul>
 800f138:	a363      	add	r3, pc, #396	@ (adr r3, 800f2c8 <atan+0x2d8>)
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	4680      	mov	r8, r0
 800f140:	4689      	mov	r9, r1
 800f142:	4630      	mov	r0, r6
 800f144:	4639      	mov	r1, r7
 800f146:	f7f1 fa5f 	bl	8000608 <__aeabi_dmul>
 800f14a:	a361      	add	r3, pc, #388	@ (adr r3, 800f2d0 <atan+0x2e0>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	f7f1 f8a2 	bl	8000298 <__aeabi_dsub>
 800f154:	4632      	mov	r2, r6
 800f156:	463b      	mov	r3, r7
 800f158:	f7f1 fa56 	bl	8000608 <__aeabi_dmul>
 800f15c:	a35e      	add	r3, pc, #376	@ (adr r3, 800f2d8 <atan+0x2e8>)
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	f7f1 f899 	bl	8000298 <__aeabi_dsub>
 800f166:	4632      	mov	r2, r6
 800f168:	463b      	mov	r3, r7
 800f16a:	f7f1 fa4d 	bl	8000608 <__aeabi_dmul>
 800f16e:	a35c      	add	r3, pc, #368	@ (adr r3, 800f2e0 <atan+0x2f0>)
 800f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f174:	f7f1 f890 	bl	8000298 <__aeabi_dsub>
 800f178:	4632      	mov	r2, r6
 800f17a:	463b      	mov	r3, r7
 800f17c:	f7f1 fa44 	bl	8000608 <__aeabi_dmul>
 800f180:	a359      	add	r3, pc, #356	@ (adr r3, 800f2e8 <atan+0x2f8>)
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	f7f1 f887 	bl	8000298 <__aeabi_dsub>
 800f18a:	4632      	mov	r2, r6
 800f18c:	463b      	mov	r3, r7
 800f18e:	f7f1 fa3b 	bl	8000608 <__aeabi_dmul>
 800f192:	4602      	mov	r2, r0
 800f194:	460b      	mov	r3, r1
 800f196:	4640      	mov	r0, r8
 800f198:	4649      	mov	r1, r9
 800f19a:	f7f1 f87f 	bl	800029c <__adddf3>
 800f19e:	4622      	mov	r2, r4
 800f1a0:	462b      	mov	r3, r5
 800f1a2:	f7f1 fa31 	bl	8000608 <__aeabi_dmul>
 800f1a6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	d148      	bne.n	800f242 <atan+0x252>
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	f7f1 f870 	bl	8000298 <__aeabi_dsub>
 800f1b8:	e72f      	b.n	800f01a <atan+0x2a>
 800f1ba:	4b52      	ldr	r3, [pc, #328]	@ (800f304 <atan+0x314>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	4620      	mov	r0, r4
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	f7f1 f869 	bl	8000298 <__aeabi_dsub>
 800f1c6:	4b4f      	ldr	r3, [pc, #316]	@ (800f304 <atan+0x314>)
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	460f      	mov	r7, r1
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	4629      	mov	r1, r5
 800f1d2:	f7f1 f863 	bl	800029c <__adddf3>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	4630      	mov	r0, r6
 800f1dc:	4639      	mov	r1, r7
 800f1de:	f7f1 fb3d 	bl	800085c <__aeabi_ddiv>
 800f1e2:	f04f 0a01 	mov.w	sl, #1
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	460d      	mov	r5, r1
 800f1ea:	e765      	b.n	800f0b8 <atan+0xc8>
 800f1ec:	4b47      	ldr	r3, [pc, #284]	@ (800f30c <atan+0x31c>)
 800f1ee:	429e      	cmp	r6, r3
 800f1f0:	d21c      	bcs.n	800f22c <atan+0x23c>
 800f1f2:	4b47      	ldr	r3, [pc, #284]	@ (800f310 <atan+0x320>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f7f1 f84d 	bl	8000298 <__aeabi_dsub>
 800f1fe:	4b44      	ldr	r3, [pc, #272]	@ (800f310 <atan+0x320>)
 800f200:	4606      	mov	r6, r0
 800f202:	460f      	mov	r7, r1
 800f204:	2200      	movs	r2, #0
 800f206:	4620      	mov	r0, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	f7f1 f9fd 	bl	8000608 <__aeabi_dmul>
 800f20e:	4b3d      	ldr	r3, [pc, #244]	@ (800f304 <atan+0x314>)
 800f210:	2200      	movs	r2, #0
 800f212:	f7f1 f843 	bl	800029c <__adddf3>
 800f216:	4602      	mov	r2, r0
 800f218:	460b      	mov	r3, r1
 800f21a:	4630      	mov	r0, r6
 800f21c:	4639      	mov	r1, r7
 800f21e:	f7f1 fb1d 	bl	800085c <__aeabi_ddiv>
 800f222:	f04f 0a02 	mov.w	sl, #2
 800f226:	4604      	mov	r4, r0
 800f228:	460d      	mov	r5, r1
 800f22a:	e745      	b.n	800f0b8 <atan+0xc8>
 800f22c:	4622      	mov	r2, r4
 800f22e:	462b      	mov	r3, r5
 800f230:	4938      	ldr	r1, [pc, #224]	@ (800f314 <atan+0x324>)
 800f232:	2000      	movs	r0, #0
 800f234:	f7f1 fb12 	bl	800085c <__aeabi_ddiv>
 800f238:	f04f 0a03 	mov.w	sl, #3
 800f23c:	4604      	mov	r4, r0
 800f23e:	460d      	mov	r5, r1
 800f240:	e73a      	b.n	800f0b8 <atan+0xc8>
 800f242:	4b35      	ldr	r3, [pc, #212]	@ (800f318 <atan+0x328>)
 800f244:	4e35      	ldr	r6, [pc, #212]	@ (800f31c <atan+0x32c>)
 800f246:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	f7f1 f823 	bl	8000298 <__aeabi_dsub>
 800f252:	4622      	mov	r2, r4
 800f254:	462b      	mov	r3, r5
 800f256:	f7f1 f81f 	bl	8000298 <__aeabi_dsub>
 800f25a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f25e:	4602      	mov	r2, r0
 800f260:	460b      	mov	r3, r1
 800f262:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f266:	f7f1 f817 	bl	8000298 <__aeabi_dsub>
 800f26a:	f1bb 0f00 	cmp.w	fp, #0
 800f26e:	4604      	mov	r4, r0
 800f270:	460d      	mov	r5, r1
 800f272:	f6bf aedc 	bge.w	800f02e <atan+0x3e>
 800f276:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f27a:	461d      	mov	r5, r3
 800f27c:	e6d7      	b.n	800f02e <atan+0x3e>
 800f27e:	a51c      	add	r5, pc, #112	@ (adr r5, 800f2f0 <atan+0x300>)
 800f280:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f284:	e6d3      	b.n	800f02e <atan+0x3e>
 800f286:	bf00      	nop
 800f288:	54442d18 	.word	0x54442d18
 800f28c:	3ff921fb 	.word	0x3ff921fb
 800f290:	8800759c 	.word	0x8800759c
 800f294:	7e37e43c 	.word	0x7e37e43c
 800f298:	e322da11 	.word	0xe322da11
 800f29c:	3f90ad3a 	.word	0x3f90ad3a
 800f2a0:	24760deb 	.word	0x24760deb
 800f2a4:	3fa97b4b 	.word	0x3fa97b4b
 800f2a8:	a0d03d51 	.word	0xa0d03d51
 800f2ac:	3fb10d66 	.word	0x3fb10d66
 800f2b0:	c54c206e 	.word	0xc54c206e
 800f2b4:	3fb745cd 	.word	0x3fb745cd
 800f2b8:	920083ff 	.word	0x920083ff
 800f2bc:	3fc24924 	.word	0x3fc24924
 800f2c0:	5555550d 	.word	0x5555550d
 800f2c4:	3fd55555 	.word	0x3fd55555
 800f2c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f2cc:	bfa2b444 	.word	0xbfa2b444
 800f2d0:	52defd9a 	.word	0x52defd9a
 800f2d4:	3fadde2d 	.word	0x3fadde2d
 800f2d8:	af749a6d 	.word	0xaf749a6d
 800f2dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800f2e0:	fe231671 	.word	0xfe231671
 800f2e4:	3fbc71c6 	.word	0x3fbc71c6
 800f2e8:	9998ebc4 	.word	0x9998ebc4
 800f2ec:	3fc99999 	.word	0x3fc99999
 800f2f0:	54442d18 	.word	0x54442d18
 800f2f4:	bff921fb 	.word	0xbff921fb
 800f2f8:	440fffff 	.word	0x440fffff
 800f2fc:	7ff00000 	.word	0x7ff00000
 800f300:	3fdbffff 	.word	0x3fdbffff
 800f304:	3ff00000 	.word	0x3ff00000
 800f308:	3ff2ffff 	.word	0x3ff2ffff
 800f30c:	40038000 	.word	0x40038000
 800f310:	3ff80000 	.word	0x3ff80000
 800f314:	bff00000 	.word	0xbff00000
 800f318:	08010708 	.word	0x08010708
 800f31c:	08010728 	.word	0x08010728

0800f320 <scalbn>:
 800f320:	b570      	push	{r4, r5, r6, lr}
 800f322:	ec55 4b10 	vmov	r4, r5, d0
 800f326:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f32a:	4606      	mov	r6, r0
 800f32c:	462b      	mov	r3, r5
 800f32e:	b991      	cbnz	r1, 800f356 <scalbn+0x36>
 800f330:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f334:	4323      	orrs	r3, r4
 800f336:	d03d      	beq.n	800f3b4 <scalbn+0x94>
 800f338:	4b35      	ldr	r3, [pc, #212]	@ (800f410 <scalbn+0xf0>)
 800f33a:	4620      	mov	r0, r4
 800f33c:	4629      	mov	r1, r5
 800f33e:	2200      	movs	r2, #0
 800f340:	f7f1 f962 	bl	8000608 <__aeabi_dmul>
 800f344:	4b33      	ldr	r3, [pc, #204]	@ (800f414 <scalbn+0xf4>)
 800f346:	429e      	cmp	r6, r3
 800f348:	4604      	mov	r4, r0
 800f34a:	460d      	mov	r5, r1
 800f34c:	da0f      	bge.n	800f36e <scalbn+0x4e>
 800f34e:	a328      	add	r3, pc, #160	@ (adr r3, 800f3f0 <scalbn+0xd0>)
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	e01e      	b.n	800f394 <scalbn+0x74>
 800f356:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f35a:	4291      	cmp	r1, r2
 800f35c:	d10b      	bne.n	800f376 <scalbn+0x56>
 800f35e:	4622      	mov	r2, r4
 800f360:	4620      	mov	r0, r4
 800f362:	4629      	mov	r1, r5
 800f364:	f7f0 ff9a 	bl	800029c <__adddf3>
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	e022      	b.n	800f3b4 <scalbn+0x94>
 800f36e:	460b      	mov	r3, r1
 800f370:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f374:	3936      	subs	r1, #54	@ 0x36
 800f376:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f37a:	4296      	cmp	r6, r2
 800f37c:	dd0d      	ble.n	800f39a <scalbn+0x7a>
 800f37e:	2d00      	cmp	r5, #0
 800f380:	a11d      	add	r1, pc, #116	@ (adr r1, 800f3f8 <scalbn+0xd8>)
 800f382:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f386:	da02      	bge.n	800f38e <scalbn+0x6e>
 800f388:	a11d      	add	r1, pc, #116	@ (adr r1, 800f400 <scalbn+0xe0>)
 800f38a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f38e:	a31a      	add	r3, pc, #104	@ (adr r3, 800f3f8 <scalbn+0xd8>)
 800f390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f394:	f7f1 f938 	bl	8000608 <__aeabi_dmul>
 800f398:	e7e6      	b.n	800f368 <scalbn+0x48>
 800f39a:	1872      	adds	r2, r6, r1
 800f39c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f3a0:	428a      	cmp	r2, r1
 800f3a2:	dcec      	bgt.n	800f37e <scalbn+0x5e>
 800f3a4:	2a00      	cmp	r2, #0
 800f3a6:	dd08      	ble.n	800f3ba <scalbn+0x9a>
 800f3a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f3ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f3b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f3b4:	ec45 4b10 	vmov	d0, r4, r5
 800f3b8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f3be:	da08      	bge.n	800f3d2 <scalbn+0xb2>
 800f3c0:	2d00      	cmp	r5, #0
 800f3c2:	a10b      	add	r1, pc, #44	@ (adr r1, 800f3f0 <scalbn+0xd0>)
 800f3c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3c8:	dac1      	bge.n	800f34e <scalbn+0x2e>
 800f3ca:	a10f      	add	r1, pc, #60	@ (adr r1, 800f408 <scalbn+0xe8>)
 800f3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3d0:	e7bd      	b.n	800f34e <scalbn+0x2e>
 800f3d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f3d6:	3236      	adds	r2, #54	@ 0x36
 800f3d8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f3dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f418 <scalbn+0xf8>)
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	e7d4      	b.n	800f394 <scalbn+0x74>
 800f3ea:	bf00      	nop
 800f3ec:	f3af 8000 	nop.w
 800f3f0:	c2f8f359 	.word	0xc2f8f359
 800f3f4:	01a56e1f 	.word	0x01a56e1f
 800f3f8:	8800759c 	.word	0x8800759c
 800f3fc:	7e37e43c 	.word	0x7e37e43c
 800f400:	8800759c 	.word	0x8800759c
 800f404:	fe37e43c 	.word	0xfe37e43c
 800f408:	c2f8f359 	.word	0xc2f8f359
 800f40c:	81a56e1f 	.word	0x81a56e1f
 800f410:	43500000 	.word	0x43500000
 800f414:	ffff3cb0 	.word	0xffff3cb0
 800f418:	3c900000 	.word	0x3c900000

0800f41c <with_errno>:
 800f41c:	b510      	push	{r4, lr}
 800f41e:	ed2d 8b02 	vpush	{d8}
 800f422:	eeb0 8a40 	vmov.f32	s16, s0
 800f426:	eef0 8a60 	vmov.f32	s17, s1
 800f42a:	4604      	mov	r4, r0
 800f42c:	f7fc f80e 	bl	800b44c <__errno>
 800f430:	eeb0 0a48 	vmov.f32	s0, s16
 800f434:	eef0 0a68 	vmov.f32	s1, s17
 800f438:	ecbd 8b02 	vpop	{d8}
 800f43c:	6004      	str	r4, [r0, #0]
 800f43e:	bd10      	pop	{r4, pc}

0800f440 <xflow>:
 800f440:	4603      	mov	r3, r0
 800f442:	b507      	push	{r0, r1, r2, lr}
 800f444:	ec51 0b10 	vmov	r0, r1, d0
 800f448:	b183      	cbz	r3, 800f46c <xflow+0x2c>
 800f44a:	4602      	mov	r2, r0
 800f44c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f450:	e9cd 2300 	strd	r2, r3, [sp]
 800f454:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f458:	f7f1 f8d6 	bl	8000608 <__aeabi_dmul>
 800f45c:	ec41 0b10 	vmov	d0, r0, r1
 800f460:	2022      	movs	r0, #34	@ 0x22
 800f462:	b003      	add	sp, #12
 800f464:	f85d eb04 	ldr.w	lr, [sp], #4
 800f468:	f7ff bfd8 	b.w	800f41c <with_errno>
 800f46c:	4602      	mov	r2, r0
 800f46e:	460b      	mov	r3, r1
 800f470:	e7ee      	b.n	800f450 <xflow+0x10>
 800f472:	0000      	movs	r0, r0
 800f474:	0000      	movs	r0, r0
	...

0800f478 <__math_uflow>:
 800f478:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f480 <__math_uflow+0x8>
 800f47c:	f7ff bfe0 	b.w	800f440 <xflow>
 800f480:	00000000 	.word	0x00000000
 800f484:	10000000 	.word	0x10000000

0800f488 <__math_oflow>:
 800f488:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f490 <__math_oflow+0x8>
 800f48c:	f7ff bfd8 	b.w	800f440 <xflow>
 800f490:	00000000 	.word	0x00000000
 800f494:	70000000 	.word	0x70000000

0800f498 <__kernel_rem_pio2>:
 800f498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49c:	ed2d 8b02 	vpush	{d8}
 800f4a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f4a4:	f112 0f14 	cmn.w	r2, #20
 800f4a8:	9306      	str	r3, [sp, #24]
 800f4aa:	9104      	str	r1, [sp, #16]
 800f4ac:	4bbe      	ldr	r3, [pc, #760]	@ (800f7a8 <__kernel_rem_pio2+0x310>)
 800f4ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f4b0:	9008      	str	r0, [sp, #32]
 800f4b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	9b06      	ldr	r3, [sp, #24]
 800f4ba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f4be:	bfa8      	it	ge
 800f4c0:	1ed4      	subge	r4, r2, #3
 800f4c2:	9305      	str	r3, [sp, #20]
 800f4c4:	bfb2      	itee	lt
 800f4c6:	2400      	movlt	r4, #0
 800f4c8:	2318      	movge	r3, #24
 800f4ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800f4ce:	f06f 0317 	mvn.w	r3, #23
 800f4d2:	fb04 3303 	mla	r3, r4, r3, r3
 800f4d6:	eb03 0b02 	add.w	fp, r3, r2
 800f4da:	9b00      	ldr	r3, [sp, #0]
 800f4dc:	9a05      	ldr	r2, [sp, #20]
 800f4de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800f798 <__kernel_rem_pio2+0x300>
 800f4e2:	eb03 0802 	add.w	r8, r3, r2
 800f4e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f4e8:	1aa7      	subs	r7, r4, r2
 800f4ea:	ae20      	add	r6, sp, #128	@ 0x80
 800f4ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f4f0:	2500      	movs	r5, #0
 800f4f2:	4545      	cmp	r5, r8
 800f4f4:	dd13      	ble.n	800f51e <__kernel_rem_pio2+0x86>
 800f4f6:	9b06      	ldr	r3, [sp, #24]
 800f4f8:	aa20      	add	r2, sp, #128	@ 0x80
 800f4fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f4fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f502:	f04f 0800 	mov.w	r8, #0
 800f506:	9b00      	ldr	r3, [sp, #0]
 800f508:	4598      	cmp	r8, r3
 800f50a:	dc31      	bgt.n	800f570 <__kernel_rem_pio2+0xd8>
 800f50c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800f798 <__kernel_rem_pio2+0x300>
 800f510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f514:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f518:	462f      	mov	r7, r5
 800f51a:	2600      	movs	r6, #0
 800f51c:	e01b      	b.n	800f556 <__kernel_rem_pio2+0xbe>
 800f51e:	42ef      	cmn	r7, r5
 800f520:	d407      	bmi.n	800f532 <__kernel_rem_pio2+0x9a>
 800f522:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f526:	f7f1 f805 	bl	8000534 <__aeabi_i2d>
 800f52a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f52e:	3501      	adds	r5, #1
 800f530:	e7df      	b.n	800f4f2 <__kernel_rem_pio2+0x5a>
 800f532:	ec51 0b18 	vmov	r0, r1, d8
 800f536:	e7f8      	b.n	800f52a <__kernel_rem_pio2+0x92>
 800f538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f53c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f540:	f7f1 f862 	bl	8000608 <__aeabi_dmul>
 800f544:	4602      	mov	r2, r0
 800f546:	460b      	mov	r3, r1
 800f548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f54c:	f7f0 fea6 	bl	800029c <__adddf3>
 800f550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f554:	3601      	adds	r6, #1
 800f556:	9b05      	ldr	r3, [sp, #20]
 800f558:	429e      	cmp	r6, r3
 800f55a:	f1a7 0708 	sub.w	r7, r7, #8
 800f55e:	ddeb      	ble.n	800f538 <__kernel_rem_pio2+0xa0>
 800f560:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f564:	f108 0801 	add.w	r8, r8, #1
 800f568:	ecaa 7b02 	vstmia	sl!, {d7}
 800f56c:	3508      	adds	r5, #8
 800f56e:	e7ca      	b.n	800f506 <__kernel_rem_pio2+0x6e>
 800f570:	9b00      	ldr	r3, [sp, #0]
 800f572:	f8dd 8000 	ldr.w	r8, [sp]
 800f576:	aa0c      	add	r2, sp, #48	@ 0x30
 800f578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f57c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f57e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f580:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f584:	9309      	str	r3, [sp, #36]	@ 0x24
 800f586:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f58a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f58c:	ab98      	add	r3, sp, #608	@ 0x260
 800f58e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f592:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f596:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f59a:	ac0c      	add	r4, sp, #48	@ 0x30
 800f59c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f59e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f5a2:	46a1      	mov	r9, r4
 800f5a4:	46c2      	mov	sl, r8
 800f5a6:	f1ba 0f00 	cmp.w	sl, #0
 800f5aa:	f1a5 0508 	sub.w	r5, r5, #8
 800f5ae:	dc77      	bgt.n	800f6a0 <__kernel_rem_pio2+0x208>
 800f5b0:	4658      	mov	r0, fp
 800f5b2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f5b6:	f7ff feb3 	bl	800f320 <scalbn>
 800f5ba:	ec57 6b10 	vmov	r6, r7, d0
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	f7f1 f81e 	bl	8000608 <__aeabi_dmul>
 800f5cc:	ec41 0b10 	vmov	d0, r0, r1
 800f5d0:	f000 faba 	bl	800fb48 <floor>
 800f5d4:	4b75      	ldr	r3, [pc, #468]	@ (800f7ac <__kernel_rem_pio2+0x314>)
 800f5d6:	ec51 0b10 	vmov	r0, r1, d0
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f7f1 f814 	bl	8000608 <__aeabi_dmul>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	f7f0 fe56 	bl	8000298 <__aeabi_dsub>
 800f5ec:	460f      	mov	r7, r1
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	f7f1 faba 	bl	8000b68 <__aeabi_d2iz>
 800f5f4:	9002      	str	r0, [sp, #8]
 800f5f6:	f7f0 ff9d 	bl	8000534 <__aeabi_i2d>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	4630      	mov	r0, r6
 800f600:	4639      	mov	r1, r7
 800f602:	f7f0 fe49 	bl	8000298 <__aeabi_dsub>
 800f606:	f1bb 0f00 	cmp.w	fp, #0
 800f60a:	4606      	mov	r6, r0
 800f60c:	460f      	mov	r7, r1
 800f60e:	dd6c      	ble.n	800f6ea <__kernel_rem_pio2+0x252>
 800f610:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800f614:	ab0c      	add	r3, sp, #48	@ 0x30
 800f616:	9d02      	ldr	r5, [sp, #8]
 800f618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f61c:	f1cb 0018 	rsb	r0, fp, #24
 800f620:	fa43 f200 	asr.w	r2, r3, r0
 800f624:	4415      	add	r5, r2
 800f626:	4082      	lsls	r2, r0
 800f628:	1a9b      	subs	r3, r3, r2
 800f62a:	aa0c      	add	r2, sp, #48	@ 0x30
 800f62c:	9502      	str	r5, [sp, #8]
 800f62e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f632:	f1cb 0217 	rsb	r2, fp, #23
 800f636:	fa43 f902 	asr.w	r9, r3, r2
 800f63a:	f1b9 0f00 	cmp.w	r9, #0
 800f63e:	dd64      	ble.n	800f70a <__kernel_rem_pio2+0x272>
 800f640:	9b02      	ldr	r3, [sp, #8]
 800f642:	2200      	movs	r2, #0
 800f644:	3301      	adds	r3, #1
 800f646:	9302      	str	r3, [sp, #8]
 800f648:	4615      	mov	r5, r2
 800f64a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f64e:	4590      	cmp	r8, r2
 800f650:	f300 80b8 	bgt.w	800f7c4 <__kernel_rem_pio2+0x32c>
 800f654:	f1bb 0f00 	cmp.w	fp, #0
 800f658:	dd07      	ble.n	800f66a <__kernel_rem_pio2+0x1d2>
 800f65a:	f1bb 0f01 	cmp.w	fp, #1
 800f65e:	f000 80bf 	beq.w	800f7e0 <__kernel_rem_pio2+0x348>
 800f662:	f1bb 0f02 	cmp.w	fp, #2
 800f666:	f000 80c6 	beq.w	800f7f6 <__kernel_rem_pio2+0x35e>
 800f66a:	f1b9 0f02 	cmp.w	r9, #2
 800f66e:	d14c      	bne.n	800f70a <__kernel_rem_pio2+0x272>
 800f670:	4632      	mov	r2, r6
 800f672:	463b      	mov	r3, r7
 800f674:	494e      	ldr	r1, [pc, #312]	@ (800f7b0 <__kernel_rem_pio2+0x318>)
 800f676:	2000      	movs	r0, #0
 800f678:	f7f0 fe0e 	bl	8000298 <__aeabi_dsub>
 800f67c:	4606      	mov	r6, r0
 800f67e:	460f      	mov	r7, r1
 800f680:	2d00      	cmp	r5, #0
 800f682:	d042      	beq.n	800f70a <__kernel_rem_pio2+0x272>
 800f684:	4658      	mov	r0, fp
 800f686:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800f7a0 <__kernel_rem_pio2+0x308>
 800f68a:	f7ff fe49 	bl	800f320 <scalbn>
 800f68e:	4630      	mov	r0, r6
 800f690:	4639      	mov	r1, r7
 800f692:	ec53 2b10 	vmov	r2, r3, d0
 800f696:	f7f0 fdff 	bl	8000298 <__aeabi_dsub>
 800f69a:	4606      	mov	r6, r0
 800f69c:	460f      	mov	r7, r1
 800f69e:	e034      	b.n	800f70a <__kernel_rem_pio2+0x272>
 800f6a0:	4b44      	ldr	r3, [pc, #272]	@ (800f7b4 <__kernel_rem_pio2+0x31c>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a8:	f7f0 ffae 	bl	8000608 <__aeabi_dmul>
 800f6ac:	f7f1 fa5c 	bl	8000b68 <__aeabi_d2iz>
 800f6b0:	f7f0 ff40 	bl	8000534 <__aeabi_i2d>
 800f6b4:	4b40      	ldr	r3, [pc, #256]	@ (800f7b8 <__kernel_rem_pio2+0x320>)
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	460f      	mov	r7, r1
 800f6bc:	f7f0 ffa4 	bl	8000608 <__aeabi_dmul>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6c8:	f7f0 fde6 	bl	8000298 <__aeabi_dsub>
 800f6cc:	f7f1 fa4c 	bl	8000b68 <__aeabi_d2iz>
 800f6d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6d4:	f849 0b04 	str.w	r0, [r9], #4
 800f6d8:	4639      	mov	r1, r7
 800f6da:	4630      	mov	r0, r6
 800f6dc:	f7f0 fdde 	bl	800029c <__adddf3>
 800f6e0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6e8:	e75d      	b.n	800f5a6 <__kernel_rem_pio2+0x10e>
 800f6ea:	d107      	bne.n	800f6fc <__kernel_rem_pio2+0x264>
 800f6ec:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800f6f0:	aa0c      	add	r2, sp, #48	@ 0x30
 800f6f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6f6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f6fa:	e79e      	b.n	800f63a <__kernel_rem_pio2+0x1a2>
 800f6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800f7bc <__kernel_rem_pio2+0x324>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	f7f1 fa08 	bl	8000b14 <__aeabi_dcmpge>
 800f704:	2800      	cmp	r0, #0
 800f706:	d143      	bne.n	800f790 <__kernel_rem_pio2+0x2f8>
 800f708:	4681      	mov	r9, r0
 800f70a:	2200      	movs	r2, #0
 800f70c:	2300      	movs	r3, #0
 800f70e:	4630      	mov	r0, r6
 800f710:	4639      	mov	r1, r7
 800f712:	f7f1 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 800f716:	2800      	cmp	r0, #0
 800f718:	f000 80bf 	beq.w	800f89a <__kernel_rem_pio2+0x402>
 800f71c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800f720:	2200      	movs	r2, #0
 800f722:	9900      	ldr	r1, [sp, #0]
 800f724:	428b      	cmp	r3, r1
 800f726:	da6e      	bge.n	800f806 <__kernel_rem_pio2+0x36e>
 800f728:	2a00      	cmp	r2, #0
 800f72a:	f000 8089 	beq.w	800f840 <__kernel_rem_pio2+0x3a8>
 800f72e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f732:	ab0c      	add	r3, sp, #48	@ 0x30
 800f734:	f1ab 0b18 	sub.w	fp, fp, #24
 800f738:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d0f6      	beq.n	800f72e <__kernel_rem_pio2+0x296>
 800f740:	4658      	mov	r0, fp
 800f742:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800f7a0 <__kernel_rem_pio2+0x308>
 800f746:	f7ff fdeb 	bl	800f320 <scalbn>
 800f74a:	f108 0301 	add.w	r3, r8, #1
 800f74e:	00da      	lsls	r2, r3, #3
 800f750:	9205      	str	r2, [sp, #20]
 800f752:	ec55 4b10 	vmov	r4, r5, d0
 800f756:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f758:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800f7b4 <__kernel_rem_pio2+0x31c>
 800f75c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f760:	4646      	mov	r6, r8
 800f762:	f04f 0a00 	mov.w	sl, #0
 800f766:	2e00      	cmp	r6, #0
 800f768:	f280 80cf 	bge.w	800f90a <__kernel_rem_pio2+0x472>
 800f76c:	4644      	mov	r4, r8
 800f76e:	2c00      	cmp	r4, #0
 800f770:	f2c0 80fd 	blt.w	800f96e <__kernel_rem_pio2+0x4d6>
 800f774:	4b12      	ldr	r3, [pc, #72]	@ (800f7c0 <__kernel_rem_pio2+0x328>)
 800f776:	461f      	mov	r7, r3
 800f778:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f77a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f77e:	9306      	str	r3, [sp, #24]
 800f780:	f04f 0a00 	mov.w	sl, #0
 800f784:	f04f 0b00 	mov.w	fp, #0
 800f788:	2600      	movs	r6, #0
 800f78a:	eba8 0504 	sub.w	r5, r8, r4
 800f78e:	e0e2      	b.n	800f956 <__kernel_rem_pio2+0x4be>
 800f790:	f04f 0902 	mov.w	r9, #2
 800f794:	e754      	b.n	800f640 <__kernel_rem_pio2+0x1a8>
 800f796:	bf00      	nop
	...
 800f7a4:	3ff00000 	.word	0x3ff00000
 800f7a8:	08010788 	.word	0x08010788
 800f7ac:	40200000 	.word	0x40200000
 800f7b0:	3ff00000 	.word	0x3ff00000
 800f7b4:	3e700000 	.word	0x3e700000
 800f7b8:	41700000 	.word	0x41700000
 800f7bc:	3fe00000 	.word	0x3fe00000
 800f7c0:	08010748 	.word	0x08010748
 800f7c4:	f854 3b04 	ldr.w	r3, [r4], #4
 800f7c8:	b945      	cbnz	r5, 800f7dc <__kernel_rem_pio2+0x344>
 800f7ca:	b123      	cbz	r3, 800f7d6 <__kernel_rem_pio2+0x33e>
 800f7cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f7d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	3201      	adds	r2, #1
 800f7d8:	461d      	mov	r5, r3
 800f7da:	e738      	b.n	800f64e <__kernel_rem_pio2+0x1b6>
 800f7dc:	1acb      	subs	r3, r1, r3
 800f7de:	e7f7      	b.n	800f7d0 <__kernel_rem_pio2+0x338>
 800f7e0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800f7e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f7ee:	a90c      	add	r1, sp, #48	@ 0x30
 800f7f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f7f4:	e739      	b.n	800f66a <__kernel_rem_pio2+0x1d2>
 800f7f6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800f7fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f800:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f804:	e7f3      	b.n	800f7ee <__kernel_rem_pio2+0x356>
 800f806:	a90c      	add	r1, sp, #48	@ 0x30
 800f808:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	430a      	orrs	r2, r1
 800f810:	e787      	b.n	800f722 <__kernel_rem_pio2+0x28a>
 800f812:	3401      	adds	r4, #1
 800f814:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f818:	2a00      	cmp	r2, #0
 800f81a:	d0fa      	beq.n	800f812 <__kernel_rem_pio2+0x37a>
 800f81c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f81e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f822:	eb0d 0503 	add.w	r5, sp, r3
 800f826:	9b06      	ldr	r3, [sp, #24]
 800f828:	aa20      	add	r2, sp, #128	@ 0x80
 800f82a:	4443      	add	r3, r8
 800f82c:	f108 0701 	add.w	r7, r8, #1
 800f830:	3d98      	subs	r5, #152	@ 0x98
 800f832:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f836:	4444      	add	r4, r8
 800f838:	42bc      	cmp	r4, r7
 800f83a:	da04      	bge.n	800f846 <__kernel_rem_pio2+0x3ae>
 800f83c:	46a0      	mov	r8, r4
 800f83e:	e6a2      	b.n	800f586 <__kernel_rem_pio2+0xee>
 800f840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f842:	2401      	movs	r4, #1
 800f844:	e7e6      	b.n	800f814 <__kernel_rem_pio2+0x37c>
 800f846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f848:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f84c:	f7f0 fe72 	bl	8000534 <__aeabi_i2d>
 800f850:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800fb18 <__kernel_rem_pio2+0x680>
 800f854:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f858:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f85c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f860:	46b2      	mov	sl, r6
 800f862:	f04f 0800 	mov.w	r8, #0
 800f866:	9b05      	ldr	r3, [sp, #20]
 800f868:	4598      	cmp	r8, r3
 800f86a:	dd05      	ble.n	800f878 <__kernel_rem_pio2+0x3e0>
 800f86c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f870:	3701      	adds	r7, #1
 800f872:	eca5 7b02 	vstmia	r5!, {d7}
 800f876:	e7df      	b.n	800f838 <__kernel_rem_pio2+0x3a0>
 800f878:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f87c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f880:	f7f0 fec2 	bl	8000608 <__aeabi_dmul>
 800f884:	4602      	mov	r2, r0
 800f886:	460b      	mov	r3, r1
 800f888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f88c:	f7f0 fd06 	bl	800029c <__adddf3>
 800f890:	f108 0801 	add.w	r8, r8, #1
 800f894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f898:	e7e5      	b.n	800f866 <__kernel_rem_pio2+0x3ce>
 800f89a:	f1cb 0000 	rsb	r0, fp, #0
 800f89e:	ec47 6b10 	vmov	d0, r6, r7
 800f8a2:	f7ff fd3d 	bl	800f320 <scalbn>
 800f8a6:	ec55 4b10 	vmov	r4, r5, d0
 800f8aa:	4b9d      	ldr	r3, [pc, #628]	@ (800fb20 <__kernel_rem_pio2+0x688>)
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	f7f1 f92f 	bl	8000b14 <__aeabi_dcmpge>
 800f8b6:	b300      	cbz	r0, 800f8fa <__kernel_rem_pio2+0x462>
 800f8b8:	4b9a      	ldr	r3, [pc, #616]	@ (800fb24 <__kernel_rem_pio2+0x68c>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	4620      	mov	r0, r4
 800f8be:	4629      	mov	r1, r5
 800f8c0:	f7f0 fea2 	bl	8000608 <__aeabi_dmul>
 800f8c4:	f7f1 f950 	bl	8000b68 <__aeabi_d2iz>
 800f8c8:	4606      	mov	r6, r0
 800f8ca:	f7f0 fe33 	bl	8000534 <__aeabi_i2d>
 800f8ce:	4b94      	ldr	r3, [pc, #592]	@ (800fb20 <__kernel_rem_pio2+0x688>)
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f7f0 fe99 	bl	8000608 <__aeabi_dmul>
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	4602      	mov	r2, r0
 800f8da:	4629      	mov	r1, r5
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f7f0 fcdb 	bl	8000298 <__aeabi_dsub>
 800f8e2:	f7f1 f941 	bl	8000b68 <__aeabi_d2iz>
 800f8e6:	ab0c      	add	r3, sp, #48	@ 0x30
 800f8e8:	f10b 0b18 	add.w	fp, fp, #24
 800f8ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f8f0:	f108 0801 	add.w	r8, r8, #1
 800f8f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f8f8:	e722      	b.n	800f740 <__kernel_rem_pio2+0x2a8>
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	f7f1 f933 	bl	8000b68 <__aeabi_d2iz>
 800f902:	ab0c      	add	r3, sp, #48	@ 0x30
 800f904:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f908:	e71a      	b.n	800f740 <__kernel_rem_pio2+0x2a8>
 800f90a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f90c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f910:	f7f0 fe10 	bl	8000534 <__aeabi_i2d>
 800f914:	4622      	mov	r2, r4
 800f916:	462b      	mov	r3, r5
 800f918:	f7f0 fe76 	bl	8000608 <__aeabi_dmul>
 800f91c:	4652      	mov	r2, sl
 800f91e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f922:	465b      	mov	r3, fp
 800f924:	4620      	mov	r0, r4
 800f926:	4629      	mov	r1, r5
 800f928:	f7f0 fe6e 	bl	8000608 <__aeabi_dmul>
 800f92c:	3e01      	subs	r6, #1
 800f92e:	4604      	mov	r4, r0
 800f930:	460d      	mov	r5, r1
 800f932:	e718      	b.n	800f766 <__kernel_rem_pio2+0x2ce>
 800f934:	9906      	ldr	r1, [sp, #24]
 800f936:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f93a:	9106      	str	r1, [sp, #24]
 800f93c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f940:	f7f0 fe62 	bl	8000608 <__aeabi_dmul>
 800f944:	4602      	mov	r2, r0
 800f946:	460b      	mov	r3, r1
 800f948:	4650      	mov	r0, sl
 800f94a:	4659      	mov	r1, fp
 800f94c:	f7f0 fca6 	bl	800029c <__adddf3>
 800f950:	3601      	adds	r6, #1
 800f952:	4682      	mov	sl, r0
 800f954:	468b      	mov	fp, r1
 800f956:	9b00      	ldr	r3, [sp, #0]
 800f958:	429e      	cmp	r6, r3
 800f95a:	dc01      	bgt.n	800f960 <__kernel_rem_pio2+0x4c8>
 800f95c:	42b5      	cmp	r5, r6
 800f95e:	dae9      	bge.n	800f934 <__kernel_rem_pio2+0x49c>
 800f960:	ab48      	add	r3, sp, #288	@ 0x120
 800f962:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f966:	e9c5 ab00 	strd	sl, fp, [r5]
 800f96a:	3c01      	subs	r4, #1
 800f96c:	e6ff      	b.n	800f76e <__kernel_rem_pio2+0x2d6>
 800f96e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f970:	2b02      	cmp	r3, #2
 800f972:	dc0b      	bgt.n	800f98c <__kernel_rem_pio2+0x4f4>
 800f974:	2b00      	cmp	r3, #0
 800f976:	dc39      	bgt.n	800f9ec <__kernel_rem_pio2+0x554>
 800f978:	d05d      	beq.n	800fa36 <__kernel_rem_pio2+0x59e>
 800f97a:	9b02      	ldr	r3, [sp, #8]
 800f97c:	f003 0007 	and.w	r0, r3, #7
 800f980:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f984:	ecbd 8b02 	vpop	{d8}
 800f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f98e:	2b03      	cmp	r3, #3
 800f990:	d1f3      	bne.n	800f97a <__kernel_rem_pio2+0x4e2>
 800f992:	9b05      	ldr	r3, [sp, #20]
 800f994:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f998:	eb0d 0403 	add.w	r4, sp, r3
 800f99c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f9a0:	4625      	mov	r5, r4
 800f9a2:	46c2      	mov	sl, r8
 800f9a4:	f1ba 0f00 	cmp.w	sl, #0
 800f9a8:	f1a5 0508 	sub.w	r5, r5, #8
 800f9ac:	dc6b      	bgt.n	800fa86 <__kernel_rem_pio2+0x5ee>
 800f9ae:	4645      	mov	r5, r8
 800f9b0:	2d01      	cmp	r5, #1
 800f9b2:	f1a4 0408 	sub.w	r4, r4, #8
 800f9b6:	f300 8087 	bgt.w	800fac8 <__kernel_rem_pio2+0x630>
 800f9ba:	9c05      	ldr	r4, [sp, #20]
 800f9bc:	ab48      	add	r3, sp, #288	@ 0x120
 800f9be:	441c      	add	r4, r3
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	f1b8 0f01 	cmp.w	r8, #1
 800f9c8:	f300 809c 	bgt.w	800fb04 <__kernel_rem_pio2+0x66c>
 800f9cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f9d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f9d4:	f1b9 0f00 	cmp.w	r9, #0
 800f9d8:	f040 80a6 	bne.w	800fb28 <__kernel_rem_pio2+0x690>
 800f9dc:	9b04      	ldr	r3, [sp, #16]
 800f9de:	e9c3 7800 	strd	r7, r8, [r3]
 800f9e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f9e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f9ea:	e7c6      	b.n	800f97a <__kernel_rem_pio2+0x4e2>
 800f9ec:	9d05      	ldr	r5, [sp, #20]
 800f9ee:	ab48      	add	r3, sp, #288	@ 0x120
 800f9f0:	441d      	add	r5, r3
 800f9f2:	4644      	mov	r4, r8
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	2c00      	cmp	r4, #0
 800f9fa:	da35      	bge.n	800fa68 <__kernel_rem_pio2+0x5d0>
 800f9fc:	f1b9 0f00 	cmp.w	r9, #0
 800fa00:	d038      	beq.n	800fa74 <__kernel_rem_pio2+0x5dc>
 800fa02:	4602      	mov	r2, r0
 800fa04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa08:	9c04      	ldr	r4, [sp, #16]
 800fa0a:	e9c4 2300 	strd	r2, r3, [r4]
 800fa0e:	4602      	mov	r2, r0
 800fa10:	460b      	mov	r3, r1
 800fa12:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800fa16:	f7f0 fc3f 	bl	8000298 <__aeabi_dsub>
 800fa1a:	ad4a      	add	r5, sp, #296	@ 0x128
 800fa1c:	2401      	movs	r4, #1
 800fa1e:	45a0      	cmp	r8, r4
 800fa20:	da2b      	bge.n	800fa7a <__kernel_rem_pio2+0x5e2>
 800fa22:	f1b9 0f00 	cmp.w	r9, #0
 800fa26:	d002      	beq.n	800fa2e <__kernel_rem_pio2+0x596>
 800fa28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	9b04      	ldr	r3, [sp, #16]
 800fa30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fa34:	e7a1      	b.n	800f97a <__kernel_rem_pio2+0x4e2>
 800fa36:	9c05      	ldr	r4, [sp, #20]
 800fa38:	ab48      	add	r3, sp, #288	@ 0x120
 800fa3a:	441c      	add	r4, r3
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	2100      	movs	r1, #0
 800fa40:	f1b8 0f00 	cmp.w	r8, #0
 800fa44:	da09      	bge.n	800fa5a <__kernel_rem_pio2+0x5c2>
 800fa46:	f1b9 0f00 	cmp.w	r9, #0
 800fa4a:	d002      	beq.n	800fa52 <__kernel_rem_pio2+0x5ba>
 800fa4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa50:	4619      	mov	r1, r3
 800fa52:	9b04      	ldr	r3, [sp, #16]
 800fa54:	e9c3 0100 	strd	r0, r1, [r3]
 800fa58:	e78f      	b.n	800f97a <__kernel_rem_pio2+0x4e2>
 800fa5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fa5e:	f7f0 fc1d 	bl	800029c <__adddf3>
 800fa62:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fa66:	e7eb      	b.n	800fa40 <__kernel_rem_pio2+0x5a8>
 800fa68:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fa6c:	f7f0 fc16 	bl	800029c <__adddf3>
 800fa70:	3c01      	subs	r4, #1
 800fa72:	e7c1      	b.n	800f9f8 <__kernel_rem_pio2+0x560>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	e7c6      	b.n	800fa08 <__kernel_rem_pio2+0x570>
 800fa7a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fa7e:	f7f0 fc0d 	bl	800029c <__adddf3>
 800fa82:	3401      	adds	r4, #1
 800fa84:	e7cb      	b.n	800fa1e <__kernel_rem_pio2+0x586>
 800fa86:	ed95 7b00 	vldr	d7, [r5]
 800fa8a:	ed8d 7b00 	vstr	d7, [sp]
 800fa8e:	ed95 7b02 	vldr	d7, [r5, #8]
 800fa92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa96:	ec53 2b17 	vmov	r2, r3, d7
 800fa9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa9e:	f7f0 fbfd 	bl	800029c <__adddf3>
 800faa2:	4602      	mov	r2, r0
 800faa4:	460b      	mov	r3, r1
 800faa6:	4606      	mov	r6, r0
 800faa8:	460f      	mov	r7, r1
 800faaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faae:	f7f0 fbf3 	bl	8000298 <__aeabi_dsub>
 800fab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fab6:	f7f0 fbf1 	bl	800029c <__adddf3>
 800faba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fabe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800fac2:	e9c5 6700 	strd	r6, r7, [r5]
 800fac6:	e76d      	b.n	800f9a4 <__kernel_rem_pio2+0x50c>
 800fac8:	ed94 7b00 	vldr	d7, [r4]
 800facc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800fad0:	ec51 0b17 	vmov	r0, r1, d7
 800fad4:	4652      	mov	r2, sl
 800fad6:	465b      	mov	r3, fp
 800fad8:	ed8d 7b00 	vstr	d7, [sp]
 800fadc:	f7f0 fbde 	bl	800029c <__adddf3>
 800fae0:	4602      	mov	r2, r0
 800fae2:	460b      	mov	r3, r1
 800fae4:	4606      	mov	r6, r0
 800fae6:	460f      	mov	r7, r1
 800fae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faec:	f7f0 fbd4 	bl	8000298 <__aeabi_dsub>
 800faf0:	4652      	mov	r2, sl
 800faf2:	465b      	mov	r3, fp
 800faf4:	f7f0 fbd2 	bl	800029c <__adddf3>
 800faf8:	3d01      	subs	r5, #1
 800fafa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fafe:	e9c4 6700 	strd	r6, r7, [r4]
 800fb02:	e755      	b.n	800f9b0 <__kernel_rem_pio2+0x518>
 800fb04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fb08:	f7f0 fbc8 	bl	800029c <__adddf3>
 800fb0c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fb10:	e758      	b.n	800f9c4 <__kernel_rem_pio2+0x52c>
 800fb12:	bf00      	nop
 800fb14:	f3af 8000 	nop.w
	...
 800fb20:	41700000 	.word	0x41700000
 800fb24:	3e700000 	.word	0x3e700000
 800fb28:	9b04      	ldr	r3, [sp, #16]
 800fb2a:	9a04      	ldr	r2, [sp, #16]
 800fb2c:	601f      	str	r7, [r3, #0]
 800fb2e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800fb32:	605c      	str	r4, [r3, #4]
 800fb34:	609d      	str	r5, [r3, #8]
 800fb36:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fb3a:	60d3      	str	r3, [r2, #12]
 800fb3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fb40:	6110      	str	r0, [r2, #16]
 800fb42:	6153      	str	r3, [r2, #20]
 800fb44:	e719      	b.n	800f97a <__kernel_rem_pio2+0x4e2>
 800fb46:	bf00      	nop

0800fb48 <floor>:
 800fb48:	ec51 0b10 	vmov	r0, r1, d0
 800fb4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb54:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fb58:	2e13      	cmp	r6, #19
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	4680      	mov	r8, r0
 800fb60:	dc34      	bgt.n	800fbcc <floor+0x84>
 800fb62:	2e00      	cmp	r6, #0
 800fb64:	da17      	bge.n	800fb96 <floor+0x4e>
 800fb66:	a332      	add	r3, pc, #200	@ (adr r3, 800fc30 <floor+0xe8>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	f7f0 fb96 	bl	800029c <__adddf3>
 800fb70:	2200      	movs	r2, #0
 800fb72:	2300      	movs	r3, #0
 800fb74:	f7f0 ffd8 	bl	8000b28 <__aeabi_dcmpgt>
 800fb78:	b150      	cbz	r0, 800fb90 <floor+0x48>
 800fb7a:	2c00      	cmp	r4, #0
 800fb7c:	da55      	bge.n	800fc2a <floor+0xe2>
 800fb7e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fb82:	432c      	orrs	r4, r5
 800fb84:	2500      	movs	r5, #0
 800fb86:	42ac      	cmp	r4, r5
 800fb88:	4c2b      	ldr	r4, [pc, #172]	@ (800fc38 <floor+0xf0>)
 800fb8a:	bf08      	it	eq
 800fb8c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fb90:	4621      	mov	r1, r4
 800fb92:	4628      	mov	r0, r5
 800fb94:	e023      	b.n	800fbde <floor+0x96>
 800fb96:	4f29      	ldr	r7, [pc, #164]	@ (800fc3c <floor+0xf4>)
 800fb98:	4137      	asrs	r7, r6
 800fb9a:	ea01 0307 	and.w	r3, r1, r7
 800fb9e:	4303      	orrs	r3, r0
 800fba0:	d01d      	beq.n	800fbde <floor+0x96>
 800fba2:	a323      	add	r3, pc, #140	@ (adr r3, 800fc30 <floor+0xe8>)
 800fba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba8:	f7f0 fb78 	bl	800029c <__adddf3>
 800fbac:	2200      	movs	r2, #0
 800fbae:	2300      	movs	r3, #0
 800fbb0:	f7f0 ffba 	bl	8000b28 <__aeabi_dcmpgt>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d0eb      	beq.n	800fb90 <floor+0x48>
 800fbb8:	2c00      	cmp	r4, #0
 800fbba:	bfbe      	ittt	lt
 800fbbc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fbc0:	4133      	asrlt	r3, r6
 800fbc2:	18e4      	addlt	r4, r4, r3
 800fbc4:	ea24 0407 	bic.w	r4, r4, r7
 800fbc8:	2500      	movs	r5, #0
 800fbca:	e7e1      	b.n	800fb90 <floor+0x48>
 800fbcc:	2e33      	cmp	r6, #51	@ 0x33
 800fbce:	dd0a      	ble.n	800fbe6 <floor+0x9e>
 800fbd0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fbd4:	d103      	bne.n	800fbde <floor+0x96>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	460b      	mov	r3, r1
 800fbda:	f7f0 fb5f 	bl	800029c <__adddf3>
 800fbde:	ec41 0b10 	vmov	d0, r0, r1
 800fbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fbea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fbee:	40df      	lsrs	r7, r3
 800fbf0:	4207      	tst	r7, r0
 800fbf2:	d0f4      	beq.n	800fbde <floor+0x96>
 800fbf4:	a30e      	add	r3, pc, #56	@ (adr r3, 800fc30 <floor+0xe8>)
 800fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfa:	f7f0 fb4f 	bl	800029c <__adddf3>
 800fbfe:	2200      	movs	r2, #0
 800fc00:	2300      	movs	r3, #0
 800fc02:	f7f0 ff91 	bl	8000b28 <__aeabi_dcmpgt>
 800fc06:	2800      	cmp	r0, #0
 800fc08:	d0c2      	beq.n	800fb90 <floor+0x48>
 800fc0a:	2c00      	cmp	r4, #0
 800fc0c:	da0a      	bge.n	800fc24 <floor+0xdc>
 800fc0e:	2e14      	cmp	r6, #20
 800fc10:	d101      	bne.n	800fc16 <floor+0xce>
 800fc12:	3401      	adds	r4, #1
 800fc14:	e006      	b.n	800fc24 <floor+0xdc>
 800fc16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	40b3      	lsls	r3, r6
 800fc1e:	441d      	add	r5, r3
 800fc20:	4545      	cmp	r5, r8
 800fc22:	d3f6      	bcc.n	800fc12 <floor+0xca>
 800fc24:	ea25 0507 	bic.w	r5, r5, r7
 800fc28:	e7b2      	b.n	800fb90 <floor+0x48>
 800fc2a:	2500      	movs	r5, #0
 800fc2c:	462c      	mov	r4, r5
 800fc2e:	e7af      	b.n	800fb90 <floor+0x48>
 800fc30:	8800759c 	.word	0x8800759c
 800fc34:	7e37e43c 	.word	0x7e37e43c
 800fc38:	bff00000 	.word	0xbff00000
 800fc3c:	000fffff 	.word	0x000fffff

0800fc40 <_init>:
 800fc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc42:	bf00      	nop
 800fc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc46:	bc08      	pop	{r3}
 800fc48:	469e      	mov	lr, r3
 800fc4a:	4770      	bx	lr

0800fc4c <_fini>:
 800fc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4e:	bf00      	nop
 800fc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc52:	bc08      	pop	{r3}
 800fc54:	469e      	mov	lr, r3
 800fc56:	4770      	bx	lr
